version: '3.8'

services:
  # Основной сервис бота для продакшена
  antispam-bot:
    build: .
    container_name: antispam-bot-prod
    restart: unless-stopped
    stop_grace_period: 30s
    stop_signal: SIGTERM
    secrets:
      - bot_token
      - admin_ids
      - db_path
    environment:
      - BOT_TOKEN_FILE=/run/secrets/bot_token
      - ADMIN_IDS_FILE=/run/secrets/admin_ids
      - DB_PATH_FILE=/run/secrets/db_path
    volumes:
      - bot-data:/app/data
      - bot-logs:/app/logs
    ports:
      - "8000:8000"
    networks:
      - antispam-network
    # Ограничения ресурсов
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

    # Проверка здоровья
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis для кеширования и rate limiting
  redis:
    image: redis:7-alpine
    container_name: antispam-redis-prod
    restart: unless-stopped
    volumes:
      - redis-data:/data
    networks:
      - antispam-network
    # Ограничения ресурсов
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'
        reservations:
          memory: 64M
          cpus: '0.1'
    # Конфигурация безопасности
    command: redis-server --requirepass ${REDIS_PASSWORD:-default_password} --appendonly yes

  # Nginx для reverse proxy
  nginx:
    image: nginx:alpine
    container_name: antispam-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx
      - certbot-webroot:/var/www/certbot
      - letsencrypt-certs:/etc/letsencrypt
    networks:
      - antispam-network
    depends_on:
      - antispam-bot
      - certbot
    # Ограничения ресурсов
    deploy:
      resources:
        limits:
          memory: 64M
          cpus: '0.1'

  # Certbot для Let's Encrypt
  certbot:
    build:
      context: ./nginx
      dockerfile: Dockerfile.certbot
    container_name: antispam-certbot
    restart: unless-stopped
    volumes:
      - certbot-webroot:/var/www/certbot
      - letsencrypt-certs:/etc/letsencrypt
      - ./nginx/certbot.conf:/etc/letsencrypt/certbot.conf:ro
    environment:
      - DOMAIN=${DOMAIN:-antispam-bot.com}
      - EMAIL=${EMAIL:-admin@antispam-bot.com}
      - NOTIFICATION_WEBHOOK=${NOTIFICATION_WEBHOOK:-}
    networks:
      - antispam-network
    depends_on:
      - nginx
    # Ограничения ресурсов
    deploy:
      resources:
        limits:
          memory: 32M
          cpus: '0.05'
        reservations:
          memory: 32M
          cpus: '0.05'

  # Мониторинг (опционально)
  prometheus:
    image: prom/prometheus:latest
    container_name: antispam-prometheus
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - antispam-network
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: antispam-grafana
    restart: unless-stopped
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning:ro
    networks:
      - antispam-network
    profiles:
      - monitoring

# Docker secrets для продакшена
secrets:
  bot_token:
    file: ./secrets/bot_token.txt
  admin_ids:
    file: ./secrets/admin_ids.txt
  db_path:
    file: ./secrets/db_path.txt

# Volumes для данных
volumes:
  bot-data:
    driver: local
  bot-logs:
    driver: local
  redis-data:
    driver: local
  certbot-webroot:
    driver: local
  letsencrypt-certs:
    driver: local
  nginx-logs:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

# Сеть для изоляции
networks:
  antispam-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
