#!/bin/bash
# –ì–ª–∞–≤–Ω—ã–π —É—Å—Ç–∞–Ω–æ–≤–æ—á–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è AntiSpam Bot
# Main installation script for AntiSpam Bot

set -euo pipefail

# Load secure utilities
source "$(dirname "$0")/scripts/secure_shell_utils.sh"

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ (–±–µ–∑ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É–∂–µ –∑–∞–¥–∞–Ω–Ω—ã—Ö/readonly –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö)
[ -z "${RED+x}" ] && RED='\033[0;31m'
[ -z "${GREEN+x}" ] && GREEN='\033[0;32m'
[ -z "${YELLOW+x}" ] && YELLOW='\033[1;33m'
[ -z "${BLUE+x}" ] && BLUE='\033[0;34m'
[ -z "${PURPLE+x}" ] && PURPLE='\033[0;35m'
[ -z "${CYAN+x}" ] && CYAN='\033[0;36m'
[ -z "${NC+x}" ] && NC='\033[0m' # No Color

# –ü—Ä–æ—Ñ–∏–ª—å —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—É—Ç–∏ (prod | user)
PROFILE="prod"
APP_NAME="antispam-bot"
BASE_DIR="/opt/${APP_NAME}"
CONFIG_DIR="/etc/${APP_NAME}"
LOG_DIR="/var/log/${APP_NAME}"
RUN_USER="${APP_NAME}"
# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
SSH_PORT="2022"
NON_INTERACTIVE="false"
COMPOSE_CMD="docker compose"
INSTALLATION_TYPE=""
DOMAIN=""
EMAIL=""
BOT_TOKEN=""
ADMIN_IDS=""

resolve_paths_by_profile() {
    if [ "$PROFILE" = "user" ]; then
        local current_user=${SUDO_USER:-$(whoami)}
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ–º–∞—à–Ω—é—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∞ –Ω–µ root
        local user_home=$(getent passwd "$current_user" | cut -d: -f6)
        BASE_DIR="${user_home}/bots/Flame_Of_Styx_bot"
        CONFIG_DIR="${BASE_DIR}/config"
        LOG_DIR="${BASE_DIR}/logs"
        RUN_USER="$current_user"
    else
        BASE_DIR="/opt/${APP_NAME}"
        CONFIG_DIR="/etc/${APP_NAME}"
        LOG_DIR="/var/log/${APP_NAME}"
        RUN_USER="${APP_NAME}"
    fi
}

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ docker compose –∫–æ–º–∞–Ω–¥—ã
detect_compose() {
    if docker compose version >/dev/null 2>&1; then
        COMPOSE_CMD="docker compose"
    elif command -v docker-compose >/dev/null 2>&1; then
        COMPOSE_CMD="docker-compose"
    else
        warning "docker compose –Ω–µ –Ω–∞–π–¥–µ–Ω. –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–ª–∞–≥–∏–Ω compose."
        apt-get update -y && apt-get install -y docker-compose-plugin || true
        if docker compose version >/dev/null 2>&1; then
            COMPOSE_CMD="docker compose"
        elif command -v docker-compose >/dev/null 2>&1; then
            COMPOSE_CMD="docker-compose"
        else
            error "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ docker compose –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏"
        fi
    fi
}

# –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ CLI
parse_args() {
    for arg in "$@"; do
        case "$arg" in
            --profile=*) PROFILE="${arg#*=}" ;;
            --type=*) INSTALLATION_TYPE="${arg#*=}" ;;
            --ssh-port=*) SSH_PORT="${arg#*=}" ;;
            --domain=*) DOMAIN="${arg#*=}" ;;
            --email=*) EMAIL="${arg#*=}" ;;
            --bot-token=*) BOT_TOKEN="${arg#*=}" ;;
            --admin-ids=*) ADMIN_IDS="${arg#*=}" ;;
            --non-interactive) NON_INTERACTIVE="true" ;;
            --dry-run) DRY_RUN="true" ;;
        esac
    done
}

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª
setup_logging() {
    mkdir -p "${LOG_DIR}"
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–≤–æ–¥ –≤ –ª–æ–≥ –∏ –Ω–∞ —ç–∫—Ä–∞–Ω
    exec > >(tee -a "${LOG_DIR}/install.log") 2>&1
}

# –§—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo -e "${BLUE}[$(date '+%Y-%m-%d %H:%M:%S')]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

info() {
    echo -e "${CYAN}[INFO]${NC} $1"
}

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
clear
echo -e "${PURPLE}"
echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
echo "‚ïë                    ANTI-SPAM BOT INSTALLER                   ‚ïë"
echo "‚ïë                                                              ‚ïë"
echo "‚ïë  ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram –±–æ—Ç–∞                  ‚ïë"
echo "‚ïë  üîê –° –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Let's Encrypt SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤             ‚ïë"
echo "‚ïë  üê≥ Docker –∏ systemd –≤–∞—Ä–∏–∞–Ω—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–∫–∏                     ‚ïë"
echo "‚ïë  üõ°Ô∏è –í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏                         ‚ïë"
echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
echo -e "${NC}"

# –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ CLI
parse_args "$@"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ root
if [ "$EUID" -ne 0 ]; then
    error "–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω —Å –ø—Ä–∞–≤–∞–º–∏ root (sudo)"
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: sudo bash install.sh"
    exit 1
fi

# –§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
choose_installation_type() {
    echo ""
    info "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É—Å—Ç–∞–Ω–æ–≤–∫–∏:"
    echo ""
    echo "1) üê≥ Docker (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)"
    echo "   - –ü—Ä–æ—Å—Ç–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"
    echo "   - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ"
    echo "   - –ò–∑–æ–ª—è—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤"
    echo ""
    echo "2) ‚öôÔ∏è  systemd (–ø—Ä—è–º–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞)"
    echo "   - –ü—Ä—è–º–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞ —Å–∏—Å—Ç–µ–º—É"
    echo "   - –ë–æ–ª—å—à–µ –∫–æ–Ω—Ç—Ä–æ–ª—è"
    echo "   - –ú–µ–Ω—å—à–µ —Ä–µ—Å—É—Ä—Å–æ–≤"
    echo ""
    echo "3) üîß –¢–æ–ª—å–∫–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è"
    echo "   - –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"
    echo "   - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã"
    echo "   - –ë–µ–∑ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞"
    echo ""

    if [ "$NON_INTERACTIVE" = "true" ] && [ -n "${INSTALLATION_TYPE:-}" ]; then
        success "–í—ã–±—Ä–∞–Ω —Ç–∏–ø —É—Å—Ç–∞–Ω–æ–≤–∫–∏: $INSTALLATION_TYPE (–∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤)"
        return
    fi

    while true; do
        read -p "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞ (1-3): " choice
        case $choice in
            1)
                INSTALLATION_TYPE="docker"
                success "–í—ã–±—Ä–∞–Ω Docker –≤–∞—Ä–∏–∞–Ω—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏"
                break
                ;;
            2)
                INSTALLATION_TYPE="systemd"
                success "–í—ã–±—Ä–∞–Ω systemd –≤–∞—Ä–∏–∞–Ω—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏"
                break
                ;;
            3)
                INSTALLATION_TYPE="env"
                success "–í—ã–±—Ä–∞–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–æ–ª—å–∫–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"
                break
                ;;
            *)
                error "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í–≤–µ–¥–∏—Ç–µ 1, 2 –∏–ª–∏ 3"
                ;;
        esac
    done
}

# –í—ã–±–æ—Ä –ø—Ä–æ—Ñ–∏–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ (prod/user)
choose_profile() {
    echo ""
    info "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —É—Å—Ç–∞–Ω–æ–≤–∫–∏:"
    echo ""
    echo "1) üè≠ prod (–≤ /opt,/etc,/var/log; –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${APP_NAME})"
    echo "2) üë§ user (–≤ –¥–æ–º–∞—à–Ω–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: ~/bots/Flame_Of_Styx_bot)"
    echo ""
    if [ "$NON_INTERACTIVE" = "true" ] && [ -n "${PROFILE:-}" ]; then
        success "–í—ã–±—Ä–∞–Ω –ø—Ä–æ—Ñ–∏–ª—å: $PROFILE (–∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤)"
        resolve_paths_by_profile
        return
    fi

    while true; do
        read -p "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞ (1-2): " pchoice
        case $pchoice in
            1)
                PROFILE="prod"
                success "–í—ã–±—Ä–∞–Ω –ø—Ä–æ—Ñ–∏–ª—å: prod"
                break
                ;;
            2)
                PROFILE="user"
                success "–í—ã–±—Ä–∞–Ω –ø—Ä–æ—Ñ–∏–ª—å: user"
                break
                ;;
            *)
                error "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í–≤–µ–¥–∏—Ç–µ 1 –∏–ª–∏ 2"
                ;;
        esac
    done
    resolve_paths_by_profile
}

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env
load_existing_env() {
    if [ -f ".env" ]; then
        log "–ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env..."
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
        while IFS='=' read -r key value; do
            # –£–±–∏—Ä–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            if [[ ! "$key" =~ ^[[:space:]]*# ]] && [[ -n "$key" ]]; then
                # –£–±–∏—Ä–∞–µ–º –∫–∞–≤—ã—á–∫–∏ –∏–∑ –∑–Ω–∞—á–µ–Ω–∏—è
                value=$(echo "$value" | sed 's/^"//;s/"$//')
                export "$key"="$value"
                log "–ó–∞–≥—Ä—É–∂–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è: $key"
            fi
        done < .env
    fi
}

# –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –∫–∞–Ω–∞–ª–∞
get_channel_comment_group() {
    local channel_link="$1"
    local bot_token="$2"
    
    if [ -z "$bot_token" ] || [ -z "$channel_link" ]; then
        return 1
    fi
    
    # –û—á–∏—â–∞–µ–º —Å—Å—ã–ª–∫—É –æ—Ç @ –∏ https://
    local channel_username=$(echo "$channel_link" | sed 's|https://t.me/||g' | sed 's|@||g' | sed 's|^t.me/||g')
    
    # –õ–æ–≥–∏—Ä—É–µ–º –≤ stderr, —á—Ç–æ–±—ã –Ω–µ –ø–æ–ø–∞–ª–æ –≤ stdout
    log "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –∫–∞–Ω–∞–ª–∞: $channel_username" >&2
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ —á–µ—Ä–µ–∑ Telegram Bot API
    local response=$(curl -s "https://api.telegram.org/bot${bot_token}/getChat?chat_id=@${channel_username}")
    
    if echo "$response" | grep -q '"ok":true'; then
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∫–∞–Ω–∞–ª–∞ –±–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ (—Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)
        local channel_id=$(echo "$response" | grep -o '"id":[^,}]*' | head -1 | cut -d':' -f2 | tr -d ' "')
        
        if [ -n "$channel_id" ] && [ "$channel_id" != "null" ]; then
            log "ID –∫–∞–Ω–∞–ª–∞ $channel_username: $channel_id" >&2
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–≤—è–∑–∞–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
            if echo "$response" | grep -q '"linked_chat"'; then
                local linked_chat_id=$(echo "$response" | grep -o '"linked_chat":[^,}]*' | head -1 | cut -d':' -f2 | tr -d ' "')
                if [ -n "$linked_chat_id" ] && [ "$linked_chat_id" != "null" ]; then
                    log "–ù–∞–π–¥–µ–Ω–∞ –≥—Ä—É–ø–ø–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: $linked_chat_id –¥–ª—è –∫–∞–Ω–∞–ª–∞ $channel_username" >&2
                    echo "$linked_chat_id"
                    return 0
                fi
            fi
            
            log "–ì—Ä—É–ø–ø–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞ $channel_username, –∏—Å–ø–æ–ª—å–∑—É–µ–º ID –∫–∞–Ω–∞–ª–∞" >&2
            echo "$channel_id"
            return 0
        else
            log "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID –∫–∞–Ω–∞–ª–∞ $channel_username" >&2
            return 1
        fi
    else
        log "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ $channel_username" >&2
        log "–û—Ç–≤–µ—Ç API: $response" >&2
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–Ω–∞–ª–æ–≤ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
process_channels() {
    if [ -n "${CHANNEL_LINKS:-}" ]; then
        log "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–Ω–∞–ª–æ–≤: $CHANNEL_LINKS"
        
        local channel_ids=""
        IFS=',' read -ra CHANNELS <<< "$CHANNEL_LINKS"
        
        for channel in "${CHANNELS[@]}"; do
            # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
            channel=$(echo "$channel" | xargs)
            
            if [ -n "$channel" ]; then
                log "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–Ω–∞–ª–∞: $channel"
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º ID –∫–∞–Ω–∞–ª–∞ –∏ –≥—Ä—É–ø–ø—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
                local channel_info
                channel_info=$(get_channel_comment_group "$channel" "$BOT_TOKEN" 2>/dev/null)
                local result_code=$?
                
                # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
                channel_info=$(echo "$channel_info" | tr -d '\n\r' | xargs)
                
                log "–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∫–∞–Ω–∞–ª–∞ $channel: –∫–æ–¥=$result_code, ID='$channel_info'"
                
                if [ $result_code -eq 0 ] && [ -n "$channel_info" ]; then
                    if [ -n "$channel_ids" ]; then
                        channel_ids="${channel_ids},${channel_info}"
                    else
                        channel_ids="$channel_info"
                    fi
                    success "–ö–∞–Ω–∞–ª $channel -> ID: $channel_info"
                else
                    warning "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –¥–ª—è –∫–∞–Ω–∞–ª–∞: $channel"
                fi
            fi
        done
        
        if [ -n "$channel_ids" ]; then
            # –û–±–Ω–æ–≤–ª—è–µ–º NATIVE_CHANNEL_IDS
            update_env_key "NATIVE_CHANNEL_IDS" "$channel_ids"
            success "–û–±–Ω–æ–≤–ª–µ–Ω—ã NATIVE_CHANNEL_IDS: $channel_ids"
        fi
    fi
}

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
get_configuration() {
    echo ""
    info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:"
    echo ""

    # –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    load_existing_env

    # –î–æ–º–µ–Ω
    if [ -n "${DOMAIN:-}" ]; then
        success "–î–æ–º–µ–Ω: $DOMAIN (–∏–∑ .env)"
    elif [ "$NON_INTERACTIVE" = "true" ]; then
        success "–î–æ–º–µ–Ω: $DOMAIN (–∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤)"
    else
        while true; do
            read -p "–í–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä: bot.example.com): " DOMAIN
            if [ -n "$DOMAIN" ] && [[ "$DOMAIN" =~ ^[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$ ]]; then
                success "–î–æ–º–µ–Ω: $DOMAIN"
                break
            else
                error "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–æ–º–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            fi
        done
    fi

    # Email
    if [ -n "${EMAIL:-}" ]; then
        success "Email: $EMAIL (–∏–∑ .env)"
    elif [ "$NON_INTERACTIVE" = "true" ]; then
        success "Email: $EMAIL (–∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤)"
    else
        while true; do
            read -p "–í–≤–µ–¥–∏—Ç–µ email –¥–ª—è Let's Encrypt: " EMAIL
            if [ -n "$EMAIL" ] && [[ "$EMAIL" =~ ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$ ]]; then
                success "Email: $EMAIL"
                break
            else
                error "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            fi
        done
    fi

    # Bot Token
    if [ -n "${BOT_TOKEN:-}" ]; then
        success "Bot Token: ${BOT_TOKEN:0:10}... (–∏–∑ .env)"
    elif [ "$NON_INTERACTIVE" = "true" ]; then
        success "Bot Token: ${BOT_TOKEN:0:10}... (–∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤)"
    else
        while true; do
            read -p "–í–≤–µ–¥–∏—Ç–µ Telegram Bot Token: " BOT_TOKEN
            if [ -n "$BOT_TOKEN" ] && [[ "$BOT_TOKEN" =~ ^[0-9]+:[a-zA-Z0-9_-]+$ ]]; then
                success "Bot Token: ${BOT_TOKEN:0:10}..."
                break
            else
                error "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Bot Token. –§–æ—Ä–º–∞—Ç: 123456789:ABCdefGHIjklMNOpqrsTUVwxyz"
            fi
        done
    fi

    # Admin IDs
    if [ -n "${ADMIN_IDS:-}" ]; then
        success "Admin IDs: $ADMIN_IDS (–∏–∑ .env)"
    elif [ "$NON_INTERACTIVE" = "true" ]; then
        success "Admin IDs: $ADMIN_IDS (–∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤)"
    else
        read -p "–í–≤–µ–¥–∏—Ç–µ Admin IDs —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 123456789,987654321): " ADMIN_IDS
        if [ -z "$ADMIN_IDS" ]; then
            ADMIN_IDS="123456789"
            warning "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Admin ID –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: $ADMIN_IDS"
        fi
        success "Admin IDs: $ADMIN_IDS"
    fi

    # –ö–∞–Ω–∞–ª—ã –±–æ—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    if [ -z "${CHANNEL_LINKS:-}" ]; then
        read -p "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫–∏/—é–∑–µ—Ä–Ω–µ–π–º—ã –∫–∞–Ω–∞–ª–æ–≤ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ): " CHANNEL_LINKS
    else
        success "–ö–∞–Ω–∞–ª—ã: $CHANNEL_LINKS (–∏–∑ .env)"
    fi

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    echo ""
    info "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:"

    if [ -z "${REDIS_PASSWORD:-}" ]; then
        read -p "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è Redis (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: random): " REDIS_PASSWORD
        if [ -z "$REDIS_PASSWORD" ]; then
            REDIS_PASSWORD=$(openssl rand -base64 32)
            success "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Å–ª—É—á–∞–π–Ω—ã–π –ø–∞—Ä–æ–ª—å Redis"
        fi
    else
        success "Redis –ø–∞—Ä–æ–ª—å: ${REDIS_PASSWORD:0:10}... (–∏–∑ .env)"
    fi

    if [ -z "${NOTIFICATION_WEBHOOK:-}" ]; then
        read -p "–í–≤–µ–¥–∏—Ç–µ webhook –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ): " NOTIFICATION_WEBHOOK
        if [ -n "$NOTIFICATION_WEBHOOK" ]; then
            success "Webhook: $NOTIFICATION_WEBHOOK"
        else
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É —á–µ—Ä–µ–∑ Telegram Bot API
            ADMIN_FIRST_ID=$(echo "$ADMIN_IDS" | cut -d',' -f1 | xargs)
            NOTIFICATION_WEBHOOK="https://api.telegram.org/bot${BOT_TOKEN}/sendMessage?chat_id=${ADMIN_FIRST_ID}&parse_mode=HTML"
            success "Webhook (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é Telegram –∞–¥–º–∏–Ω—É ${ADMIN_FIRST_ID})"
        fi
    else
        success "Webhook: ${NOTIFICATION_WEBHOOK:0:50}... (–∏–∑ .env)"
    fi

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    process_channels

    # –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ .env —Ñ–∞–π–ª–∞
    create_local_env
}

# –£—Ç–∏–ª–∏—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∑–∞–ø–∏—Å–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ .env (–Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –Ω–µ–ø—É—Å—Ç—ã–µ)
set_env_default() {
    local key="$1"
    local value="$2"
    local interactive="${3:-false}"

    [ -f .env ] || {
        echo "# Auto-generated by install.sh" > .env
    }

    if grep -qE "^${key}=" .env; then
        local current
        current=$(grep -E "^${key}=" .env | sed -E "s/^${key}=//")
        if [ -z "$current" ]; then
            sed -i "s|^${key}=.*$|${key}=${value}|" .env
        elif [ "$interactive" = "true" ] && [ "$NON_INTERACTIVE" != "true" ]; then
            # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º —Å —Ç–∞–π–º–µ—Ä–æ–º
            echo -e "${YELLOW}–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è $key —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: $current${NC}"
            echo -e "${CYAN}–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: $value${NC}"
            echo -e "${YELLOW}–ó–∞–º–µ–Ω–∏—Ç—å? (y/N) [—Ç–∞–π–º–µ—Ä 5 —Å–µ–∫]:${NC} "
            
            # –¢–∞–π–º–µ—Ä 5 —Å–µ–∫—É–Ω–¥
            if read -t 5 -n 1 response; then
                echo ""
                if [[ "$response" =~ ^[Yy]$ ]]; then
                    log "–û–±–Ω–æ–≤–ª—è–µ–º $key: $current -> $value"
                    sed -i "s|^${key}=.*$|${key}=${value}|" .env
                else
                    log "–û—Å—Ç–∞–≤–ª—è–µ–º $key: $current"
                fi
            else
                echo ""
                log "–¢–∞–π–º–µ—Ä –∏—Å—Ç–µ–∫, –æ—Å—Ç–∞–≤–ª—è–µ–º $key: $current"
            fi
        else
            # –ù–µ–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º - –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            log "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è $key —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: $current (–æ—Å—Ç–∞–≤–ª—è–µ–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)"
        fi
    else
        echo "${key}=${value}" >> .env
    fi
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ .env
check_existing_env() {
    if [ -f ".env" ]; then
        log "–û–±–Ω–∞—Ä—É–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π .env —Ñ–∞–π–ª"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≤–∞–∂–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        local important_vars=("BOT_TOKEN" "ADMIN_IDS" "DOMAIN" "EMAIL" "NOTIFICATION_WEBHOOK")
        local found_vars=()
        
        for var in "${important_vars[@]}"; do
            if grep -qE "^${var}=" .env; then
                local value=$(grep -E "^${var}=" .env | sed -E "s/^${var}=//")
                if [ -n "$value" ] && [ "$value" != "" ]; then
                    found_vars+=("$var")
                    if [ "$var" = "BOT_TOKEN" ]; then
                        echo -e "  ${GREEN}‚úÖ $var: ${value:0:10}...${NC}"
                    else
                        echo -e "  ${GREEN}‚úÖ $var: $value${NC}"
                    fi
                fi
            fi
        done
        
        if [ ${#found_vars[@]} -gt 0 ]; then
            echo -e "${YELLOW}–ù–∞–π–¥–µ–Ω–æ ${#found_vars[@]} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö${NC}"
            echo -e "${CYAN}–ü—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è${NC}"
        fi
    else
        log "–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω, –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π"
    fi
}

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ .env —Ñ–∞–π–ª–∞
create_local_env() {
    log "–°–æ–∑–¥–∞–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ .env —Ñ–∞–π–ª–∞..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    check_existing_env

    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ)
    set_env_default "BOT_TOKEN" "$BOT_TOKEN" "true"
    set_env_default "ADMIN_IDS" "$ADMIN_IDS" "true"

    # –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –±–∞–∑–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–Ω–µ–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ)
    set_env_default "NATIVE_CHANNEL_IDS" "-10000000000"
    set_env_default "DB_PATH" "db.sqlite3"
    set_env_default "LOG_LEVEL" "INFO"
    set_env_default "RATE_LIMIT" "5"
    set_env_default "RATE_INTERVAL" "60"
    set_env_default "RATE_LIMIT_MESSAGE" "\xE2\x8F\xB3 –°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ –ø–∏—à–µ—à—å, –ø—Ä–∏—Ç–æ—Ä–º–æ–∑–∏."

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ (–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ)
    set_env_default "DOMAIN" "$DOMAIN" "true"
    set_env_default "EMAIL" "$EMAIL" "true"
    set_env_default "REDIS_PASSWORD" "$REDIS_PASSWORD" "true"
    set_env_default "NOTIFICATION_WEBHOOK" "$NOTIFICATION_WEBHOOK" "true"

    success "–õ–æ–∫–∞–ª—å–Ω—ã–π .env –æ–±–Ω–æ–≤–ª—ë–Ω (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã)"
}

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ/—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è –∫–ª—é—á–∞ –≤ .env (–±–µ–∑—É—Å–ª–æ–≤–Ω–æ)
update_env_key() {
    local key="$1"
    local value="$2"
    [ -f .env ] || echo "# Auto-generated by install.sh" > .env
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∑–∞–º–µ–Ω—ã
    local temp_file=$(mktemp)
    
    if grep -qE "^${key}=" .env; then
        # –ó–∞–º–µ–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä–æ–∫—É
        grep -v "^${key}=" .env > "$temp_file"
        echo "${key}=${value}" >> "$temp_file"
        mv "$temp_file" .env
    else
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
        echo "${key}=${value}" >> .env
    fi
}

# –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ –≤ ID –ø–æ Bot API
resolve_native_channels() {
    [ -z "${CHANNEL_LINKS:-}" ] && return 0

    local IFS=','
    local ids=()
    for raw in $CHANNEL_LINKS; do
        local t=$(echo "$raw" | xargs)
        [ -z "$t" ] && continue
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º
        if echo "$t" | grep -qE '^https?://t\.me/'; then
            t=$(echo "$t" | sed -E 's#^https?://t\.me/##; s#/$##')
        fi
        if echo "$t" | grep -qE '^@'; then
            t=${t#@}
        fi

        if echo "$t" | grep -qE '^-?100[0-9]+'; then
            ids+=("$t")
        else
            # –†–∞–∑—Ä–µ—à–∞–µ–º @username —á–µ—Ä–µ–∑ getChat
            local resp
            resp=$(curl -s --max-time 10 "https://api.telegram.org/bot${BOT_TOKEN}/getChat?chat_id=@${t}" || true)
            local cid
            cid=$(echo "$resp" | grep -oE '"id"[[:space:]]*:[[:space:]]*-?[0-9]+' | head -1 | grep -oE '-?[0-9]+' || true)
            if [ -n "$cid" ]; then
                ids+=("$cid")
                success "–ö–∞–Ω–∞–ª @${t} -> ${cid}"
            else
                warning "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –∫–∞–Ω–∞–ª–∞: ${t}. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∏–ª–∏ —É–∫–∞–∑–∞–Ω –ø—É–±–ª–∏—á–Ω—ã–π @username."
            fi
        fi
    done

    if [ ${#ids[@]} -gt 0 ]; then
        local joined
        joined=$(IFS=','; echo "${ids[*]}")
        update_env_key "NATIVE_CHANNEL_IDS" "$joined"
        success "NATIVE_CHANNEL_IDS –æ–±–Ω–æ–≤–ª—ë–Ω: $joined"
    fi
}

# –§—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
install_dependencies() {
    log "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤
    apt-get update -y

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–∑–æ–≤—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
    apt-get install -y \
        curl \
        wget \
        git \
        unzip \
        software-properties-common \
        apt-transport-https \
        ca-certificates \
        gnupg \
        lsb-release \
        htop \
        nano \
        vim \
        ufw \
        fail2ban \
        logrotate \
        cron \
        openssl \
        dnsutils \
        net-tools

    success "–°–∏—Å—Ç–µ–º–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –§—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Docker
install_docker() {
    log "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker..."

    # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π
    apt-get remove -y docker docker-engine docker.io containerd runc 2>/dev/null || true

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null

    apt-get update -y
    apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin

    # –ó–∞–ø—É—Å–∫ Docker
    systemctl enable docker
    systemctl start docker

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É docker
    usermod -aG docker $SUDO_USER

    success "Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –∑–∞–ø—É—â–µ–Ω"
}

# –§—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Python –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
install_python() {
    log "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python
    apt-get install -y python3 python3-pip python3-venv python3-dev

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
    apt-get install -y \
        build-essential \
        libssl-dev \
        libffi-dev \
        libxml2-dev \
        libxslt1-dev \
        zlib1g-dev \
        libjpeg-dev \
        libpng-dev \
        libfreetype6-dev \
        python3-cffi \
        python3-cryptography

    success "Python –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –§—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã
setup_system() {
    log "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã..."

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–π—Ä–≤–æ–ª–∞
    ufw --force reset
    ufw default deny incoming
    ufw default allow outgoing
    ufw allow ssh
    ufw allow ${SSH_PORT}/tcp
    ufw allow 80/tcp
    ufw allow 443/tcp
    ufw --force enable

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ fail2ban
    cat > /etc/fail2ban/jail.local << EOF
[DEFAULT]
bantime = 3600
findtime = 600
maxretry = 3

[sshd]
enabled = true
port = ssh
logpath = /var/log/auth.log
maxretry = 3

[sshd-custom]
enabled = true
port = ${SSH_PORT}
logpath = /var/log/auth.log
maxretry = 3
EOF

    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ fail2ban —Å Python 3.11+
    fix_fail2ban_python3_compatibility
    
    systemctl enable fail2ban
    systemctl start fail2ban

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ logrotate
    cat > /etc/logrotate.d/antispam-bot << EOF
${LOG_DIR}/*.log {
    daily
    missingok
    rotate 30
    compress
    delaycompress
    notifempty
    create 644 ${APP_NAME} ${APP_NAME}
    postrotate
        systemctl reload antispam-bot 2>/dev/null || true
    endscript
}
EOF

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å/–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø–æ –ø—Ä–æ—Ñ–∏–ª—é
    if [ "$PROFILE" = "prod" ]; then
        if ! id "$APP_NAME" &>/dev/null; then
            useradd -r -s /bin/bash -d "/opt/$APP_NAME" -m "$APP_NAME"
            success "–°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $APP_NAME"
        fi
    fi

    mkdir -p "$BASE_DIR" "$LOG_DIR" "$CONFIG_DIR"

    if [ "$PROFILE" = "prod" ]; then
        chown -R "$APP_NAME:$APP_NAME" "$BASE_DIR" "$LOG_DIR" "$CONFIG_DIR"
    else
        current_user=${SUDO_USER:-$(whoami)}
        chown -R "$current_user:$current_user" "$BASE_DIR" "$LOG_DIR" "$CONFIG_DIR"
    fi

    success "–°–∏—Å—Ç–µ–º–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞"
}

# –§—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —á–µ—Ä–µ–∑ Docker
install_docker_version() {
    log "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ—Ä–µ–∑ Docker..."

    detect_compose

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    cat > "${BASE_DIR}/.env.prod" << EOF
# Production Environment Variables
DOMAIN=$DOMAIN
EMAIL=$EMAIL
BOT_TOKEN=$BOT_TOKEN
ADMIN_IDS=$ADMIN_IDS
DB_PATH=db.sqlite3
REDIS_PASSWORD=$REDIS_PASSWORD
NOTIFICATION_WEBHOOK=$NOTIFICATION_WEBHOOK
RENEWAL_THRESHOLD=30
EOF

    # –°–æ–∑–¥–∞–Ω–∏–µ docker-compose.prod.yml
    cp docker-compose.prod.yml "${BASE_DIR}/"

    # –°–æ–∑–¥–∞–Ω–∏–µ systemd —Å–µ—Ä–≤–∏—Å–∞
    cat > /etc/systemd/system/antispam-bot-docker.service << EOF
[Unit]
Description=AntiSpam Bot Docker Service
Requires=docker.service
After=docker.service

[Service]
Type=oneshot
RemainAfterExit=yes
WorkingDirectory=${BASE_DIR}
ExecStart=/usr/bin/env ${COMPOSE_CMD} -f docker-compose.prod.yml up -d
ExecStop=/usr/bin/env ${COMPOSE_CMD} -f docker-compose.prod.yml down
TimeoutStartSec=0
User=${RUN_USER}
Group=${RUN_USER}

[Install]
WantedBy=multi-user.target
EOF

    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    cat > "${BASE_DIR}/update.sh" << 'EOF'
#!/bin/bash
cd "$(dirname "$0")"
git pull origin main
${COMPOSE_CMD} -f docker-compose.prod.yml pull
${COMPOSE_CMD} -f docker-compose.prod.yml up -d --build
EOF

    chmod +x "${BASE_DIR}/update.sh"

    # –°–æ–∑–¥–∞–Ω–∏–µ cron –∑–∞–¥–∞—á–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    echo "0 3 * * * ${BASE_DIR}/update.sh >> ${LOG_DIR}/update.log 2>&1" | crontab -u ${RUN_USER} -

    success "Docker –≤–µ—Ä—Å–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
}

# –§—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —á–µ—Ä–µ–∑ systemd
install_systemd_version() {
    log "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ—Ä–µ–∑ systemd..."

    # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ (–∏—Å–∫–ª—é—á–∞—è —Ü–µ–ª–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é)
    if [ "$(pwd)" != "${BASE_DIR}" ]; then
        cp -r . "${BASE_DIR}/"
        chown -R ${RUN_USER}:${RUN_USER} "${BASE_DIR}"
    else
        warning "–£–∂–µ –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ —Ü–µ–ª–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ${BASE_DIR}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ"
        chown -R ${RUN_USER}:${RUN_USER} "${BASE_DIR}"
    fi

    # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    sudo -u ${RUN_USER} python3 -m venv --upgrade-deps "${BASE_DIR}/venv"
    chown -R ${RUN_USER}:${RUN_USER} "${BASE_DIR}/venv" || true
    sudo -u ${RUN_USER} "${BASE_DIR}/venv/bin/pip" install -r "${BASE_DIR}/requirements.txt"

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    cat > "${CONFIG_DIR}/.env" << EOF
BOT_TOKEN=$BOT_TOKEN
ADMIN_IDS=$ADMIN_IDS
DB_PATH=${BASE_DIR}/db.sqlite3
REDIS_PASSWORD=$REDIS_PASSWORD
NOTIFICATION_WEBHOOK=$NOTIFICATION_WEBHOOK
EOF

    # –°–æ–∑–¥–∞–Ω–∏–µ systemd —Å–µ—Ä–≤–∏—Å–∞
    cat > /etc/systemd/system/antispam-bot.service << EOF
[Unit]
Description=AntiSpam Bot Service
After=network.target

[Service]
Type=simple
User=${RUN_USER}
Group=${RUN_USER}
WorkingDirectory=${BASE_DIR}
Environment=PATH=${BASE_DIR}/venv/bin
EnvironmentFile=${CONFIG_DIR}/.env
ExecStart=${BASE_DIR}/venv/bin/python bot.py
Restart=always
RestartSec=10
StandardOutput=journal
StandardError=journal
SyslogIdentifier=antispam-bot

[Install]
WantedBy=multi-user.target
EOF

    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    cat > "${BASE_DIR}/update.sh" << 'EOF'
#!/bin/bash
cd "$(dirname "$0")"
git pull origin main
"$(pwd)"/venv/bin/pip install -r requirements.txt
systemctl restart antispam-bot
EOF

    chmod +x "${BASE_DIR}/update.sh"

    # –°–æ–∑–¥–∞–Ω–∏–µ cron –∑–∞–¥–∞—á–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    echo "0 3 * * * ${BASE_DIR}/update.sh >> ${LOG_DIR}/update.log 2>&1" | crontab -u ${RUN_USER} -

    success "systemd –≤–µ—Ä—Å–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
}

# –§—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Let's Encrypt
setup_letsencrypt() {
    if [ "$INSTALLATION_TYPE" = "docker" ]; then
        log "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Let's Encrypt –¥–ª—è Docker..."

        # –ó–∞–ø—É—Å–∫ nginx –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
        cd ${BASE_DIR}
        ${COMPOSE_CMD} -f docker-compose.prod.yml up -d nginx

        # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ nginx
        sleep 10

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
        ${COMPOSE_CMD} -f docker-compose.prod.yml run --rm certbot /scripts/certbot-init.sh

        # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        ${COMPOSE_CMD} -f docker-compose.prod.yml up -d

    elif [ "$INSTALLATION_TYPE" = "systemd" ]; then
        log "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Let's Encrypt –¥–ª—è systemd..."

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if [ ! -f "${BASE_DIR}/venv/bin/activate" ]; then
            error "–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ ${BASE_DIR}/venv"
            return 1
        fi

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ certbot –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –±–æ—Ç–∞
        sudo -u ${RUN_USER} "${BASE_DIR}/venv/bin/pip" install --upgrade pip
        sudo -u ${RUN_USER} "${BASE_DIR}/venv/bin/pip" install certbot certbot-nginx
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–æ–π —Å—Å—ã–ª–∫–∏ –¥–ª—è certbot –∏–∑ venv
        ln -sf "${BASE_DIR}/venv/bin/certbot" /usr/bin/certbot

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤)
        if [[ "$DOMAIN" != "localhost" && "$DOMAIN" != "127.0.0.1" ]]; then
            log "–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –¥–ª—è $DOMAIN..."
            if certbot certonly --webroot -w /var/www/html -d $DOMAIN --email $EMAIL --agree-tos --non-interactive; then
                success "SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø–æ–ª—É—á–µ–Ω –¥–ª—è $DOMAIN"
            else
                warning "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–ª—è $DOMAIN, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ SSL"
            fi
        else
            warning "–ü—Ä–æ–ø—É—Å–∫–∞–µ–º SSL –¥–ª—è localhost/127.0.0.1"
        fi

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ nginx
        apt-get install -y nginx
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
        if [ -f "/etc/letsencrypt/live/$DOMAIN/fullchain.pem" ]; then
            # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å SSL
            cat > /etc/nginx/sites-available/antispam-bot << EOF
server {
    listen 80;
    server_name $DOMAIN;

    location /.well-known/acme-challenge/ {
        root /var/www/html;
    }

    location / {
        return 301 https://\$server_name\$request_uri;
    }
}

server {
    listen 443 ssl http2;
    server_name $DOMAIN;

    ssl_certificate /etc/letsencrypt/live/$DOMAIN/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/$DOMAIN/privkey.pem;

    location / {
        proxy_pass http://127.0.0.1:8000;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
    }
}
EOF
        else
            # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–µ–∑ SSL
            cat > /etc/nginx/sites-available/antispam-bot << EOF
server {
    listen 80;
    server_name $DOMAIN;

    location / {
        proxy_pass http://127.0.0.1:8000;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
    }
}
EOF
        fi

        ln -sf /etc/nginx/sites-available/antispam-bot /etc/nginx/sites-enabled/
        rm -f /etc/nginx/sites-enabled/default
        nginx -t && systemctl reload nginx

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å SSL)
        if [ -f "/etc/letsencrypt/live/$DOMAIN/fullchain.pem" ]; then
            echo "0 2 * * * certbot renew --quiet && systemctl reload nginx" | crontab -
        fi
    fi

    success "Let's Encrypt –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
}

# –§—É–Ω–∫—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ fail2ban —Å Python 3.11+
fix_fail2ban_python3_compatibility() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ fail2ban —Å Python..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é Python
    local python_version=$(python3 -c "import sys; print(f'{sys.version_info.major}.{sys.version_info.minor}')")
    log "–í–µ—Ä—Å–∏—è Python: $python_version"
    
    # –ï—Å–ª–∏ Python 3.11+, —Å–æ–∑–¥–∞–µ–º –ø–∞—Ç—á
    if [[ "$python_version" == "3.11" || "$python_version" == "3.12" || "$python_version" == "3.13" ]]; then
        log "Python $python_version –æ–±–Ω–∞—Ä—É–∂–µ–Ω, —Å–æ–∑–¥–∞–µ–º –ø–∞—Ç—á –¥–ª—è fail2ban..."
        
        # –°–æ–∑–¥–∞–µ–º wrapper —Å–∫—Ä–∏–ø—Ç –¥–ª—è fail2ban
        cat > /usr/local/bin/fail2ban-server << 'EOF'
#!/usr/bin/env python3
# Wrapper –¥–ª—è fail2ban —Å –ø–∞—Ç—á–µ–º –¥–ª—è Python 3.11+
import sys
import os
sys.path.insert(0, '/usr/lib/python3/dist-packages')

# –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ç—á –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
try:
    from collections import MutableMapping
except ImportError:
    # –í Python 3.11+ MutableMapping –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ collections.abc
    import collections
    import collections.abc
    collections.MutableMapping = collections.abc.MutableMapping

# –ó–∞–ø—É—Å–∫–∞–µ–º fail2ban
from fail2ban.server import main
if __name__ == '__main__':
    main()
EOF
        
        chmod +x /usr/local/bin/fail2ban-server
        
        # –°–æ–∑–¥–∞–µ–º systemd override
        mkdir -p /etc/systemd/system/fail2ban.service.d
        cat > /etc/systemd/system/fail2ban.service.d/override.conf << 'EOF'
[Service]
ExecStart=
ExecStart=/usr/local/bin/fail2ban-server -xf start
EOF
        
        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º systemd
        systemctl daemon-reload
        
        success "–ü–∞—Ç—á –¥–ª—è fail2ban —Å–æ–∑–¥–∞–Ω –¥–ª—è Python $python_version"
    else
        log "Python $python_version –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –ø–∞—Ç—á–∞ –¥–ª—è fail2ban"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞
health_check() {
    local service_name="$1"
    local max_attempts=30
    local attempt=1
    
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞ $service_name..."
    
    while [ $attempt -le $max_attempts ]; do
        if systemctl is-active --quiet "$service_name"; then
            success "–°–µ—Ä–≤–∏—Å $service_name –∞–∫—Ç–∏–≤–µ–Ω"
            return 0
        fi
        
        if [ $attempt -eq 1 ]; then
            log "–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ $service_name... (–ø–æ–ø—ã—Ç–∫–∞ $attempt/$max_attempts)"
        else
            echo -n "."
        fi
        
        sleep 2
        attempt=$((attempt + 1))
    done
    
    error "–°–µ—Ä–≤–∏—Å $service_name –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –∑–∞ $((max_attempts * 2)) —Å–µ–∫—É–Ω–¥"
    systemctl status "$service_name" --no-pager
    return 1
}

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
send_test_notification() {
    if [ -n "${NOTIFICATION_WEBHOOK:-}" ] && [[ "$NOTIFICATION_WEBHOOK" =~ https://api.telegram.org ]]; then
        log "–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram..."
        
        local message="ü§ñ <b>AntiSpam Bot —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!</b>%0A%0A"
        message+="üìã <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç–∞–Ω–æ–≤–∫–µ:</b>%0A"
        message+="‚Ä¢ –ü—Ä–æ—Ñ–∏–ª—å: <code>$PROFILE</code>%0A"
        message+="‚Ä¢ –¢–∏–ø: <code>$INSTALLATION_TYPE</code>%0A"
        message+="‚Ä¢ –î–æ–º–µ–Ω: <code>$DOMAIN</code>%0A"
        message+="‚Ä¢ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: <code>$BASE_DIR</code>%0A"
        message+="‚Ä¢ SSH –ø–æ—Ä—Ç: <code>$SSH_PORT</code>%0A%0A"
        message+="‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!"
        
        local url="${NOTIFICATION_WEBHOOK}&text=${message}"
        
        if curl -s --max-time 10 "$url" >/dev/null 2>&1; then
            success "–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram"
        else
            warning "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram"
        fi
    fi
}

# –§—É–Ω–∫—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
finalize_installation() {
    log "–§–∏–Ω–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞..."

    # –í–∫–ª—é—á–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤
    if [ "$INSTALLATION_TYPE" = "docker" ]; then
        systemctl enable antispam-bot-docker
        systemctl start antispam-bot-docker
        health_check "antispam-bot-docker"
    elif [ "$INSTALLATION_TYPE" = "systemd" ]; then
        systemctl enable antispam-bot
        systemctl start antispam-bot
        health_check "antispam-bot"
    fi

    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    cat > /usr/local/bin/antispam-bot << 'EOF'
#!/bin/bash
case "$1" in
    start)
        systemctl start antispam-bot-docker 2>/dev/null || systemctl start antispam-bot
        ;;
    stop)
        systemctl stop antispam-bot-docker 2>/dev/null || systemctl stop antispam-bot
        ;;
    restart)
        systemctl restart antispam-bot-docker 2>/dev/null || systemctl restart antispam-bot
        ;;
    status)
        systemctl status antispam-bot-docker 2>/dev/null || systemctl status antispam-bot
        ;;
    logs)
        journalctl -u antispam-bot-docker -f 2>/dev/null || journalctl -u antispam-bot -f
        ;;
    update)
        /opt/antispam-bot/update.sh
        ;;
    *)
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 {start|stop|restart|status|logs|update}"
        exit 1
        ;;
esac
EOF

    chmod +x /usr/local/bin/antispam-bot

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
    send_test_notification

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–∞
    if [ "$INSTALLATION_TYPE" = "docker" ]; then
        if systemctl is-active --quiet antispam-bot-docker; then
            success "Docker —Å–µ—Ä–≤–∏—Å antispam-bot-docker –∑–∞–ø—É—â–µ–Ω"
        else
            warning "Docker —Å–µ—Ä–≤–∏—Å antispam-bot-docker –Ω–µ –∑–∞–ø—É—â–µ–Ω"
        fi
    elif [ "$INSTALLATION_TYPE" = "systemd" ]; then
        if systemctl is-active --quiet antispam-bot; then
            success "Systemd —Å–µ—Ä–≤–∏—Å antispam-bot –∑–∞–ø—É—â–µ–Ω"
        else
            warning "Systemd —Å–µ—Ä–≤–∏—Å antispam-bot –Ω–µ –∑–∞–ø—É—â–µ–Ω"
        fi
    fi

    success "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
}

# –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
show_final_info() {
    echo ""
    success "üéâ –£–°–¢–ê–ù–û–í–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!"
    echo ""
    echo -e "${GREEN}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
    echo -e "${GREEN}‚ïë                    –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û–ë –£–°–¢–ê–ù–û–í–ö–ï                  ‚ïë${NC}"
    echo -e "${GREEN}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
    echo ""
    echo -e "${CYAN}üåê –î–æ–º–µ–Ω:${NC} $DOMAIN"
    echo -e "${CYAN}üìß Email:${NC} $EMAIL"
    echo -e "${CYAN}ü§ñ Bot Token:${NC} ${BOT_TOKEN:0:10}..."
    echo -e "${CYAN}üëë Admin IDs:${NC} $ADMIN_IDS"
    echo -e "${CYAN}üîß –¢–∏–ø —É—Å—Ç–∞–Ω–æ–≤–∫–∏:${NC} $INSTALLATION_TYPE"
    echo ""
    echo -e "${YELLOW}üìã –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:${NC}"
    echo "  antispam-bot start    - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"
    echo "  antispam-bot stop     - –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"
    echo "  antispam-bot restart  - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"
    echo "  antispam-bot status   - –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞"
    echo "  antispam-bot logs     - –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤"
    echo "  antispam-bot update   - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞"
    echo ""
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
    echo -e "${YELLOW}üîç –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:${NC}"
    if [ "$INSTALLATION_TYPE" = "docker" ]; then
        if systemctl is-active --quiet antispam-bot-docker; then
            echo -e "  ${GREEN}‚úÖ antispam-bot-docker: –∞–∫—Ç–∏–≤–µ–Ω${NC}"
        else
            echo -e "  ${RED}‚ùå antispam-bot-docker: –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω${NC}"
        fi
    elif [ "$INSTALLATION_TYPE" = "systemd" ]; then
        if systemctl is-active --quiet antispam-bot; then
            echo -e "  ${GREEN}‚úÖ antispam-bot: –∞–∫—Ç–∏–≤–µ–Ω${NC}"
        else
            echo -e "  ${RED}‚ùå antispam-bot: –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω${NC}"
        fi
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ UFW –∏ fail2ban
    if systemctl is-active --quiet ufw; then
        echo -e "  ${GREEN}‚úÖ UFW: –∞–∫—Ç–∏–≤–µ–Ω${NC}"
    else
        echo -e "  ${RED}‚ùå UFW: –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω${NC}"
    fi
    
    if systemctl is-active --quiet fail2ban; then
        echo -e "  ${GREEN}‚úÖ fail2ban: –∞–∫—Ç–∏–≤–µ–Ω${NC}"
    else
        echo -e "  ${RED}‚ùå fail2ban: –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω${NC}"
        echo -e "  ${YELLOW}üîß –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ fail2ban...${NC}"
        fix_fail2ban_python3_compatibility
        systemctl restart fail2ban
        if systemctl is-active --quiet fail2ban; then
            echo -e "  ${GREEN}‚úÖ fail2ban: –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –∏ –∑–∞–ø—É—â–µ–Ω${NC}"
        else
            echo -e "  ${RED}‚ùå fail2ban: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å${NC}"
        fi
    fi
    
    echo ""
    echo -e "${YELLOW}üîó –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:${NC}"
    echo "  https://$DOMAIN - –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"
    echo "  $BASE_DIR - –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –±–æ—Ç–∞"
    echo "  $LOG_DIR - –õ–æ–≥–∏ –±–æ—Ç–∞"
    echo "  $CONFIG_DIR - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞"
    echo ""
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏
    if [ -f "${BASE_DIR}/venv/bin/activate" ]; then
        echo -e "${YELLOW}üêç –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ:${NC}"
        echo "  –ê–∫—Ç–∏–≤–∞—Ü–∏—è: source ${BASE_DIR}/venv/bin/activate"
        echo "  Python: ${BASE_DIR}/venv/bin/python"
        echo "  Pip: ${BASE_DIR}/venv/bin/pip"
        echo ""
    fi
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Ç—á–∞—Ö
    if [ -f "/usr/local/bin/fail2ban-server" ]; then
        echo -e "${YELLOW}üîß –ü—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–µ –ø–∞—Ç—á–∏:${NC}"
        echo "  fail2ban: –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å Python 3.11+"
        echo "  Wrapper: /usr/local/bin/fail2ban-server"
        echo ""
    fi
    
    echo -e "${GREEN}‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!${NC}"
    echo ""
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    choose_installation_type
    choose_profile
    get_configuration
    setup_logging
    install_dependencies

    if [ "$INSTALLATION_TYPE" != "env" ]; then
        install_python
        setup_system

        if [ "$INSTALLATION_TYPE" = "docker" ]; then
            install_docker
            install_docker_version
        elif [ "$INSTALLATION_TYPE" = "systemd" ]; then
            install_systemd_version
        fi

        setup_letsencrypt
        finalize_installation
    fi

    show_final_info
}

# –ó–∞–ø—É—Å–∫
main "$@"
