#!/usr/bin/env python3
"""
Security check script for AntiSpam Bot.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –∫–æ–¥–∞.
"""

import json
import logging
import os
import subprocess
import sys
from datetime import datetime
from pathlib import Path
from typing import Any, Dict, List

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class SecurityChecker:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞."""

    def __init__(self):
        self.project_root = Path(__file__).parent.parent
        self.issues = []
        self.warnings = []
        self.recommendations = []

    def run_all_checks(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏."""
        logger.info("üîç –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...")

        # –ü—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.check_environment_variables()
        self.check_docker_security()
        self.check_file_permissions()

        # –ü—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞
        self.check_code_security()
        self.check_dependencies()

        # –ü—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ç–∏
        self.check_network_security()

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
        return self.generate_report()

    def check_environment_variables(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
        logger.info("üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–∞
        env_file = self.project_root / ".env"
        if env_file.exists():
            self.warnings.append("‚ö†Ô∏è .env —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–µ–∫—Ä–µ—Ç–æ–≤.")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ .env.example
        env_example = self.project_root / "env.example"
        if not env_example.exists():
            self.issues.append("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç .env.example —Ñ–∞–π–ª")
        else:
            self.recommendations.append("‚úÖ .env.example —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ .gitignore
        gitignore = self.project_root / ".gitignore"
        if gitignore.exists():
            with open(gitignore, 'r', encoding='utf-8') as f:
                content = f.read()
                if '.env' in content:
                    self.recommendations.append("‚úÖ .env —Ñ–∞–π–ª –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ Git")
                else:
                    self.issues.append("‚ùå .env —Ñ–∞–π–ª –Ω–µ –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ .gitignore")
        else:
            self.issues.append("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç .gitignore —Ñ–∞–π–ª")

    def check_docker_security(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ Docker."""
        logger.info("üê≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ Docker...")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Dockerfile
        dockerfile = self.project_root / "Dockerfile"
        if dockerfile.exists():
            with open(dockerfile, 'r', encoding='utf-8') as f:
                content = f.read()

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ root –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if "USER root" in content or "RUN useradd" not in content:
                    self.warnings.append("‚ö†Ô∏è Dockerfile –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å root –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ–∫—Ä–µ—Ç–æ–≤
                if "COPY .env" in content:
                    self.issues.append("‚ùå Dockerfile –∫–æ–ø–∏—Ä—É–µ—Ç .env —Ñ–∞–π–ª")

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤
                if "apt-get update" in content and "apt-get upgrade" not in content:
                    self.warnings.append("‚ö†Ô∏è Dockerfile –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–∞–∫–µ—Ç—ã, –Ω–æ –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–∏—Å—Ç–µ–º—É")
        else:
            self.issues.append("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç Dockerfile")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ docker-compose.yml
        compose_file = self.project_root / "docker-compose.yml"
        if compose_file.exists():
            with open(compose_file, 'r', encoding='utf-8') as f:
                content = f.read()

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ö–∞—Ä–¥–∫–æ–¥ —Å–µ–∫—Ä–µ—Ç–æ–≤
                if "BOT_TOKEN=" in content and "your_telegram_bot_token_here" not in content:
                    self.issues.append("‚ùå BOT_TOKEN –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω –≤ docker-compose.yml")

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ volumes –¥–ª—è —Å–µ–∫—Ä–µ—Ç–æ–≤
                if "secrets:" not in content:
                    self.warnings.append("‚ö†Ô∏è docker-compose.yml –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Docker secrets")
        else:
            self.issues.append("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç docker-compose.yml")

    def check_file_permissions(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º."""
        logger.info("üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º...")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ .env —Ñ–∞–π–ª
        env_file = self.project_root / ".env"
        if env_file.exists():
            stat = env_file.stat()
            if stat.st_mode & 0o077:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∞–≤–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã –∏ –¥—Ä—É–≥–∏—Ö
                self.issues.append(f"‚ùå .env —Ñ–∞–π–ª –∏–º–µ–µ—Ç —Å–ª–∏—à–∫–æ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø—Ä–∞–≤–∞: {oct(stat.st_mode)}")
            else:
                self.recommendations.append("‚úÖ .env —Ñ–∞–π–ª –∏–º–µ–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ —Å–∫—Ä–∏–ø—Ç—ã
        scripts_dir = self.project_root / "scripts"
        if scripts_dir.exists():
            for script in scripts_dir.glob("*.py"):
                if not script.stat().st_mode & 0o111:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∞–≤–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                    self.warnings.append(f"‚ö†Ô∏è –°–∫—Ä–∏–ø—Ç {script.name} –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ")

    def check_code_security(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞."""
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞...")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ–ø–∞—Å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π (—Ç–æ–ª—å–∫–æ –≤ –Ω–∞—à–∏—Ö —Ñ–∞–π–ª–∞—Ö)
        for py_file in self.project_root.rglob("*.py"):
            if py_file.name.startswith("__") or "venv" in str(py_file):
                continue

            try:
                with open(py_file, 'r', encoding='utf-8') as f:
                    content = f.read()

                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–ø–∞—Å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
                    if "os.system" in content:
                        self.issues.append(f"‚ùå {py_file.relative_to(self.project_root)} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç os.system")

                    if "eval(" in content:
                        self.issues.append(f"‚ùå {py_file.relative_to(self.project_root)} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç eval()")

                    if "exec(" in content:
                        self.issues.append(f"‚ùå {py_file.relative_to(self.project_root)} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç exec()")

                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ–∫—Ä–µ—Ç–æ–≤
                    if "logger" in content and "token" in content.lower():
                        self.warnings.append(f"‚ö†Ô∏è {py_file.relative_to(self.project_root)} –º–æ–∂–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω—ã")

            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {py_file}: {e}")

    def check_dependencies(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –Ω–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–∏."""
        logger.info("üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ requirements.txt
        requirements = self.project_root / "requirements.txt"
        if requirements.exists():
            self.recommendations.append("‚úÖ requirements.txt –Ω–∞–π–¥–µ–Ω")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –ø–∞–∫–µ—Ç—ã
            with open(requirements, 'r', encoding='utf-8') as f:
                content = f.read()

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —É—è–∑–≤–∏–º—ã–µ –ø–∞–∫–µ—Ç—ã
                vulnerable_packages = [
                    "requests<2.20.0",
                    "urllib3<1.24.0",
                    "pyyaml<5.1"
                ]

                for package in vulnerable_packages:
                    if package.split("<")[0] in content:
                        self.warnings.append(f"‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–æ —É—è–∑–≤–∏–º—ã–π –ø–∞–∫–µ—Ç: {package}")
        else:
            self.issues.append("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç requirements.txt")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ requirements-dev.txt
        dev_requirements = self.project_root / "requirements-dev.txt"
        if dev_requirements.exists():
            self.recommendations.append("‚úÖ requirements-dev.txt –Ω–∞–π–¥–µ–Ω")
        else:
            self.warnings.append("‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç requirements-dev.txt")

    def check_network_security(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏."""
        logger.info("üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        nginx_conf = self.project_root / "nginx" / "nginx.conf"
        if nginx_conf.exists():
            with open(nginx_conf, 'r', encoding='utf-8') as f:
                content = f.read()

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ SSL
                if "ssl_certificate" in content:
                    self.recommendations.append("‚úÖ Nginx –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è SSL")
                else:
                    self.warnings.append("‚ö†Ô∏è Nginx –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è SSL")

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                security_headers = [
                    "X-Frame-Options",
                    "X-Content-Type-Options",
                    "X-XSS-Protection",
                    "Strict-Transport-Security"
                ]

                for header in security_headers:
                    if header in content:
                        self.recommendations.append(f"‚úÖ –ó–∞–≥–æ–ª–æ–≤–æ–∫ {header} –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                    else:
                        self.warnings.append(f"‚ö†Ô∏è –ó–∞–≥–æ–ª–æ–≤–æ–∫ {header} –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        else:
            self.warnings.append("‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Nginx")

    def generate_report(self) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏."""
        total_issues = len(self.issues)
        total_warnings = len(self.warnings)
        total_recommendations = len(self.recommendations)

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        if total_issues == 0:
            if total_warnings == 0:
                security_status = "üü¢ –û–¢–õ–ò–ß–ù–û"
            else:
                security_status = "üü° –•–û–†–û–®–û"
        else:
            security_status = "üî¥ –¢–†–ï–ë–£–ï–¢ –í–ù–ò–ú–ê–ù–ò–Ø"

        report = {
            "timestamp": datetime.utcnow().isoformat(),
            "security_status": security_status,
            "summary": {
                "total_issues": total_issues,
                "total_warnings": total_warnings,
                "total_recommendations": total_recommendations
            },
            "issues": self.issues,
            "warnings": self.warnings,
            "recommendations": self.recommendations
        }

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        report_file = self.project_root / "security-report.json"
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(report, f, indent=2, ensure_ascii=False)

        logger.info(f"üìä –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {report_file}")

        return report

    def print_report(self, report: Dict[str, Any]):
        """–í—ã–≤–æ–¥ –æ—Ç—á–µ—Ç–∞ –≤ –∫–æ–Ω—Å–æ–ª—å."""
        print("\n" + "="*60)
        print("üîí –û–¢–ß–ï–¢ –û –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò ANTI-SPAM BOT")
        print("="*60)

        print(f"\nüìä –°—Ç–∞—Ç—É—Å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {report['security_status']}")
        print(f"üìà –í—Å–µ–≥–æ –ø—Ä–æ–±–ª–µ–º: {report['summary']['total_issues']}")
        print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {report['summary']['total_warnings']}")
        print(f"‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {report['summary']['total_recommendations']}")

        if report['issues']:
            print("\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´:")
            for issue in report['issues']:
                print(f"  {issue}")

        if report['warnings']:
            print("\n‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:")
            for warning in report['warnings']:
                print(f"  {warning}")

        if report['recommendations']:
            print("\n‚úÖ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            for rec in report['recommendations']:
                print(f"  {rec}")

        print("\n" + "="*60)

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
        print("\nüöÄ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –£–õ–£–ß–®–ï–ù–ò–Æ:")
        print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: pip install bandit safety")
        print("2. –í—ã–ø–æ–ª–Ω–∏—Ç–µ: bandit -r app/")
        print("3. –í—ã–ø–æ–ª–Ω–∏—Ç–µ: safety check")
        print("4. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Docker secrets –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞")
        print("5. –†–µ–≥—É–ª—è—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è–π—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
        print("6. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")

        print("\n" + "="*60)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    checker = SecurityChecker()
    report = checker.run_all_checks()
    checker.print_report(report)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–±–ª–µ–º
    if report['summary']['total_issues'] > 0:
        sys.exit(1)
    else:
        sys.exit(0)

if __name__ == "__main__":
    main()
