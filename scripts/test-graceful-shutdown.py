#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ graceful shutdown
"""

import asyncio
import logging
import signal
import sys
import time
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from app.utils.graceful_shutdown import GracefulShutdown
from aiogram import Bot, Dispatcher

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)


class TestBot:
    """–¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ graceful shutdown."""
    
    def __init__(self):
        self.is_running = False
        self.shutdown_manager = None
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç."""
        logger.info("Starting test bot...")
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π –±–æ—Ç –∏ dispatcher (–±–µ–∑ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞)
        class MockBot:
            async def send_message(self, chat_id, text):
                logger.info(f"Mock send_message to {chat_id}: {text}")
            
            @property
            def session(self):
                return self
            
            async def close(self):
                logger.info("Mock session closed")
        
        bot = MockBot()
        dp = Dispatcher()
        
        # –°–æ–∑–¥–∞–µ–º graceful shutdown manager
        self.shutdown_manager = GracefulShutdown(bot, dp, [123456789])  # –§–∏–∫—Ç–∏–≤–Ω—ã–π admin_id
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π callback
        self.shutdown_manager.add_shutdown_callback(self.test_shutdown_callback)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        self.shutdown_manager.setup_signal_handlers()
        
        self.is_running = True
        logger.info("Test bot started successfully")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞
        try:
            while self.is_running and not self.shutdown_manager.is_shutdown_requested():
                logger.info("Bot is running... (Press Ctrl+C to test graceful shutdown)")
                await asyncio.sleep(5)
        except KeyboardInterrupt:
            logger.info("KeyboardInterrupt received, testing graceful shutdown...")
            await self.shutdown_manager.graceful_shutdown()
            
    async def test_shutdown_callback(self):
        """–¢–µ—Å—Ç–æ–≤—ã–π callback –¥–ª—è shutdown."""
        logger.info("Test shutdown callback executed")
        await asyncio.sleep(2)  # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É
        logger.info("Test shutdown callback completed")
        
    def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç."""
        self.is_running = False
        logger.info("Test bot stopped")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞."""
    test_bot = TestBot()
    
    try:
        await test_bot.start()
    except Exception as e:
        logger.error(f"Error in test bot: {e}")
    finally:
        test_bot.stop()


if __name__ == "__main__":
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ graceful shutdown")
    print("üìù –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è graceful shutdown")
    print("‚è∞ Timeout: 30 —Å–µ–∫—É–Ω–¥")
    print("-" * 50)
    
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("Test interrupted by user")
    except Exception as e:
        logger.error(f"Test failed: {e}")
        sys.exit(1)
    
    print("-" * 50)
    print("‚úÖ –¢–µ—Å—Ç graceful shutdown –∑–∞–≤–µ—Ä—à–µ–Ω")
