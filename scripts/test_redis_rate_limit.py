#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Redis Rate Limiting
"""

import asyncio
import logging
import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent))

from app.config import load_config
from app.services.redis import RedisService

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)


async def test_redis_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis."""
    logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis...")

    try:
        config = load_config()
        logger.info(f"Redis URL: {config.redis_url}")
        logger.info(f"Redis enabled: {config.redis_enabled}")

        if not config.redis_enabled:
            logger.warning("‚ùå Redis –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return False

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        redis_service = RedisService()
        if redis_service.is_available():
            logger.info("‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")

            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            test_key = "test:rate_limit:123"

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
            await redis_service.redis_client.set(test_key, "1", ex=60)
            logger.info("‚úÖ SET –æ–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")

            # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
            value = await redis_service.redis_client.get(test_key)
            logger.info(f"‚úÖ GET –æ–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞: {value}")

            # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–ª—é—á
            await redis_service.redis_client.delete(test_key)
            logger.info("‚úÖ DELETE –æ–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")

            return True
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Redis")
            return False

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Redis: {e}")
        return False


async def test_rate_limit_operations():
    """–¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π rate limiting."""
    logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π rate limiting...")

    try:
        redis_service = RedisService()
        if not redis_service.is_available():
            logger.error("‚ùå Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return False

        user_id = 123456789
        limit = 5
        interval = 60

        logger.info(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–∏–º–∏—Ç: {limit} –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ {interval} —Å–µ–∫—É–Ω–¥")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤
        for i in range(limit + 2):
            result = await redis_service.check_rate_limit(user_id=user_id, limit=limit, interval=interval, key_type="test")

            logger.info(f"–ó–∞–ø—Ä–æ—Å {i+1}: allowed={result['allowed']}, remaining={result['remaining']}")

            if i < limit:
                assert result["allowed"], f"–ó–∞–ø—Ä–æ—Å {i+1} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω"
            else:
                assert not result["allowed"], f"–ó–∞–ø—Ä–æ—Å {i+1} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"

        logger.info("‚úÖ –¢–µ—Å—Ç rate limiting –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ")

        # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_keys = await redis_service.redis_client.keys("rate_limit:test:*")
        if test_keys:
            await redis_service.redis_client.delete(*test_keys)
            logger.info("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")

        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ rate limiting: {e}")
        return False


async def test_redis_performance():
    """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ Redis."""
    logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ Redis...")

    try:
        redis_service = RedisService()
        if not redis_service.is_available():
            logger.error("‚ùå Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return False

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–π
        import time

        operations = 100
        start_time = time.time()

        for i in range(operations):
            await redis_service.redis_client.set(f"perf_test:{i}", str(i), ex=60)

        set_time = time.time() - start_time

        start_time = time.time()

        for i in range(operations):
            await redis_service.redis_client.get(f"perf_test:{i}")

        get_time = time.time() - start_time

        # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_keys = await redis_service.redis_client.keys("perf_test:*")
        if test_keys:
            await redis_service.redis_client.delete(*test_keys)

        logger.info(f"‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:")
        logger.info(f"  - {operations} SET –æ–ø–µ—Ä–∞—Ü–∏–π: {set_time:.3f}s ({operations/set_time:.1f} ops/s)")
        logger.info(f"  - {operations} GET –æ–ø–µ—Ä–∞—Ü–∏–π: {get_time:.3f}s ({operations/get_time:.1f} ops/s)")

        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
        return False


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Redis Rate Limiting")

    success_count = 0
    total_tests = 3

    # –¢–µ—Å—Ç 1: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    if await test_redis_connection():
        success_count += 1

    # –¢–µ—Å—Ç 2: Rate limiting
    if await test_rate_limit_operations():
        success_count += 1

    # –¢–µ—Å—Ç 3: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    if await test_redis_performance():
        success_count += 1

    logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {success_count}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")

    if success_count == total_tests:
        logger.info("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        return True
    else:
        logger.error("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å")
        return False


if __name__ == "__main__":
    try:
        success = asyncio.run(main())
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        logger.info("‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
