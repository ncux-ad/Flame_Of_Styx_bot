#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Redis Rate Limiting
"""

import asyncio
import logging
import time
from typing import List

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


async def test_redis_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis."""
    try:
        from app.services.redis import get_redis_service
        
        print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis...")
        
        redis_service = await get_redis_service()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        await redis_service.set("test_key", "test_value", expire=10)
        value = await redis_service.get("test_key")
        
        if value == "test_value":
            print("‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –≤ –æ–ø–µ—Ä–∞—Ü–∏—è—Ö Redis")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis: {e}")
        return False


async def test_rate_limiting_strategies():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ rate limiting."""
    try:
        from app.middlewares.redis_rate_limit import RedisRateLimitMiddleware
        from app.services.redis import get_redis_service
        
        print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ rate limiting...")
        
        redis_service = await get_redis_service()
        user_id = 12345
        limit = 5
        interval = 10  # 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        
        strategies = ["fixed_window", "sliding_window", "token_bucket"]
        
        for strategy in strategies:
            print(f"\nüìä –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é: {strategy}")
            
            middleware = RedisRateLimitMiddleware(
                user_limit=limit,
                admin_limit=limit * 2,
                interval=interval,
                strategy=strategy,
                redis_key_prefix="test_rate_limit"
            )
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–ª—é—á–∏
            await redis_service.delete(f"test_rate_limit:blocked:{user_id}")
            
            success_count = 0
            for i in range(limit + 2):  # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç
                is_allowed = await middleware._check_rate_limit(
                    redis_service.redis, user_id, False
                )
                
                if is_allowed:
                    success_count += 1
                    print(f"  ‚úÖ –ó–∞–ø—Ä–æ—Å {i+1}: —Ä–∞–∑—Ä–µ—à–µ–Ω")
                else:
                    print(f"  ‚ùå –ó–∞–ø—Ä–æ—Å {i+1}: –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
                    break
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                await asyncio.sleep(0.1)
            
            print(f"  üìà –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {success_count}/{limit + 2}")
            
            # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–ª—é—á–∏
            await redis_service.delete(f"test_rate_limit:blocked:{user_id}")
            if strategy == "fixed_window":
                window = int(time.time() // interval)
                await redis_service.delete(f"test_rate_limit:fixed:{user_id}:{window}")
            elif strategy == "sliding_window":
                await redis_service.delete(f"test_rate_limit:sliding:{user_id}")
            elif strategy == "token_bucket":
                await redis_service.delete(f"test_rate_limit:bucket:{user_id}")
        
        print("‚úÖ –í—Å–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {e}")
        return False


async def test_blocking_mechanism():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ—Ö–∞–Ω–∏–∑–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    try:
        from app.middlewares.redis_rate_limit import RedisRateLimitMiddleware
        from app.services.redis import get_redis_service
        
        print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ—Ö–∞–Ω–∏–∑–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏...")
        
        redis_service = await get_redis_service()
        user_id = 54321
        limit = 3
        interval = 5
        block_duration = 10
        
        middleware = RedisRateLimitMiddleware(
            user_limit=limit,
            admin_limit=limit * 2,
            interval=interval,
            strategy="sliding_window",
            block_duration=block_duration,
            redis_key_prefix="test_blocking"
        )
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–ª—é—á–∏
        await redis_service.delete(f"test_blocking:blocked:{user_id}")
        
        # –ü—Ä–µ–≤—ã—à–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        for i in range(limit + 1):
            is_allowed = await middleware._check_rate_limit(
                redis_service.redis, user_id, False
            )
            
            if is_allowed:
                print(f"  ‚úÖ –ó–∞–ø—Ä–æ—Å {i+1}: —Ä–∞–∑—Ä–µ—à–µ–Ω")
            else:
                print(f"  ‚ùå –ó–∞–ø—Ä–æ—Å {i+1}: –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
                is_blocked = await middleware._is_user_blocked(redis_service.redis, user_id)
                if is_blocked:
                    print(f"  üîí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ {block_duration} —Å–µ–∫—É–Ω–¥")
                else:
                    print(f"  ‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω (–æ—à–∏–±–∫–∞)")
                break
        
        # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–ª—é—á–∏
        await redis_service.delete(f"test_blocking:blocked:{user_id}")
        await redis_service.delete(f"test_blocking:sliding:{user_id}")
        
        print("‚úÖ –ú–µ—Ö–∞–Ω–∏–∑–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {e}")
        return False


async def test_performance():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å Redis rate limiting."""
    try:
        from app.middlewares.redis_rate_limit import RedisRateLimitMiddleware
        from app.services.redis import get_redis_service
        
        print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å...")
        
        redis_service = await get_redis_service()
        user_id = 99999
        limit = 100
        interval = 60
        
        middleware = RedisRateLimitMiddleware(
            user_limit=limit,
            admin_limit=limit * 2,
            interval=interval,
            strategy="sliding_window",
            redis_key_prefix="test_performance"
        )
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–ª—é—á–∏
        await redis_service.delete(f"test_performance:sliding:{user_id}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        start_time = time.time()
        requests_count = 1000
        
        for i in range(requests_count):
            await middleware._check_rate_limit(redis_service.redis, user_id, False)
        
        end_time = time.time()
        duration = end_time - start_time
        rps = requests_count / duration
        
        print(f"  üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {requests_count}")
        print(f"  ‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"  üöÄ –ó–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É: {rps:.2f}")
        
        # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–ª—é—á–∏
        await redis_service.delete(f"test_performance:sliding:{user_id}")
        
        if rps > 100:  # –ú–∏–Ω–∏–º—É–º 100 RPS
            print("‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–∞—è")
            return True
        else:
            print("‚ö†Ô∏è –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–æ–∂–µ—Ç –±—ã—Ç—å —É–ª—É—á—à–µ–Ω–∞")
            return True  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∞
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
        return False


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Redis Rate Limiting")
    print("=" * 60)
    
    results = []
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
    results.append(await test_redis_connection())
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ rate limiting
    results.append(await test_rate_limiting_strategies())
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ—Ö–∞–Ω–∏–∑–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    results.append(await test_blocking_mechanism())
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    results.append(await test_performance())
    
    print("\n" + "=" * 60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    
    passed = sum(results)
    total = len(results)
    
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total}")
    print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {total - passed}/{total}")
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! Redis Rate Limiting —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    else:
        print("‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è")
    
    return passed == total


if __name__ == "__main__":
    try:
        success = asyncio.run(main())
        exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        exit(1)
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        exit(1)
