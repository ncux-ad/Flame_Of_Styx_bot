#!/usr/bin/env python3
"""
–õ–µ–≥–∫–æ–≤–µ—Å–Ω—ã–π —Ç–µ—Å—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è —Å–ª–∞–±—ã—Ö VPS
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Netdata –∏ Uptime Kuma –±–µ–∑ –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
"""

import asyncio
import json
import logging
import sys
import time
from pathlib import Path

import aiohttp

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)


class LightweightMonitoringTest:
    """–õ–µ–≥–∫–æ–≤–µ—Å–Ω—ã–π —Ç–µ—Å—Ç–µ—Ä –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."""

    def __init__(self):
        self.netdata_url = "http://localhost:19999"
        self.uptime_kuma_url = "http://localhost:3001"
        self.timeout = 10  # –ö–æ—Ä–æ—Ç–∫–∏–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è —Å–ª–∞–±—ã—Ö VPS
        self.results = {"netdata": {}, "uptime_kuma": {}, "summary": {}}

    async def test_netdata_availability(self):
        """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Netdata."""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Netdata...")

        try:
            async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=self.timeout)) as session:
                # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                async with session.get(f"{self.netdata_url}/") as response:
                    if response.status == 200:
                        self.results["netdata"]["web_available"] = True
                        logger.info("‚úÖ Netdata –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–æ—Å—Ç—É–ø–µ–Ω")
                    else:
                        self.results["netdata"]["web_available"] = False
                        logger.warning(f"‚ö†Ô∏è Netdata –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status}")

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ API (–ª–µ–≥–∫–æ–≤–µ—Å–Ω—ã–π endpoint)
                try:
                    async with session.get(f"{self.netdata_url}/api/v1/info") as api_response:
                        if api_response.status == 200:
                            info_data = await api_response.json()
                            self.results["netdata"]["api_available"] = True
                            self.results["netdata"]["version"] = info_data.get("version", "unknown")
                            self.results["netdata"]["hostname"] = info_data.get("hostname", "unknown")
                            logger.info(f"‚úÖ Netdata API —Ä–∞–±–æ—Ç–∞–µ—Ç (–≤–µ—Ä—Å–∏—è: {info_data.get('version', 'unknown')})")
                        else:
                            self.results["netdata"]["api_available"] = False
                            logger.warning(f"‚ö†Ô∏è Netdata API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {api_response.status}")
                except Exception as e:
                    self.results["netdata"]["api_available"] = False
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ API Netdata: {e}")

        except asyncio.TimeoutError:
            self.results["netdata"]["web_available"] = False
            self.results["netdata"]["api_available"] = False
            logger.error("‚ùå Netdata –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Ç–∞–π–º–∞—É—Ç)")
        except Exception as e:
            self.results["netdata"]["web_available"] = False
            self.results["netdata"]["api_available"] = False
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Netdata: {e}")

    async def test_uptime_kuma_availability(self):
        """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Uptime Kuma."""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Uptime Kuma...")

        try:
            async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=self.timeout)) as session:
                # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                async with session.get(f"{self.uptime_kuma_url}/") as response:
                    if response.status == 200:
                        self.results["uptime_kuma"]["web_available"] = True
                        logger.info("‚úÖ Uptime Kuma –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–æ—Å—Ç—É–ø–µ–Ω")
                    else:
                        self.results["uptime_kuma"]["web_available"] = False
                        logger.warning(f"‚ö†Ô∏è Uptime Kuma –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status}")

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ (–±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
                try:
                    async with session.get(f"{self.uptime_kuma_url}/api/status-page/heartbeat") as status_response:
                        if status_response.status in [200, 401]:  # 401 = –Ω—É–∂–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è, –Ω–æ —Å–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç
                            self.results["uptime_kuma"]["api_responding"] = True
                            logger.info("‚úÖ Uptime Kuma API –æ—Ç–≤–µ—á–∞–µ—Ç")
                        else:
                            self.results["uptime_kuma"]["api_responding"] = False
                            logger.warning(f"‚ö†Ô∏è Uptime Kuma API —Å—Ç–∞—Ç—É—Å: {status_response.status}")
                except Exception as e:
                    self.results["uptime_kuma"]["api_responding"] = False
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ API Uptime Kuma: {e}")

        except asyncio.TimeoutError:
            self.results["uptime_kuma"]["web_available"] = False
            self.results["uptime_kuma"]["api_responding"] = False
            logger.error("‚ùå Uptime Kuma –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Ç–∞–π–º–∞—É—Ç)")
        except Exception as e:
            self.results["uptime_kuma"]["web_available"] = False
            self.results["uptime_kuma"]["api_responding"] = False
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Uptime Kuma: {e}")

    async def test_system_resources_light(self):
        """–õ–µ–≥–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ —á–µ—Ä–µ–∑ Netdata."""
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã (–ª–µ–≥–∫–∏–π —Ä–µ–∂–∏–º)...")

        if not self.results["netdata"].get("api_available"):
            logger.warning("‚ö†Ô∏è Netdata API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–µ—Å—É—Ä—Å–æ–≤")
            return

        try:
            async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=self.timeout)) as session:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ CPU –∏ RAM
                endpoints = {
                    "cpu": "/api/v1/data?chart=system.cpu&after=-60&points=1&group=average&format=json",
                    "ram": "/api/v1/data?chart=system.ram&after=-60&points=1&group=average&format=json",
                }

                for metric_name, endpoint in endpoints.items():
                    try:
                        async with session.get(f"{self.netdata_url}{endpoint}") as response:
                            if response.status == 200:
                                data = await response.json()
                                if data and "data" in data and len(data["data"]) > 0:
                                    self.results["netdata"][f"{metric_name}_data"] = data["data"][0]
                                    logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ {metric_name}")
                                else:
                                    logger.warning(f"‚ö†Ô∏è –ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {metric_name}")
                            else:
                                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è {metric_name}: {response.status}")
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –º–µ—Ç—Ä–∏–∫–∏ {metric_name}: {e}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤: {e}")

    def check_docker_containers(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Docker)."""
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã...")

        try:
            import subprocess

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ Docker
            result = subprocess.run(
                ["docker", "ps", "--format", "table {{.Names}}\t{{.Status}}", "--filter", "name=netdata"],
                capture_output=True,
                text=True,
                timeout=5,
            )

            if result.returncode == 0 and "netdata" in result.stdout:
                self.results["netdata"]["docker_running"] = True
                logger.info("‚úÖ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä Netdata –∑–∞–ø—É—â–µ–Ω")
            else:
                self.results["netdata"]["docker_running"] = False
                logger.info("‚ÑπÔ∏è Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä Netdata –Ω–µ –Ω–∞–π–¥–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è systemd)")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º Uptime Kuma
            result = subprocess.run(
                ["docker", "ps", "--format", "table {{.Names}}\t{{.Status}}", "--filter", "name=uptime-kuma"],
                capture_output=True,
                text=True,
                timeout=5,
            )

            if result.returncode == 0 and "uptime-kuma" in result.stdout:
                self.results["uptime_kuma"]["docker_running"] = True
                logger.info("‚úÖ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä Uptime Kuma –∑–∞–ø—É—â–µ–Ω")
            else:
                self.results["uptime_kuma"]["docker_running"] = False
                logger.info("‚ÑπÔ∏è Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä Uptime Kuma –Ω–µ –Ω–∞–π–¥–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è systemd)")

        except subprocess.TimeoutExpired:
            logger.warning("‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤")
        except FileNotFoundError:
            logger.info("‚ÑπÔ∏è Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Docker: {e}")

    def check_systemd_services(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ systemd —Å–µ—Ä–≤–∏—Å–æ–≤."""
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º systemd —Å–µ—Ä–≤–∏—Å—ã...")

        try:
            import subprocess

            services = ["netdata", "uptime-kuma"]

            for service in services:
                try:
                    result = subprocess.run(["systemctl", "is-active", service], capture_output=True, text=True, timeout=3)

                    if result.returncode == 0 and result.stdout.strip() == "active":
                        self.results[service.replace("-", "_")]["systemd_active"] = True
                        logger.info(f"‚úÖ Systemd —Å–µ—Ä–≤–∏—Å {service} –∞–∫—Ç–∏–≤–µ–Ω")
                    else:
                        self.results[service.replace("-", "_")]["systemd_active"] = False
                        logger.info(f"‚ÑπÔ∏è Systemd —Å–µ—Ä–≤–∏—Å {service} –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω")

                except subprocess.TimeoutExpired:
                    logger.warning(f"‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä–≤–∏—Å–∞ {service}")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä–≤–∏—Å–∞ {service}: {e}")

        except FileNotFoundError:
            logger.info("‚ÑπÔ∏è systemctl –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ systemd: {e}")

    def generate_summary(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞."""
        logger.info("üìä –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç...")

        # Netdata —Å—Ç–∞—Ç—É—Å
        netdata_ok = self.results["netdata"].get("web_available", False) and self.results["netdata"].get(
            "api_available", False
        )

        # Uptime Kuma —Å—Ç–∞—Ç—É—Å
        uptime_kuma_ok = self.results["uptime_kuma"].get("web_available", False)

        self.results["summary"] = {
            "netdata_status": "OK" if netdata_ok else "FAIL",
            "uptime_kuma_status": "OK" if uptime_kuma_ok else "FAIL",
            "overall_status": (
                "OK" if (netdata_ok and uptime_kuma_ok) else "PARTIAL" if (netdata_ok or uptime_kuma_ok) else "FAIL"
            ),
            "test_timestamp": int(time.time()),
            "recommendations": [],
        }

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if not netdata_ok:
            self.results["summary"]["recommendations"].append(
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å Netdata: systemctl status netdata –∏–ª–∏ docker ps"
            )

        if not uptime_kuma_ok:
            self.results["summary"]["recommendations"].append(
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å Uptime Kuma: systemctl status uptime-kuma –∏–ª–∏ docker ps"
            )

        if netdata_ok and uptime_kuma_ok:
            self.results["summary"]["recommendations"].append(
                "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ! –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–ª–µ—Ä—Ç—ã –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞—Ö."
            )

    def print_report(self):
        """–í—ã–≤–æ–¥ –æ—Ç—á–µ—Ç–∞ –≤ –∫–æ–Ω—Å–æ–ª—å."""
        print("\n" + "=" * 60)
        print("üìä –û–¢–ß–ï–¢ –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê")
        print("=" * 60)

        # –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å
        overall = self.results["summary"]["overall_status"]
        status_emoji = {"OK": "‚úÖ", "PARTIAL": "‚ö†Ô∏è", "FAIL": "‚ùå"}
        print(f"\nüéØ –û–ë–©–ò–ô –°–¢–ê–¢–£–°: {status_emoji.get(overall, '‚ùì')} {overall}")

        # Netdata
        netdata_status = self.results["summary"]["netdata_status"]
        print(f"\nüîπ NETDATA: {status_emoji.get(netdata_status, '‚ùì')} {netdata_status}")
        if self.results["netdata"].get("web_available"):
            print(f"   üì° –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost:19999")
        if self.results["netdata"].get("version"):
            print(f"   üì¶ –í–µ—Ä—Å–∏—è: {self.results['netdata']['version']}")

        # Uptime Kuma
        uptime_status = self.results["summary"]["uptime_kuma_status"]
        print(f"\nüîπ UPTIME KUMA: {status_emoji.get(uptime_status, '‚ùì')} {uptime_status}")
        if self.results["uptime_kuma"].get("web_available"):
            print(f"   üì° –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost:3001")

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if self.results["summary"]["recommendations"]:
            print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            for i, rec in enumerate(self.results["summary"]["recommendations"], 1):
                print(f"   {i}. {rec}")

        print("\n" + "=" * 60)

    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤."""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ª–µ–≥–∫–æ–≤–µ—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")

        start_time = time.time()

        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
        await asyncio.gather(
            self.test_netdata_availability(), self.test_uptime_kuma_availability(), self.test_system_resources_light()
        )

        # –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        self.check_docker_containers()
        self.check_systemd_services()

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
        self.generate_summary()

        end_time = time.time()
        logger.info(f"‚è±Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {end_time - start_time:.2f} —Å–µ–∫—É–Ω–¥")

        return self.results

    def save_results(self, filename="monitoring_test_results.json"):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ñ–∞–π–ª."""
        try:
            with open(filename, "w", encoding="utf-8") as f:
                json.dump(self.results, f, indent=2, ensure_ascii=False)
            logger.info(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("–õ–ï–ì–ö–û–í–ï–°–ù–´–ô –¢–ï–°–¢ –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê")
    print("–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Å–ª–∞–±—ã—Ö VPS —Å–µ—Ä–≤–µ—Ä–æ–≤")
    print("-" * 50)

    tester = LightweightMonitoringTest()

    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
        results = await tester.run_all_tests()

        # –í—ã–≤–æ–¥–∏–º –æ—Ç—á–µ—Ç
        tester.print_report()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        tester.save_results()

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
        overall_status = results["summary"]["overall_status"]
        if overall_status == "OK":
            return 0
        elif overall_status == "PARTIAL":
            return 1
        else:
            return 2

    except KeyboardInterrupt:
        logger.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return 130
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1


if __name__ == "__main__":
    try:
        exit_code = asyncio.run(main())
        sys.exit(exit_code)
    except Exception as e:
        print(f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
