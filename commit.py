#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–º–∏—Ç–æ–≤ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏.
–°–Ω–∞—á–∞–ª–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–æ–¥, –∑–∞—Ç–µ–º —Å–æ–∑–¥–∞–µ—Ç –∫–æ–º–º–∏—Ç.
"""

import subprocess
import sys
from pathlib import Path


def run_command(command: list, description: str, check: bool = True) -> bool:
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –∏ –≤–µ—Ä–Ω—É—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
    print(f"üîÑ {description}...")
    try:
        result = subprocess.run(command, check=check, capture_output=True, text=True)
        if result.returncode == 0:
            print(f"‚úÖ {description} - —É—Å–ø–µ—à–Ω–æ")
            return True
        else:
            print(f"‚ö†Ô∏è {description} - –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ:")
            print(result.stdout)
            print(result.stderr)
            return False
    except subprocess.CalledProcessError as e:
        print(f"‚ùå {description} - –æ—à–∏–±–∫–∞:")
        print(e.stdout)
        print(e.stderr)
        return False


def format_code():
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ –ø–µ—Ä–µ–¥ –∫–æ–º–º–∏—Ç–æ–º."""
    print("üöÄ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞...")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    directories = ["app", "tests", "bot.py"]

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é black
    for directory in directories:
        if Path(directory).exists():
            run_command(
                ["black", directory],
                f"–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {directory} —Å –ø–æ–º–æ—â—å—é black"
            )

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é isort
    for directory in directories:
        if Path(directory).exists():
            run_command(
                ["isort", "--profile", "black", directory],
                f"–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ –≤ {directory} —Å –ø–æ–º–æ—â—å—é isort"
            )


def get_commit_message():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    print("\nüìù –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞:")
    print("üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç:")
    print("   feat: –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é")
    print("   fix: –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É")
    print("   docs: –æ–±–Ω–æ–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é")
    print("   refactor: —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥–∞")
    print("   style: —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞")
    print("   test: –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç—ã")
    print("   chore: –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
    print()

    message = input("–°–æ–æ–±—â–µ–Ω–∏–µ: ").strip()
    if not message:
        print("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
        return None

    # –°–ø—Ä–æ—Å–∏—Ç—å –æ –ø–æ–¥—Ä–æ–±–Ω–æ–º –æ–ø–∏—Å–∞–Ω–∏–∏
    print("\nüìã –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ? (y/n): ", end="")
    if input().lower().startswith('y'):
        print("–í–≤–µ–¥–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–∑–∞–≤–µ—Ä—à–∏—Ç–µ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π):")
        description_lines = []
        while True:
            line = input()
            if not line.strip():
                break
            description_lines.append(line)

        if description_lines:
            message += "\n\n" + "\n".join(description_lines)

    return message


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    if len(sys.argv) > 1:
        # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç
        message = " ".join(sys.argv[1:])
    else:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ–¥
        format_code()

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        message = get_commit_message()
        if not message:
            return 1

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å git
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ git...")
    if not run_command(["git", "status", "--porcelain"], "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π", check=False):
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ git")
        return 1

    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    print("\nüì¶ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π...")
    if not run_command(["git", "add", "."], "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –≤ –∏–Ω–¥–µ–∫—Å"):
        return 1

    # –°–æ–∑–¥–∞–µ–º –∫–æ–º–º–∏—Ç
    print(f"\nüíæ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞: {message.split(chr(10))[0]}")
    if not run_command(["git", "commit", "-m", message], "–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞"):
        return 1

    print("\nüéâ –ö–æ–º–º–∏—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
    print("üí° –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: git push")

    return 0


if __name__ == "__main__":
    sys.exit(main())
