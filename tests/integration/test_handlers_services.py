"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è handlers –∏ services
"""

import pytest
from unittest.mock import AsyncMock, MagicMock, patch
from aiogram import F, Router
from aiogram.types import Message, CallbackQuery

from app.handlers.admin.basic import basic_router
from app.services.moderation import ModerationService
from app.services.bots import BotService
from app.services.status import StatusService


class TestHandlersServicesIntegration:
    """–¢–µ—Å—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∏ —Å–µ—Ä–≤–∏—Å–æ–≤"""

    @pytest.mark.asyncio
    async def test_status_command_integration(self, test_config, mock_bot, test_db_session, create_test_message, test_admin_user, test_private_chat):
        """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥—ã /status —Å —Å–µ—Ä–≤–∏—Å–∞–º–∏"""
        message = create_test_message(
            text="/status",
            user_id=test_admin_user.id,
            chat_id=test_private_chat.id,
            is_admin=True
        )
        
        # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–µ—Ä–≤–∏—Å—ã
        moderation_service = ModerationService(mock_bot, test_db_session)
        bot_service = BotService(mock_bot, test_db_session)
        status_service = StatusService(
            moderation_service=moderation_service,
            bot_service=bot_service,
            channel_service=None  # –£–ø—Ä–æ—â–∞–µ–º –¥–ª—è —Ç–µ—Å—Ç–∞
        )
        
        # –ú–æ–∫–∞–µ–º –º–µ—Ç–æ–¥—ã —Å–µ—Ä–≤–∏—Å–æ–≤
        with patch.object(status_service, 'get_bot_status') as mock_get_status:
            mock_get_status.return_value = "ü§ñ **–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞**\n\n‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω"
            
            # –ú–æ–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
            message.answer = AsyncMock()
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –≤—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            from app.handlers.admin.basic import handle_status_command
            
            # –ú–æ–∫–∞–µ–º send_silent_response –≤–º–µ—Å—Ç–æ message.answer
            with patch('app.handlers.admin.basic.send_silent_response') as mock_send_silent:
                await handle_status_command(
                    message=message,
                    status_service=status_service,
                    admin_id=test_admin_user.id
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ—Ä–≤–∏—Å –±—ã–ª –≤—ã–∑–≤–∞–Ω
                mock_get_status.assert_called_once()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ send_silent_response –±—ã–ª –≤—ã–∑–≤–∞–Ω
                mock_send_silent.assert_called_once()

    @pytest.mark.asyncio
    async def test_help_command_integration(self, test_config, mock_bot, test_db_session, create_test_message, test_admin_user, test_private_chat):
        """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥—ã /help —Å HelpService"""
        message = create_test_message(
            text="/help",
            user_id=test_admin_user.id,
            chat_id=test_private_chat.id,
            is_admin=True
        )
        
        # –°–æ–∑–¥–∞–µ–º HelpService
        from app.services.help import HelpService
        help_service = HelpService()
        
        # –ú–æ–∫–∞–µ–º –º–µ—Ç–æ–¥—ã —Å–µ—Ä–≤–∏—Å–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥)
        with patch.object(help_service, 'get_main_help') as mock_get_help:
            mock_get_help.return_value = "üìö **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º**\n\n/status - —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞"
            
            message.answer = AsyncMock()
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –≤—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            from app.handlers.admin.basic import handle_help_command
            
            # –ú–æ–∫–∞–µ–º send_silent_response –≤–º–µ—Å—Ç–æ message.answer
            with patch('app.handlers.admin.basic.send_silent_response') as mock_send_silent:
                await handle_help_command(
                    message=message,
                    help_service=help_service,
                    admin_id=test_admin_user.id
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤—ã
                mock_get_help.assert_called_once_with(is_admin=True)
                mock_send_silent.assert_called_once()

    @pytest.mark.asyncio
    async def test_moderation_command_integration(self, test_config, mock_bot, test_db_session, create_test_message, test_admin_user, test_chat):
        """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —Å ModerationService"""
        # –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã –±–∞–Ω–∞
        ban_message = create_test_message(
            text="/ban 123456789 Spam",
            user_id=test_admin_user.id,
            chat_id=test_chat.id,
            is_admin=True
        )
        
        moderation_service = ModerationService(mock_bot, test_db_session)
        
        # –ú–æ–∫–∞–µ–º –º–µ—Ç–æ–¥ –±–∞–Ω–∞
        with patch.object(moderation_service, 'ban_user') as mock_ban:
            mock_ban.return_value = True
            
            ban_message.answer = AsyncMock()
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–∞–Ω–∞
            async def handle_ban_command(message: Message, moderation_service: ModerationService):
                # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É
                parts = message.text.split()
                if len(parts) >= 2:
                    try:
                        user_id = int(parts[1])
                        reason = " ".join(parts[2:]) if len(parts) > 2 else "–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª"
                        
                        result = await moderation_service.ban_user(user_id, message.chat.id, reason)
                        
                        if result:
                            await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–∞–Ω–µ–Ω")
                        else:
                            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                    except ValueError:
                        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                else:
                    await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ban <user_id> [–ø—Ä–∏—á–∏–Ω–∞]")
            
            await handle_ban_command(ban_message, moderation_service)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤—ã
            mock_ban.assert_called_once_with(123456789, test_chat.id, "Spam")
            ban_message.answer.assert_called_once_with("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 123456789 –∑–∞–±–∞–Ω–µ–Ω")

    @pytest.mark.asyncio
    async def test_callback_query_integration(self, test_config, mock_bot, test_db_session, test_admin_user, test_chat):
        """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ callback query —Å —Å–µ—Ä–≤–∏—Å–∞–º–∏"""
        # –°–æ–∑–¥–∞–µ–º callback query (MagicMock –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è frozen instance)
        callback_query = MagicMock()
        callback_query.id = "test_callback"
        callback_query.from_user = test_admin_user
        callback_query.chat_instance = "test_chat"
        callback_query.data = "spam_stats"
        callback_query.message = MagicMock()
        callback_query.message.edit_text = AsyncMock()
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
        from app.utils.pii_protection import secure_logger
        
        # –ú–æ–∫–∞–µ–º secure_logger
        with patch.object(secure_logger, 'get_spam_analysis_data') as mock_get_data:
            mock_get_data.return_value = [
                {'timestamp': '2024-01-01', 'type': 'spam', 'data': 'test'}
            ]
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback
            async def handle_spam_stats_callback(callback: CallbackQuery):
                if callback.from_user.id != 439304619:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞
                    return
                
                spam_data = secure_logger.get_spam_analysis_data(days=30)
                
                if spam_data:
                    stats_text = f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–ø–∞–º–∞**\n\n–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(spam_data)}"
                else:
                    stats_text = "‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
                
                await callback.message.edit_text(stats_text)
            
            # –ü–æ–¥–º–µ–Ω—è–µ–º ID –∞–¥–º–∏–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∞ (—Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π MagicMock)
            callback_query.from_user = MagicMock()
            callback_query.from_user.id = 439304619
            
            await handle_spam_stats_callback(callback_query)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤—ã
            mock_get_data.assert_called_once_with(days=30)
            callback_query.message.edit_text.assert_called_once()

    @pytest.mark.asyncio
    async def test_error_handling_in_handlers(self, test_config, mock_bot, test_db_session, create_test_message, test_admin_user, test_private_chat):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤ handlers"""
        message = create_test_message(
            text="/status",
            user_id=test_admin_user.id,
            chat_id=test_private_chat.id,
            is_admin=True
        )
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤—ã–±—Ä–∞—Å—ã–≤–∞—Ç—å –æ—à–∏–±–∫—É
        status_service = MagicMock()
        status_service.get_bot_status = AsyncMock(side_effect=Exception("Service error"))
        
        message.answer = AsyncMock()
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        async def handle_status_with_error_handling(message: Message, status_service):
            try:
                status = await status_service.get_bot_status()
                await message.answer(status)
            except Exception as e:
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")
        
        await handle_status_with_error_handling(message, status_service)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—à–∏–±–∫–∞ –±—ã–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞
        status_service.get_bot_status.assert_called_once()
        message.answer.assert_called_once_with("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: Service error")

    @pytest.mark.asyncio
    async def test_service_method_chaining(self, test_config, mock_bot, test_db_session):
        """–¢–µ—Å—Ç —Ü–µ–ø–æ—á–∫–∏ –≤—ã–∑–æ–≤–æ–≤ –º–µ—Ç–æ–¥–æ–≤ —Å–µ—Ä–≤–∏—Å–æ–≤"""
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
        moderation_service = ModerationService(mock_bot, test_db_session)
        bot_service = BotService(mock_bot, test_db_session)
        
        # –ú–æ–∫–∞–µ–º –º–µ—Ç–æ–¥—ã (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–µ—Ç–æ–¥—ã)
        with patch.object(moderation_service, 'get_banned_users') as mock_get_banned, \
             patch.object(bot_service, 'get_all_bots') as mock_get_all_bots:
            
            mock_get_banned.return_value = [123456789, 987654321]
            mock_get_all_bots.return_value = []  # –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–ª–æ–∂–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
            async def complex_operation():
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –±–æ—Ç–æ–≤
                all_bots = await bot_service.get_all_bots()
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                banned_users = await moderation_service.get_banned_users()
                
                return {
                    'bots_count': len(all_bots),
                    'banned_count': len(banned_users),
                    'banned_users': banned_users
                }
            
            result = await complex_operation()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            assert result['bots_count'] == 0
            assert result['banned_count'] == 2
            assert 123456789 in result['banned_users']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–µ—Ç–æ–¥—ã –±—ã–ª–∏ –≤—ã–∑–≤–∞–Ω—ã
            mock_get_all_bots.assert_called_once()
            mock_get_banned.assert_called_once()

    @pytest.mark.asyncio
    async def test_concurrent_service_calls(self, test_config, mock_bot, test_db_session):
        """–¢–µ—Å—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ —Å–µ—Ä–≤–∏—Å–æ–≤"""
        import asyncio
        
        moderation_service = ModerationService(mock_bot, test_db_session)
        
        # –ú–æ–∫–∞–µ–º –º–µ—Ç–æ–¥—ã —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
        async def mock_ban_user(*args, **kwargs):
            await asyncio.sleep(0.1)  # –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
            return True
        
        with patch.object(moderation_service, 'ban_user', side_effect=mock_ban_user):
            
            # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            tasks = [
                moderation_service.ban_user(123456789, -1001234567890, "Spam"),
                moderation_service.ban_user(987654321, -1001234567890, "Flood"),
                moderation_service.ban_user(555666777, -1001234567890, "Abuse")
            ]
            
            results = await asyncio.gather(*tasks)
            
            # –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º–∏
            assert all(results)
            assert len(results) == 3

    @pytest.mark.asyncio
    async def test_service_state_consistency(self, test_config, mock_bot, test_db_session):
        """–¢–µ—Å—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤"""
        moderation_service = ModerationService(mock_bot, test_db_session)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ—Ä–≤–∏—Å —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –≤—ã–∑–æ–≤–∞–º–∏
        assert moderation_service.bot is mock_bot
        assert moderation_service.db is test_db_session
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ç–æ—Ä–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å —Ç–µ–º–∏ –∂–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        moderation_service_2 = ModerationService(mock_bot, test_db_session)
        
        # –°–µ—Ä–≤–∏—Å—ã –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        assert moderation_service.bot is moderation_service_2.bot
        assert moderation_service.db is moderation_service_2.db


class TestRealWorldScenarios:
    """–¢–µ—Å—Ç—ã —Ä–µ–∞–ª—å–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""

    @pytest.mark.asyncio
    async def test_admin_workflow(self, test_config, mock_bot, test_db_session, create_test_message, test_admin_user, test_chat):
        """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ workflow"""
        # 1. –ê–¥–º–∏–Ω –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
        status_message = create_test_message("/status", user_id=test_admin_user.id, chat_id=test_chat.id, is_admin=True)
        
        # 2. –ê–¥–º–∏–Ω –±–∞–Ω–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        ban_message = create_test_message("/ban 123456789 Spam", user_id=test_admin_user.id, chat_id=test_chat.id, is_admin=True)
        
        # 3. –ê–¥–º–∏–Ω –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö
        banned_message = create_test_message("/banned", user_id=test_admin_user.id, chat_id=test_chat.id, is_admin=True)
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
        moderation_service = ModerationService(mock_bot, test_db_session)
        
        # –ú–æ–∫–∞–µ–º –æ—Ç–≤–µ—Ç—ã
        status_message.answer = AsyncMock()
        ban_message.answer = AsyncMock()
        banned_message.answer = AsyncMock()
        
        with patch.object(moderation_service, 'ban_user') as mock_ban, \
             patch.object(moderation_service, 'get_banned_users') as mock_get_banned:
            
            mock_ban.return_value = True
            mock_get_banned.return_value = [123456789]
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º workflow
            # 1. –°—Ç–∞—Ç—É—Å (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
            await status_message.answer("‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω")
            
            # 2. –ë–∞–Ω
            result = await moderation_service.ban_user(123456789, test_chat.id, "Spam")
            if result:
                await ban_message.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω")
            
            # 3. –°–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö
            banned_users = await moderation_service.get_banned_users()
            await banned_message.answer(f"üìã –ó–∞–±–∞–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(banned_users)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
            status_message.answer.assert_called_once()
            ban_message.answer.assert_called_once()
            banned_message.answer.assert_called_once()
            
            mock_ban.assert_called_once()
            mock_get_banned.assert_called_once()

    @pytest.mark.asyncio
    async def test_error_recovery_workflow(self, test_config, mock_bot, test_db_session, create_test_message, test_admin_user, test_chat):
        """–¢–µ—Å—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ—à–∏–±–æ–∫"""
        message = create_test_message("/status", user_id=test_admin_user.id, chat_id=test_chat.id, is_admin=True)
        message.answer = AsyncMock()
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å –∫–æ—Ç–æ—Ä—ã–π —Å–Ω–∞—á–∞–ª–∞ –ø–∞–¥–∞–µ—Ç, –ø–æ—Ç–æ–º —Ä–∞–±–æ—Ç–∞–µ—Ç
        call_count = 0
        
        async def flaky_service_method():
            nonlocal call_count
            call_count += 1
            if call_count == 1:
                raise Exception("Temporary error")
            return "Service OK"
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å retry –ª–æ–≥–∏–∫–æ–π
        async def resilient_handler(message: Message):
            max_retries = 3
            for attempt in range(max_retries):
                try:
                    result = await flaky_service_method()
                    await message.answer(f"‚úÖ {result}")
                    return
                except Exception as e:
                    if attempt == max_retries - 1:
                        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫: {e}")
                    else:
                        continue  # Retry
        
        await resilient_handler(message)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤ –∏—Ç–æ–≥–µ –ø–æ–ª—É—á–∏–ª–∏ —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        message.answer.assert_called_once_with("‚úÖ Service OK")
