"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
"""

import pytest
from unittest.mock import AsyncMock, MagicMock, patch
from aiogram import Dispatcher, F, Router
from aiogram.types import Message, Update, User, Chat

from app.middlewares.di_middleware import DIMiddleware
from app.middlewares.ratelimit import RateLimitMiddleware
from app.middlewares.validation import ValidationMiddleware


class TestBotCommandsFlow:
    """–¢–µ—Å—Ç—ã –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥"""

    @pytest.mark.asyncio
    async def test_help_command_full_flow(self, test_dispatcher, mock_bot, test_config, create_test_message, create_test_update):
        """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é —Ñ–∞–±—Ä–∏–∫–∏
        message = create_test_message(
            text="/help",
            user_id=987654321,  # –ê–¥–º–∏–Ω ID
            is_admin=True
        )
        
        # –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º
        router = Router()
        help_responses = []
        
        @router.message(F.text == "/help")
        async def help_handler(
            msg: Message,
            help_service=None,
            admin_id: int = None
        ):
            # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É HelpService
            if admin_id and admin_id in [123456789, 987654321]:
                help_text = "üìö **–ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:**\n\n/status - —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞\n/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"
            else:
                help_text = "üìö **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:**\n\n/help - —Å–ø—Ä–∞–≤–∫–∞"
            
            help_responses.append(help_text)
            await msg.answer(help_text)
        
        test_dispatcher.include_router(router)
        
        # –°–æ–∑–¥–∞–µ–º Update
        update = create_test_update(message=message)
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è middleware
        with patch('app.middlewares.di_middleware.DIMiddleware._initialize_services') as mock_init_services:
            # –ú–æ–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Å–µ—Ä–≤–∏—Å–æ–≤
            async def mock_init(data):
                data['help_service'] = MagicMock()
                data['admin_id'] = 987654321
            
            mock_init_services.side_effect = mock_init
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É
            await test_dispatcher.feed_update(bot=mock_bot, update=update)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            assert len(help_responses) == 1
            assert "–ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã" in help_responses[0]
            message.answer.assert_called_once()

    @pytest.mark.asyncio
    async def test_status_command_full_flow(self, test_dispatcher, mock_bot, test_config, create_test_message, test_admin_user, test_private_chat):
        """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –∫–æ–º–∞–Ω–¥—ã /status"""
        message = create_test_message(
            text="/status",
            user=test_admin_user,
            chat=test_private_chat
        )
        
        router = Router()
        status_responses = []
        
        @router.message(F.text == "/status")
        async def status_handler(
            msg: Message,
            status_service=None,
            admin_id: int = None
        ):
            # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É StatusService
            status_text = (
                "ü§ñ **–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞**\n\n"
                "‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω\n"
                f"üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {admin_id}\n"
                "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: OK"
            )
            
            status_responses.append(status_text)
            await msg.answer(status_text)
        
        test_dispatcher.include_router(router)
        message.answer = AsyncMock()
        
        update = Update(update_id=2, message=message)
        
        with patch('app.middlewares.di_middleware.DIMiddleware._initialize_services') as mock_init_services:
            async def mock_init(data):
                data['status_service'] = MagicMock()
                data['admin_id'] = test_admin_user.id
            
            mock_init_services.side_effect = mock_init
            
            await test_dispatcher.feed_update(bot=mock_bot, update=update)
            
            assert len(status_responses) == 1
            assert "–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω" in status_responses[0]
            assert str(test_admin_user.id) in status_responses[0]

    @pytest.mark.asyncio
    async def test_ban_command_full_flow(self, test_dispatcher, mock_bot, test_config, create_test_message, test_admin_user, test_chat):
        """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –∫–æ–º–∞–Ω–¥—ã –±–∞–Ω–∞"""
        message = create_test_message(
            text="/ban 123456789 –°–ø–∞–º –≤ —á–∞—Ç–µ",
            user=test_admin_user,
            chat=test_chat
        )
        
        router = Router()
        ban_results = []
        
        @router.message(F.text.startswith("/ban"))
        async def ban_handler(
            msg: Message,
            moderation_service=None,
            admin_id: int = None
        ):
            # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É
            parts = msg.text.split()
            if len(parts) < 2:
                await msg.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ban <user_id> [–ø—Ä–∏—á–∏–Ω–∞]")
                return
            
            try:
                user_id = int(parts[1])
                reason = " ".join(parts[2:]) if len(parts) > 2 else "–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª"
                
                # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É ModerationService
                ban_success = True  # –ú–æ–∫–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –±–∞–Ω
                
                if ban_success:
                    result_text = f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–∞–Ω–µ–Ω\n–ü—Ä–∏—á–∏–Ω–∞: {reason}"
                    ban_results.append(('success', user_id, reason))
                else:
                    result_text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}"
                    ban_results.append(('error', user_id, reason))
                
                await msg.answer(result_text)
                
            except ValueError:
                await msg.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                ban_results.append(('invalid_id', None, None))
        
        test_dispatcher.include_router(router)
        message.answer = AsyncMock()
        
        update = Update(update_id=3, message=message)
        
        with patch('app.middlewares.di_middleware.DIMiddleware._initialize_services') as mock_init_services:
            async def mock_init(data):
                data['moderation_service'] = MagicMock()
                data['admin_id'] = test_admin_user.id
            
            mock_init_services.side_effect = mock_init
            
            await test_dispatcher.feed_update(bot=mock_bot, update=update)
            
            assert len(ban_results) == 1
            assert ban_results[0][0] == 'success'
            assert ban_results[0][1] == 123456789
            assert ban_results[0][2] == "–°–ø–∞–º –≤ —á–∞—Ç–µ"

    @pytest.mark.asyncio
    async def test_invalid_command_handling(self, test_dispatcher, mock_bot, test_config, create_test_message, test_user, test_private_chat):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
        message = create_test_message(
            text="/nonexistent_command",
            user=test_user,
            chat=test_private_chat
        )
        
        router = Router()
        unknown_commands = []
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
        @router.message(F.text.startswith("/"))
        async def unknown_command_handler(msg: Message):
            unknown_commands.append(msg.text)
            await msg.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏.")
        
        test_dispatcher.include_router(router)
        message.answer = AsyncMock()
        
        update = Update(update_id=4, message=message)
        
        await test_dispatcher.feed_update(bot=mock_bot, update=update)
        
        assert len(unknown_commands) == 1
        assert unknown_commands[0] == "/nonexistent_command"

    @pytest.mark.asyncio
    async def test_rate_limiting_in_command_flow(self, test_config, mock_bot, create_test_message, test_user, test_private_chat):
        """–¢–µ—Å—Ç rate limiting –≤ –ø–æ—Ç–æ–∫–µ –∫–æ–º–∞–Ω–¥"""
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä —Å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º rate limiting
        dp = Dispatcher()
        dp.message.middleware(RateLimitMiddleware(
            user_limit=2,  # –¢–æ–ª—å–∫–æ 2 —Å–æ–æ–±—â–µ–Ω–∏—è
            admin_limit=10,
            interval=60
        ))
        
        router = Router()
        processed_commands = []
        
        @router.message(F.text.startswith("/test"))
        async def test_command_handler(msg: Message):
            processed_commands.append(msg.text)
            await msg.answer(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: {msg.text}")
        
        dp.include_router(router)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥ –ø–æ–¥—Ä—è–¥
        for i in range(5):
            message = create_test_message(
                text=f"/test{i}",
                user=test_user,
                chat=test_private_chat
            )
            message.answer = AsyncMock()
            
            update = Update(update_id=10+i, message=message)
            
            try:
                await dp.feed_update(bot=mock_bot, update=update)
            except Exception as e:
                # Rate limiting –º–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏—è
                print(f"Rate limit exception (expected): {e}")
        
        # –ü–µ—Ä–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–æ–π—Ç–∏, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã
        print(f"Processed commands: {len(processed_commands)}")
        assert len(processed_commands) <= 2  # –ù–µ –±–æ–ª—å—à–µ –ª–∏–º–∏—Ç–∞

    @pytest.mark.asyncio
    async def test_validation_in_command_flow(self, test_dispatcher, mock_bot, test_config, create_test_message, test_user, test_private_chat):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤ –ø–æ—Ç–æ–∫–µ –∫–æ–º–∞–Ω–¥"""
        # –ö–æ–º–∞–Ω–¥–∞ —Å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
        suspicious_message = create_test_message(
            text="/help <script>alert('xss')</script>",
            user=test_user,
            chat=test_private_chat
        )
        
        # –ù–æ—Ä–º–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
        normal_message = create_test_message(
            text="/help",
            user=test_user,
            chat=test_private_chat
        )
        
        router = Router()
        processed_messages = []
        
        @router.message(F.text.startswith("/help"))
        async def help_handler(msg: Message):
            processed_messages.append(msg.text)
            await msg.answer("–°–ø—Ä–∞–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
        
        test_dispatcher.include_router(router)
        
        # –ú–æ–∫–∞–µ–º –≤–∞–ª–∏–¥–∞—Ç–æ—Ä –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        with patch('app.middlewares.validation.input_validator') as mock_validator:
            def validate_side_effect(message):
                if "<script>" in message.text:
                    return [MagicMock(severity=MagicMock(CRITICAL=4))]
                return []
            
            mock_validator.validate_message.side_effect = validate_side_effect
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            suspicious_message.answer = AsyncMock()
            suspicious_update = Update(update_id=20, message=suspicious_message)
            
            await test_dispatcher.feed_update(bot=mock_bot, update=suspicious_update)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            normal_message.answer = AsyncMock()
            normal_update = Update(update_id=21, message=normal_message)
            
            await test_dispatcher.feed_update(bot=mock_bot, update=normal_update)
        
        # –¢–æ–ª—å–∫–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
        print(f"Processed messages: {processed_messages}")
        # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è

    @pytest.mark.asyncio
    async def test_admin_vs_user_command_access(self, test_dispatcher, mock_bot, test_config, create_test_message, test_user, test_admin_user, test_private_chat):
        """–¢–µ—Å—Ç —Ä–∞–∑–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–∞–º"""
        router = Router()
        command_access_log = []
        
        @router.message(F.text == "/admin_command")
        async def admin_command_handler(
            msg: Message,
            admin_id: int = None
        ):
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            if msg.from_user and msg.from_user.id == admin_id:
                command_access_log.append(('admin_access', msg.from_user.id))
                await msg.answer("‚úÖ –ê–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
            else:
                command_access_log.append(('access_denied', msg.from_user.id if msg.from_user else None))
                await msg.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã")
        
        test_dispatcher.include_router(router)
        
        # –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–∞ –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_message = create_test_message(
            text="/admin_command",
            user=test_user,
            chat=test_private_chat
        )
        user_message.answer = AsyncMock()
        
        # –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        admin_message = create_test_message(
            text="/admin_command",
            user=test_admin_user,
            chat=test_private_chat
        )
        admin_message.answer = AsyncMock()
        
        with patch('app.middlewares.di_middleware.DIMiddleware._initialize_services') as mock_init_services:
            async def mock_init(data):
                data['admin_id'] = test_admin_user.id  # ID –∞–¥–º–∏–Ω–∞
            
            mock_init_services.side_effect = mock_init
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_update = Update(update_id=30, message=user_message)
            await test_dispatcher.feed_update(bot=mock_bot, update=user_update)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É –æ—Ç –∞–¥–º–∏–Ω–∞
            admin_update = Update(update_id=31, message=admin_message)
            await test_dispatcher.feed_update(bot=mock_bot, update=admin_update)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        assert len(command_access_log) == 2
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ
        user_log = next((log for log in command_access_log if log[1] == test_user.id), None)
        assert user_log and user_log[0] == 'access_denied'
        
        # –ê–¥–º–∏–Ω—É –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –¥–æ—Å—Ç—É–ø
        admin_log = next((log for log in command_access_log if log[1] == test_admin_user.id), None)
        assert admin_log and admin_log[0] == 'admin_access'

    @pytest.mark.asyncio
    async def test_error_handling_in_command_flow(self, test_dispatcher, mock_bot, test_config, create_test_message, test_admin_user, test_private_chat):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤ –ø–æ—Ç–æ–∫–µ –∫–æ–º–∞–Ω–¥"""
        message = create_test_message(
            text="/failing_command",
            user=test_admin_user,
            chat=test_private_chat
        )
        
        router = Router()
        error_log = []
        
        @router.message(F.text == "/failing_command")
        async def failing_handler(msg: Message):
            try:
                # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –≤ —Å–µ—Ä–≤–∏—Å–µ
                raise ValueError("Service unavailable")
            except Exception as e:
                error_log.append(str(e))
                await msg.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        
        test_dispatcher.include_router(router)
        message.answer = AsyncMock()
        
        update = Update(update_id=40, message=message)
        
        await test_dispatcher.feed_update(bot=mock_bot, update=update)
        
        # –û—à–∏–±–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ gracefully
        assert len(error_log) == 1
        assert "Service unavailable" in error_log[0]
        message.answer.assert_called_once()

    @pytest.mark.asyncio
    async def test_complex_command_with_parameters(self, test_dispatcher, mock_bot, test_config, create_test_message, test_admin_user, test_chat):
        """–¢–µ—Å—Ç —Å–ª–æ–∂–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
        message = create_test_message(
            text="/config set max_messages 15",
            user=test_admin_user,
            chat=test_chat
        )
        
        router = Router()
        config_changes = []
        
        @router.message(F.text.startswith("/config"))
        async def config_handler(
            msg: Message,
            admin_id: int = None
        ):
            parts = msg.text.split()
            
            if len(parts) < 2:
                await msg.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /config <action> [–ø–∞—Ä–∞–º–µ—Ç—Ä—ã]")
                return
            
            action = parts[1]
            
            if action == "set" and len(parts) >= 4:
                param_name = parts[2]
                param_value = parts[3]
                
                # –°–∏–º—É–ª–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                config_changes.append((param_name, param_value))
                await msg.answer(f"‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä {param_name} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ {param_value}")
            
            elif action == "get" and len(parts) >= 3:
                param_name = parts[2]
                # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
                await msg.answer(f"üìã {param_name}: —Ç–µ–∫—É—â–µ–µ_–∑–Ω–∞—á–µ–Ω–∏–µ")
            
            else:
                await msg.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–∞–Ω–¥—ã")
        
        test_dispatcher.include_router(router)
        message.answer = AsyncMock()
        
        update = Update(update_id=50, message=message)
        
        with patch('app.middlewares.di_middleware.DIMiddleware._initialize_services') as mock_init_services:
            async def mock_init(data):
                data['admin_id'] = test_admin_user.id
            
            mock_init_services.side_effect = mock_init
            
            await test_dispatcher.feed_update(bot=mock_bot, update=update)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±—ã–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–∞
        assert len(config_changes) == 1
        assert config_changes[0] == ("max_messages", "15")

    @pytest.mark.asyncio
    async def test_callback_query_flow(self, test_dispatcher, mock_bot, test_config, test_admin_user):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback query"""
        from aiogram.types import CallbackQuery
        
        # –°–æ–∑–¥–∞–µ–º callback query
        callback_query = CallbackQuery(
            id="test_callback_123",
            from_user=test_admin_user,
            chat_instance="test_chat_instance",
            data="spam_stats"
        )
        
        # –ú–æ–∫–∞–µ–º message –¥–ª—è callback
        callback_query.message = MagicMock()
        callback_query.message.edit_text = AsyncMock()
        
        router = Router()
        callback_processed = []
        
        @router.callback_query(F.data == "spam_stats")
        async def spam_stats_callback(callback: CallbackQuery):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
            if callback.from_user.id == test_admin_user.id:
                callback_processed.append(callback.data)
                await callback.message.edit_text("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–ø–∞–º–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            else:
                await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        
        test_dispatcher.include_router(router)
        
        # –°–æ–∑–¥–∞–µ–º Update —Å callback query
        update = Update(update_id=60, callback_query=callback_query)
        
        await test_dispatcher.feed_update(bot=mock_bot, update=update)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ callback –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω
        assert len(callback_processed) == 1
        assert callback_processed[0] == "spam_stats"
        callback_query.message.edit_text.assert_called_once()


class TestEndToEndScenarios:
    """–¢–µ—Å—Ç—ã —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ end-to-end"""

    @pytest.mark.asyncio
    async def test_complete_moderation_workflow(self, test_dispatcher, mock_bot, test_config, create_test_message, test_admin_user, test_chat):
        """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ workflow –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        router = Router()
        workflow_steps = []
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç—É—Å–∞
        @router.message(F.text == "/status")
        async def status_handler(msg: Message):
            workflow_steps.append("status_checked")
            await msg.answer("‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω, –≥–æ—Ç–æ–≤ –∫ –º–æ–¥–µ—Ä–∞—Ü–∏–∏")
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–∞–Ω–∞
        @router.message(F.text.startswith("/ban"))
        async def ban_handler(msg: Message):
            parts = msg.text.split()
            if len(parts) >= 2:
                user_id = parts[1]
                workflow_steps.append(f"user_banned_{user_id}")
                await msg.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–∞–Ω–µ–Ω")
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ø–∏—Å–∫–∞ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö
        @router.message(F.text == "/banned")
        async def banned_list_handler(msg: Message):
            workflow_steps.append("banned_list_requested")
            await msg.answer("üìã –°–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: 123456789")
        
        test_dispatcher.include_router(router)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–Ω—ã–π workflow
        commands = [
            "/status",
            "/ban 123456789 Spam",
            "/banned"
        ]
        
        for i, command_text in enumerate(commands):
            message = create_test_message(
                text=command_text,
                user=test_admin_user,
                chat=test_chat
            )
            message.answer = AsyncMock()
            
            update = Update(update_id=70+i, message=message)
            await test_dispatcher.feed_update(bot=mock_bot, update=update)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–µ—Å—å workflow –≤—ã–ø–æ–ª–Ω–µ–Ω
        expected_steps = ["status_checked", "user_banned_123456789", "banned_list_requested"]
        assert workflow_steps == expected_steps

    @pytest.mark.asyncio
    async def test_user_journey_from_help_to_action(self, test_dispatcher, mock_bot, test_config, create_test_message, test_admin_user, test_private_chat):
        """–¢–µ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø—É—Ç–∏ –æ—Ç —Å–ø—Ä–∞–≤–∫–∏ –¥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
        router = Router()
        user_journey = []
        
        @router.message(F.text == "/help")
        async def help_handler(msg: Message):
            user_journey.append("help_requested")
            help_text = (
                "üìö **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n\n"
                "/status - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞\n"
                "/settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
                "/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"
            )
            await msg.answer(help_text)
        
        @router.message(F.text == "/settings")
        async def settings_handler(msg: Message):
            user_journey.append("settings_opened")
            await msg.answer("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞")
        
        test_dispatcher.include_router(router)
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—É—Ç—å
        journey_commands = ["/help", "/settings"]
        
        for i, command in enumerate(journey_commands):
            message = create_test_message(
                text=command,
                user=test_admin_user,
                chat=test_private_chat
            )
            message.answer = AsyncMock()
            
            update = Update(update_id=80+i, message=message)
            await test_dispatcher.feed_update(bot=mock_bot, update=update)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—É—Ç—å
        assert user_journey == ["help_requested", "settings_opened"]
