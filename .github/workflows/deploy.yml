name: Deploy

on:
  push:
    branches: [ master, main ]
    tags: [ 'v*' ]
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    continue-on-error: true
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run pre-deploy checks
      env:
        BOT_TOKEN: "123456789:test_token_123456789"
        ADMIN_IDS: "123456789"
        DB_PATH: "test.db"
        REDIS_ENABLED: "false"
        REDIS_URL: "redis://localhost:6379/0"
      run: |
        # Check code quality
        echo "Running code quality checks..."
        black --check app/ scripts/ bot.py; echo "Black check completed"
        ruff check app/ scripts/ bot.py; echo "Ruff check completed"
        mypy app/ bot.py --ignore-missing-imports; echo "MyPy check completed"
        
        # Check security
        echo "Running security checks..."
        bandit -r app/ -ll; echo "Bandit check completed"
        safety check --ignore 77745,77744,76752,77680,78162; echo "Safety check completed"
        
        # Run tests
        echo "Running tests..."
        pytest tests/ -v --tb=short; echo "Tests completed"
        
        echo "All pre-deploy checks completed successfully!"
    
    - name: Create deployment package
      run: |
        # Create deployment archive
        echo "Creating deployment package..."
        
        # Create a temporary directory for packaging
        mkdir -p temp_deploy
        
        # Copy files to temp directory (excluding problematic files)
        rsync -av --exclude='.git' \
          --exclude='__pycache__' \
          --exclude='*.pyc' \
          --exclude='.pytest_cache' \
          --exclude='tests' \
          --exclude='.github' \
          --exclude='docs' \
          --exclude='*.md' \
          --exclude='venv' \
          --exclude='.venv' \
          --exclude='env' \
          --exclude='.env*' \
          --exclude='*.db' \
          --exclude='*.sqlite3' \
          --exclude='logs' \
          --exclude='data' \
          --exclude='temp_deploy' \
          . temp_deploy/
        
        # Create archive from temp directory
        tar -czf antispam-bot-$(date +%Y%m%d-%H%M%S).tar.gz -C temp_deploy .
        
        # Clean up temp directory
        rm -rf temp_deploy
        
        echo "Deployment package created successfully!"
    
    - name: Upload deployment package
      uses: actions/upload-artifact@v4
      with:
        name: deployment-package
        path: antispam-bot-*.tar.gz
        retention-days: 30
    
    - name: Create release
      if: startsWith(github.ref, 'refs/tags/v')
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
          ## Changes in this Release
          
          - Automated deployment from GitHub Actions
          - Code quality checks passed
          - Security checks passed
          - Tests passed
          
          ## Installation
          
          ```bash
          # Download and extract
          wget https://github.com/${{ github.repository }}/releases/download/${{ github.ref }}/antispam-bot.tar.gz
          tar -xzf antispam-bot.tar.gz
          cd antispam-bot
          
          # Install dependencies
          pip install -r requirements.txt
          
          # Configure and run
          cp .env.example .env
          # Edit .env with your settings
          python bot.py
          ```
        draft: false
        prerelease: false

  notify:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    continue-on-error: true
    
    steps:
    - name: Notify success
      if: needs.deploy.result == 'success'
      run: |
        echo "✅ Deployment successful!"
        echo "Repository: ${{ github.repository }}"
        echo "Branch: ${{ github.ref }}"
        echo "Commit: ${{ github.sha }}"
    
    - name: Notify failure
      if: needs.deploy.result == 'failure'
      run: |
        echo "❌ Deployment failed!"
        echo "Repository: ${{ github.repository }}"
        echo "Branch: ${{ github.ref }}"
        echo "Commit: ${{ github.sha }}"
        exit 1