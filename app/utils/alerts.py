"""
–°–∏—Å—Ç–µ–º–∞ –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–æ—Ç–∞
"""

import asyncio
import logging
from dataclasses import dataclass
from datetime import datetime, timedelta
from enum import Enum
from typing import Any, Callable, Dict, List, Optional

from app.config import load_config

logger = logging.getLogger(__name__)


class AlertLevel(Enum):
    """–£—Ä–æ–≤–Ω–∏ –∞–ª–µ—Ä—Ç–æ–≤."""

    INFO = "info"
    WARNING = "warning"
    ERROR = "error"
    CRITICAL = "critical"


@dataclass
class Alert:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∞–ª–µ—Ä—Ç–∞."""

    level: AlertLevel
    title: str
    message: str
    timestamp: datetime
    source: str
    data: Optional[Dict[str, Any]] = None


class AlertManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∞–ª–µ—Ä—Ç–æ–≤."""

    def __init__(self):
        self.alerts: List[Alert] = []
        self.alert_handlers: List[Callable[[Alert], None]] = []
        self.rate_limits: Dict[str, datetime] = {}
        self.config = load_config()

    def add_handler(self, handler: Callable[[Alert], None]):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–ª–µ—Ä—Ç–æ–≤."""
        self.alert_handlers.append(handler)

    async def send_alert(self, alert: Alert):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–ª–µ—Ä—Ç."""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limit
        if self._is_rate_limited(alert):
            logger.debug(f"Alert rate limited: {alert.title}")
            return

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫
        self.alerts.append(alert)

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–ª–µ—Ä—Ç–æ–≤
        if len(self.alerts) > 1000:
            self.alerts = self.alerts[-500:]

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º
        for handler in self.alert_handlers:
            try:
                if asyncio.iscoroutinefunction(handler):
                    await handler(alert)
                else:
                    handler(alert)
            except Exception as e:
                logger.error(f"Error in alert handler: {e}")

        logger.info(f"Alert sent: {alert.level.value} - {alert.title}")

    def _is_rate_limited(self, alert: Alert) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç rate limit –¥–ª—è –∞–ª–µ—Ä—Ç–∞."""
        key = f"{alert.source}:{alert.level.value}"
        now = datetime.now()

        if key in self.rate_limits:
            last_alert = self.rate_limits[key]
            # Rate limit: 1 –∞–ª–µ—Ä—Ç –≤ –º–∏–Ω—É—Ç—É –¥–ª—è –æ–¥–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∏ —É—Ä–æ–≤–Ω—è
            if now - last_alert < timedelta(minutes=1):
                return True

        self.rate_limits[key] = now
        return False

    def create_alert(
        self, level: AlertLevel, title: str, message: str, source: str, data: Optional[Dict[str, Any]] = None
    ) -> Alert:
        """–°–æ–∑–¥–∞–µ—Ç –∞–ª–µ—Ä—Ç."""
        return Alert(level=level, title=title, message=message, timestamp=datetime.now(), source=source, data=data)

    async def alert_bot_started(self, commit_id: str):
        """–ê–ª–µ—Ä—Ç –æ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞."""
        alert = self.create_alert(
            level=AlertLevel.INFO,
            title="ü§ñ Bot Started",
            message=f"AntiSpam Bot started successfully. Commit: {commit_id}",
            source="bot_startup",
            data={"commit_id": commit_id},
        )
        await self.send_alert(alert)

    async def alert_bot_stopped(self, reason: str = "Unknown"):
        """–ê–ª–µ—Ä—Ç –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞."""
        alert = self.create_alert(
            level=AlertLevel.WARNING,
            title="üõë Bot Stopped",
            message=f"AntiSpam Bot stopped. Reason: {reason}",
            source="bot_shutdown",
            data={"reason": reason},
        )
        await self.send_alert(alert)

    async def alert_high_cpu_usage(self, cpu_percent: float):
        """–ê–ª–µ—Ä—Ç –æ –≤—ã—Å–æ–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–µ CPU."""
        alert = self.create_alert(
            level=AlertLevel.WARNING,
            title="‚ö†Ô∏è High CPU Usage",
            message=f"CPU usage is {cpu_percent:.1f}%",
            source="system_monitor",
            data={"cpu_percent": cpu_percent},
        )
        await self.send_alert(alert)

    async def alert_high_memory_usage(self, memory_percent: float):
        """–ê–ª–µ—Ä—Ç –æ –≤—ã—Å–æ–∫–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –ø–∞–º—è—Ç–∏."""
        alert = self.create_alert(
            level=AlertLevel.WARNING,
            title="‚ö†Ô∏è High Memory Usage",
            message=f"Memory usage is {memory_percent:.1f}%",
            source="system_monitor",
            data={"memory_percent": memory_percent},
        )
        await self.send_alert(alert)

    async def alert_database_error(self, error: str):
        """–ê–ª–µ—Ä—Ç –æ–± –æ—à–∏–±–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
        alert = self.create_alert(
            level=AlertLevel.ERROR,
            title="‚ùå Database Error",
            message=f"Database error: {error}",
            source="database",
            data={"error": error},
        )
        await self.send_alert(alert)

    async def alert_redis_error(self, error: str):
        """–ê–ª–µ—Ä—Ç –æ–± –æ—à–∏–±–∫–µ Redis."""
        alert = self.create_alert(
            level=AlertLevel.ERROR,
            title="‚ùå Redis Error",
            message=f"Redis error: {error}",
            source="redis",
            data={"error": error},
        )
        await self.send_alert(alert)

    async def alert_telegram_error(self, error: str):
        """–ê–ª–µ—Ä—Ç –æ–± –æ—à–∏–±–∫–µ Telegram API."""
        alert = self.create_alert(
            level=AlertLevel.ERROR,
            title="‚ùå Telegram API Error",
            message=f"Telegram API error: {error}",
            source="telegram_api",
            data={"error": error},
        )
        await self.send_alert(alert)

    async def alert_suspicious_activity(self, user_id: int, reason: str):
        """–ê–ª–µ—Ä—Ç –æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏."""
        alert = self.create_alert(
            level=AlertLevel.WARNING,
            title="üîç Suspicious Activity",
            message=f"Suspicious activity detected from user {user_id}: {reason}",
            source="antispam",
            data={"user_id": user_id, "reason": reason},
        )
        await self.send_alert(alert)

    def get_recent_alerts(self, hours: int = 24) -> List[Alert]:
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–µ–¥–∞–≤–Ω–∏–µ –∞–ª–µ—Ä—Ç—ã."""
        cutoff = datetime.now() - timedelta(hours=hours)
        return [alert for alert in self.alerts if alert.timestamp > cutoff]

    def get_alert_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–ª–µ—Ä—Ç–æ–≤."""
        recent_alerts = self.get_recent_alerts(24)

        stats = {
            "total_alerts_24h": len(recent_alerts),
            "by_level": {},
            "by_source": {},
            "recent_critical": len([a for a in recent_alerts if a.level == AlertLevel.CRITICAL]),
        }

        for alert in recent_alerts:
            level = alert.level.value
            source = alert.source

            stats["by_level"][level] = stats["by_level"].get(level, 0) + 1
            stats["by_source"][source] = stats["by_source"].get(source, 0) + 1

        return stats


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∞–ª–µ—Ä—Ç–æ–≤
alert_manager = AlertManager()


async def telegram_alert_handler(alert: Alert):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–ª–µ—Ä—Ç–æ–≤ —á–µ—Ä–µ–∑ Telegram."""
    try:
        from aiogram import Bot

        from app.config import load_config

        config = load_config()
        bot = Bot(token=config.bot_token)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        emoji_map = {AlertLevel.INFO: "‚ÑπÔ∏è", AlertLevel.WARNING: "‚ö†Ô∏è", AlertLevel.ERROR: "‚ùå", AlertLevel.CRITICAL: "üö®"}

        emoji = emoji_map.get(alert.level, "üì¢")
        message = f"{emoji} <b>{alert.title}</b>\n\n{alert.message}\n\n<i>Source: {alert.source}</i>"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∞–º
        for admin_id in config.admin_ids_list:
            try:
                await bot.send_message(admin_id, message)
            except Exception as e:
                logger.error(f"Failed to send alert to admin {admin_id}: {e}")

        await bot.session.close()

    except Exception as e:
        logger.error(f"Error in telegram alert handler: {e}")


def setup_alerts():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É –∞–ª–µ—Ä—Ç–æ–≤."""
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ Telegram
    alert_manager.add_handler(telegram_alert_handler)

    logger.info("Alert system configured")


def get_alert_manager() -> AlertManager:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∞–ª–µ—Ä—Ç–æ–≤."""
    return alert_manager
