"""
Graceful shutdown utilities –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
"""

import asyncio
import logging
import signal
import sys
from typing import Any, Callable, List, Optional

from aiogram import Bot, Dispatcher

logger = logging.getLogger(__name__)


class GracefulShutdown:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä graceful shutdown –¥–ª—è –±–æ—Ç–∞."""

    def __init__(self, bot: Bot, dispatcher: Dispatcher, admin_ids: List[int]):
        self.bot = bot
        self.dispatcher = dispatcher
        self.admin_ids = admin_ids
        self.shutdown_callbacks: List[Callable] = []
        self.is_shutting_down = False
        self._shutdown_event = asyncio.Event()

    def add_shutdown_callback(self, callback: Callable) -> None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç callback –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏ shutdown."""
        self.shutdown_callbacks.append(callback)

    async def notify_admins(self, message: str) -> None:
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–æ–≤ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –±–æ—Ç–∞."""
        for admin_id in self.admin_ids:
            try:
                await self.bot.send_message(admin_id, message)
                logger.info(f"Notification sent to admin {admin_id}")
            except Exception as e:
                logger.error(f"Failed to notify admin {admin_id}: {e}")

    async def startup_notification(self) -> None:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞."""
        message = "ü§ñ <b>AntiSpam Bot –∑–∞–ø—É—â–µ–Ω</b>\n\n" "‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ\n" "üõ°Ô∏è –ê–Ω—Ç–∏—Å–ø–∞–º –∞–∫—Ç–∏–≤–µ–Ω\n" "üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤–∫–ª—é—á–µ–Ω"
        await self.notify_admins(message)
        logger.info("Startup notification sent to admins")

    async def shutdown_notification(self) -> None:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞."""
        message = (
            "üõë <b>AntiSpam Bot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>\n\n"
            "‚ö†Ô∏è –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É\n"
            "üîÑ Graceful shutdown –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ\n"
            "‚è∞ –û–∂–∏–¥–∞–π—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è..."
        )
        await self.notify_admins(message)
        logger.info("Shutdown notification sent to admins")

    async def execute_shutdown_callbacks(self) -> None:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Å–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ shutdown callbacks."""
        logger.info(f"Executing {len(self.shutdown_callbacks)} shutdown callbacks")

        for callback in self.shutdown_callbacks:
            try:
                if asyncio.iscoroutinefunction(callback):
                    await callback()
                else:
                    callback()
                logger.info(f"Shutdown callback executed: {callback.__name__}")
            except Exception as e:
                logger.error(f"Error in shutdown callback {callback.__name__}: {e}")

    async def graceful_shutdown(self, timeout: int = 30) -> None:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç graceful shutdown —Å timeout."""
        if self.is_shutting_down:
            logger.warning("Shutdown already in progress")
            return

        self.is_shutting_down = True
        logger.info("Starting graceful shutdown...")

        try:
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
            await self.shutdown_notification()

            # –í—ã–ø–æ–ª–Ω—è–µ–º shutdown callbacks
            await self.execute_shutdown_callbacks()

            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º dispatcher (–µ—Å–ª–∏ polling –∑–∞–ø—É—â–µ–Ω)
            logger.info("Stopping dispatcher...")
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è polling
                polling_active = (
                    hasattr(self.dispatcher, "_polling")
                    and self.dispatcher._polling
                    or hasattr(self.dispatcher, "_running")
                    and self.dispatcher._running
                    or hasattr(self.dispatcher, "running")
                    and self.dispatcher.running
                )

                if polling_active:
                    await self.dispatcher.stop_polling()
                    logger.info("Polling stopped successfully")
                else:
                    logger.info("Polling was not started, skipping stop_polling")
            except Exception as e:
                logger.warning(f"Error stopping polling: {e}")

            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞
            logger.info("Closing bot session...")
            await self.bot.session.close()

            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
            logger.info("Closing database connections...")
            try:
                from app.database import engine

                if engine:
                    await engine.dispose()
                    logger.info("Database engine disposed successfully")
                else:
                    logger.warning("Database engine not found")
            except Exception as e:
                logger.error(f"Error disposing database engine: {e}")

            logger.info("Graceful shutdown completed successfully")

        except Exception as e:
            logger.error(f"Error during graceful shutdown: {e}")
        finally:
            self._shutdown_event.set()

    def setup_signal_handlers(self) -> None:
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤."""

        def signal_handler(signum: int, frame: Any) -> None:
            logger.info(f"Received signal {signum}, initiating graceful shutdown...")
            asyncio.create_task(self.graceful_shutdown())

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º SIGTERM –∏ SIGINT
        signal.signal(signal.SIGTERM, signal_handler)
        signal.signal(signal.SIGINT, signal_handler)

        # –î–ª—è Windows –¥–æ–±–∞–≤–ª—è–µ–º SIGBREAK
        if sys.platform == "win32":
            signal.signal(signal.SIGBREAK, signal_handler)

        logger.info("Signal handlers configured for graceful shutdown")

    async def wait_for_shutdown(self) -> None:
        """–û–∂–∏–¥–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è shutdown."""
        await self._shutdown_event.wait()

    def is_shutdown_requested(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—Ä–æ—à–µ–Ω –ª–∏ shutdown."""
        return self.is_shutting_down


async def create_graceful_shutdown(bot: Bot, dispatcher: Dispatcher, admin_ids: List[int]) -> GracefulShutdown:
    """–°–æ–∑–¥–∞–µ—Ç –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç GracefulShutdown."""
    shutdown_manager = GracefulShutdown(bot, dispatcher, admin_ids)
    shutdown_manager.setup_signal_handlers()
    return shutdown_manager
