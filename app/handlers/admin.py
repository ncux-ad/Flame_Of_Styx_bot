"""Admin command handlers."""

import logging

from aiogram import F, Router
from aiogram.filters import Command
from aiogram.types import CallbackQuery, Message

from app.filters.is_admin_or_silent import IsAdminOrSilentFilter
from app.keyboards.inline import get_main_menu_keyboard
from app.keyboards.reply import get_admin_menu_keyboard
from app.services.bots import BotService
from app.services.channels import ChannelService
from app.services.moderation import ModerationService
from app.services.profiles import ProfileService
from app.utils.security import safe_format_message, sanitize_for_logging

logger = logging.getLogger(__name__)

# Create router
admin_router = Router()


@admin_router.message(Command("start"))
async def handle_start_command(message: Message, data: dict = None, **kwargs) -> None:
    """Handle /start command for admins."""
    try:
        logger.info(
            safe_format_message(
                "Start command received from {user_id}",
                user_id=message.from_user.id if message.from_user else 0,
            )
        )

        welcome_text = (
            "ü§ñ <b>AntiSpam Bot</b>\n\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/status - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            "/channels - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏\n"
            "/bots - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞–º–∏\n"
            "/suspicious - –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏\n"
            "/help - –ø–æ–º–æ—â—å"
        )

        await message.answer(welcome_text)
        logger.info(
            safe_format_message(
                "Start command response sent to {user_id}",
                user_id=message.from_user.id if message.from_user else 0,
            )
        )

    except Exception as e:
        logger.error(
            safe_format_message(
                "Error handling start command: {error}", error=sanitize_for_logging(e)
            )
        )


@admin_router.message(Command("status"), IsAdminOrSilentFilter())
async def handle_status_command(message: Message, data: dict = None, **kwargs) -> None:
    """Handle /status command."""
    try:
        # TODO: Get real statistics from database
        status_text = (
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ AntiSpam Bot</b>\n\n"
            f"<b>–ö–∞–Ω–∞–ª—ã:</b>\n"
            f"‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω—ã: 0\n"
            f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã: 0\n"
            f"‚è≥ –û–∂–∏–¥–∞—é—Ç: 0\n\n"
            f"<b>–ë–æ—Ç—ã:</b>\n"
            f"‚úÖ –í whitelist: 0\n\n"
            f"<b>–°—Ç–∞—Ç—É—Å:</b> üü¢ –†–∞–±–æ—Ç–∞–µ—Ç"
        )

        await message.answer(status_text)

    except Exception as e:
        logger.error(f"Error handling status command: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")


@admin_router.message(Command("channels"), IsAdminOrSilentFilter())
async def handle_channels_command(message: Message, data: dict = None, **kwargs) -> None:
    """Handle /channels command."""
    try:
        # Get services from kwargs (aiogram 3.x style)
        channel_service = kwargs.get("channel_service")

        if not channel_service:
            logger.error("Channel service not injected properly")
            await message.answer("‚ùå –û—à–∏–±–∫–∞: —Å–µ—Ä–≤–∏—Å –∫–∞–Ω–∞–ª–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return

        # Get channel lists
        allowed_channels = await channel_service.get_allowed_channels()
        blocked_channels = await channel_service.get_blocked_channels()
        pending_channels = await channel_service.get_pending_channels()

        channels_text = "üìã <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏</b>\n\n"

        if allowed_channels:
            channels_text += "<b>‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:</b>\n"
            for channel in allowed_channels[:10]:  # Show first 10
                channels_text += f"‚Ä¢ {channel.title} (@{channel.username})\n"
            if len(allowed_channels) > 10:
                channels_text += f"... –∏ –µ—â–µ {len(allowed_channels) - 10}\n"
            channels_text += "\n"

        if blocked_channels:
            channels_text += "<b>üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:</b>\n"
            for channel in blocked_channels[:10]:  # Show first 10
                channels_text += f"‚Ä¢ {channel.title} (@{channel.username})\n"
            if len(blocked_channels) > 10:
                channels_text += f"... –∏ –µ—â–µ {len(blocked_channels) - 10}\n"
            channels_text += "\n"

        if pending_channels:
            channels_text += "<b>‚è≥ –û–∂–∏–¥–∞—é—â–∏–µ —Ä–µ—à–µ–Ω–∏—è:</b>\n"
            for channel in pending_channels[:10]:  # Show first 10
                channels_text += f"‚Ä¢ {channel.title} (@{channel.username})\n"
            if len(pending_channels) > 10:
                channels_text += f"... –∏ –µ—â–µ {len(pending_channels) - 10}\n"

        if not any([allowed_channels, blocked_channels, pending_channels]):
            channels_text += "–ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"

        await message.answer(channels_text)

    except Exception as e:
        logger.error(f"Error handling channels command: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤")


@admin_router.message(Command("bots"), IsAdminOrSilentFilter())
async def handle_bots_command(message: Message, data: dict = None, **kwargs) -> None:
    """Handle /bots command."""
    try:
        # Get services from kwargs (aiogram 3.x style)
        bot_service = kwargs.get("bot_service")

        if not bot_service:
            logger.error("Bot service not injected properly")
            await message.answer("‚ùå –û—à–∏–±–∫–∞: —Å–µ—Ä–≤–∏—Å –±–æ—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return

        # Get bot lists
        whitelisted_bots = await bot_service.get_whitelisted_bots()
        all_bots = await bot_service.get_all_bots()

        bots_text = "ü§ñ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞–º–∏</b>\n\n"

        if whitelisted_bots:
            bots_text += "<b>‚úÖ –ë–æ—Ç—ã –≤ whitelist:</b>\n"
            for bot in whitelisted_bots[:10]:  # Show first 10
                bots_text += f"‚Ä¢ @{bot.username}\n"
            if len(whitelisted_bots) > 10:
                bots_text += f"... –∏ –µ—â–µ {len(whitelisted_bots) - 10}\n"
            bots_text += "\n"

        bots_text += f"<b>–í—Å–µ–≥–æ –±–æ—Ç–æ–≤ –≤ –±–∞–∑–µ:</b> {len(all_bots)}\n"
        bots_text += f"<b>–í whitelist:</b> {len(whitelisted_bots)}\n"
        bots_text += f"<b>–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã:</b> {len(all_bots) - len(whitelisted_bots)}"

        await message.answer(bots_text)

    except Exception as e:
        logger.error(f"Error handling bots command: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –±–æ—Ç–æ–≤")


@admin_router.message(Command("suspicious"), IsAdminOrSilentFilter())
async def handle_suspicious_command(message: Message, data: dict = None, **kwargs) -> None:
    """Handle /suspicious command."""
    try:
        # Get services from kwargs (aiogram 3.x style)
        profile_service = kwargs.get("profile_service")

        if not profile_service:
            logger.error("Profile service not injected properly")
            logger.error(f"Available keys in kwargs: {list(kwargs.keys())}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞: —Å–µ—Ä–≤–∏—Å –ø—Ä–æ—Ñ–∏–ª–µ–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return

        # Get suspicious profiles
        suspicious_profiles = await profile_service.get_suspicious_profiles()

        if not suspicious_profiles:
            await message.answer("‚úÖ –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return

        response_text = f"‚ö†Ô∏è <b>–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏</b>\n\n"
        response_text += f"–ù–∞–π–¥–µ–Ω–æ: {len(suspicious_profiles)}\n\n"

        for profile in suspicious_profiles[:10]:  # Show first 10
            response_text += f"‚Ä¢ ID: {profile.user_id}\n"
            if profile.username:
                response_text += f"  Username: @{profile.username}\n"
            response_text += f"  –ü—Ä–∏—á–∏–Ω–∞: {profile.reason}\n"
            response_text += f"  –î–∞—Ç–∞: {profile.created_at.strftime('%Y-%m-%d %H:%M')}\n\n"

        if len(suspicious_profiles) > 10:
            response_text += f"... –∏ –µ—â–µ {len(suspicious_profiles) - 10}\n"

        await message.answer(response_text)

    except Exception as e:
        logger.error(f"Error handling suspicious command: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π")


@admin_router.message(Command("help"))
async def handle_help_command(message: Message, data: dict = None, **kwargs) -> None:
    """Handle /help command."""
    try:
        from app.services.help import HelpService

        help_service = HelpService()

        # Parse command arguments
        command_text = message.text or ""
        args = command_text.split()[1:] if len(command_text.split()) > 1 else []

        if args:
            # Help for specific category
            category = args[0]
            help_text = help_service.get_category_help(
                category, user_id=message.from_user.id if message.from_user else None
            )
        else:
            # Main help
            # Check if user is admin
            from app.filters.is_admin_or_silent import IsAdminOrSilentFilter

            filter_instance = IsAdminOrSilentFilter()
            is_admin = (
                message.from_user.id in filter_instance.admin_ids if message.from_user else False
            )
            help_text = help_service.get_main_help(is_admin=is_admin)

        await message.answer(help_text)

    except Exception as e:
        logger.error(f"Error handling help command: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø—Ä–∞–≤–∫–∏")


@admin_router.message(Command("limits"), IsAdminOrSilentFilter())
async def handle_limits_command(message: Message, data: dict = None, **kwargs) -> None:
    """Handle /limits command to show current rate limits."""
    try:
        from app.config import load_config

        config = load_config()
        admin_ids = config.admin_ids_list

        limits_text = (
            "üìä <b>–¢–µ–∫—É—â–∏–µ –ª–∏–º–∏—Ç—ã Rate Limit</b>\n\n"
            "üë• <b>–û–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"
            "‚Ä¢ 10 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É\n"
            "‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª: 60 —Å–µ–∫—É–Ω–¥\n\n"
            "üëë <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:</b>\n"
            f"‚Ä¢ 100 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É\n"
            f"‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª: 60 —Å–µ–∫—É–Ω–¥\n"
            f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–¥–º–∏–Ω–æ–≤: {len(admin_ids)}\n\n"
            "‚ÑπÔ∏è <i>–õ–∏–º–∏—Ç—ã –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –∫ —Å–æ–æ–±—â–µ–Ω–∏—è–º –∏ callback-–∑–∞–ø—Ä–æ—Å–∞–º</i>"
        )

        await message.answer(limits_text)

    except Exception as e:
        logger.error(f"Error handling limits command: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–∏–º–∏—Ç–∞—Ö")


@admin_router.message(Command("setlimits"), IsAdminOrSilentFilter())
async def handle_setlimits_command(message: Message, data: dict = None, **kwargs) -> None:
    """Handle /setlimits command to change rate limits (super admin only)."""
    try:
        from app.config import load_config

        config = load_config()
        # Only first admin (super admin) can change limits
        if message.from_user.id != config.admin_ids_list[0]:
            await message.answer("‚ùå –¢–æ–ª—å–∫–æ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å –ª–∏–º–∏—Ç—ã")
            return

        # Parse command arguments
        command_text = message.text or ""
        args = command_text.split()[1:] if len(command_text.split()) > 1 else []

        if len(args) < 2:
            help_text = (
                "‚öôÔ∏è <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ Rate Limit</b>\n\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setlimits [user_limit] [admin_limit]\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "‚Ä¢ /setlimits 5 50 - 5 –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, 50 –¥–ª—è –∞–¥–º–∏–Ω–æ–≤\n"
                "‚Ä¢ /setlimits 20 200 - 20 –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, 200 –¥–ª—è –∞–¥–º–∏–Ω–æ–≤\n\n"
                "‚ö†Ô∏è <i>–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø—è—Ç –≤ —Å–∏–ª—É –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞</i>"
            )
            await message.answer(help_text)
            return

        try:
            user_limit = int(args[0])
            admin_limit = int(args[1])

            if user_limit < 1 or admin_limit < 1:
                await message.answer("‚ùå –õ–∏–º–∏—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
                return

            if user_limit > admin_limit:
                await message.answer("‚ùå –õ–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –ª–∏–º–∏—Ç–∞ –∞–¥–º–∏–Ω–æ–≤")
                return

            # Update limits in bot.py (this would require bot restart)
            success_text = (
                f"‚úÖ <b>–õ–∏–º–∏—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!</b>\n\n"
                f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {user_limit} –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É\n"
                f"üëë –ê–¥–º–∏–Ω—ã: {admin_limit} –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É\n\n"
                f"‚ö†Ô∏è <i>–î–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞</i>"
            )
            await message.answer(success_text)

        except ValueError:
            await message.answer("‚ùå –õ–∏–º–∏—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏")

    except Exception as e:
        logger.error(f"Error handling setlimits command: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–æ–≤")


@admin_router.message(Command("logs"), IsAdminOrSilentFilter())
async def handle_logs_command(message: Message, data: dict = None, **kwargs) -> None:
    """Handle /logs command."""
    try:
        import os
        from datetime import datetime

        # Check if logs directory exists
        logs_dir = "logs"
        if not os.path.exists(logs_dir):
            await message.answer("üìù –õ–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è logs –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            return

        # Get list of log files
        log_files = [f for f in os.listdir(logs_dir) if f.endswith(".log")]

        if not log_files:
            await message.answer("üìù –õ–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ .log –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ logs.")
            return

        # Sort by modification time (newest first)
        log_files.sort(key=lambda x: os.path.getmtime(os.path.join(logs_dir, x)), reverse=True)

        # Get the most recent log file
        latest_log = log_files[0]
        log_path = os.path.join(logs_dir, latest_log)

        # Get file size
        file_size = os.path.getsize(log_path)

        # Read last 50 lines of the log file
        with open(log_path, "r", encoding="utf-8") as f:
            lines = f.readlines()
            last_lines = lines[-50:] if len(lines) > 50 else lines

        # Format log content
        log_content = "".join(last_lines)

        # Truncate if too long for Telegram (4096 chars limit)
        if len(log_content) > 4000:
            log_content = "...\n" + log_content[-4000:]

        response_text = (
            f"üìù <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏</b>\n\n"
            f"üìÅ –§–∞–π–ª: <code>{latest_log}</code>\n"
            f"üìè –†–∞–∑–º–µ—Ä: {file_size:,} –±–∞–π—Ç\n"
            f"üìÖ –û–±–Ω–æ–≤–ª–µ–Ω: {datetime.fromtimestamp(os.path.getmtime(log_path)).strftime('%Y-%m-%d %H:%M:%S')}\n\n"
            f"<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å—Ç—Ä–æ–∫:</b>\n"
            f"<pre>{log_content}</pre>"
        )

        await message.answer(response_text, parse_mode="HTML")

    except Exception as e:
        logger.error(f"Error handling logs command: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–æ–≤")


@admin_router.callback_query(F.data == "admin_stats")
async def handle_admin_stats_callback(callback: CallbackQuery, **kwargs) -> None:
    """Handle admin stats callback."""
    try:
        # Get services from data
        data = kwargs.get("data", {})
        channel_service = data.get("channel_service")
        bot_service = data.get("bot_service")

        if not channel_service or not bot_service:
            logger.error("Services not injected properly")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: —Å–µ—Ä–≤–∏—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            return

        # Get statistics
        allowed_channels = await channel_service.get_allowed_channels()
        blocked_channels = await channel_service.get_blocked_channels()
        pending_channels = await channel_service.get_pending_channels()
        whitelisted_bots = await bot_service.get_whitelisted_bots()

        stats_text = (
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
            f"<b>–ö–∞–Ω–∞–ª—ã:</b>\n"
            f"‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω—ã: {len(allowed_channels)}\n"
            f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã: {len(blocked_channels)}\n"
            f"‚è≥ –û–∂–∏–¥–∞—é—Ç: {len(pending_channels)}\n\n"
            f"<b>–ë–æ—Ç—ã:</b>\n"
            f"‚úÖ –í whitelist: {len(whitelisted_bots)}"
        )

        await callback.message.edit_text(stats_text)
        await callback.answer()

    except Exception as e:
        logger.error(f"Error handling admin stats callback: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")


@admin_router.message(Command("settings"), IsAdminOrSilentFilter())
async def handle_settings_command(message: Message, data: dict = None, **kwargs) -> None:
    """Handle /settings command."""
    try:
        settings_text = (
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ AntiSpam Bot</b>\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
            "‚Ä¢ –õ–∏–º–∏—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π\n"
            "‚Ä¢ –§–∏–ª—å—Ç—Ä—ã —Å–ø–∞–º–∞\n"
            "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setlimits –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–∏–º–∏—Ç–æ–≤."
        )

        await message.answer(settings_text)

    except Exception as e:
        logger.error(f"Error handling settings command: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
