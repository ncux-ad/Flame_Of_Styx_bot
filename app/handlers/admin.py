"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–¥–º–∏–Ω—Å–∫–∏–π —Ä–æ—É—Ç–µ—Ä - —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
"""

import logging
from aiogram import Router
from aiogram.filters import Command
from aiogram.types import CallbackQuery, Message

from app.filters.is_admin_or_silent import IsAdminOrSilentFilter
from app.services.bots import BotService
from app.services.channels import ChannelService
from app.services.help import HelpService
from app.services.limits import LimitsService
from app.services.moderation import ModerationService
from app.models.moderation_log import ModerationAction
from app.services.profiles import ProfileService
from app.utils.error_handling import ValidationError, handle_errors
from app.utils.security import sanitize_for_logging, safe_format_message

logger = logging.getLogger(__name__)

# Create router
admin_router = Router()

# Apply admin filter to all handlers in this router
admin_router.message.filter(IsAdminOrSilentFilter())


@admin_router.message(Command("start"))
@handle_errors(user_message="‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã /start")
async def handle_start_command(
    message: Message,
    moderation_service: ModerationService,
    bot_service: BotService,
    channel_service: ChannelService,
    profile_service: ProfileService,
    admin_id: int,
) -> None:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    if not message.from_user:
        raise ValidationError("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")

    logger.info(f"Admin start command from {sanitize_for_logging(str(message.from_user.id))}")

    welcome_text = (
        "ü§ñ <b>AntiSpam Bot - –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è</b>\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/status - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n"
        "/channels - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏\n"
        "/bots - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞–º–∏\n"
        "/suspicious - –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏\n"
        "/unban - —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "/banned - —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö\n"
        "/sync_bans - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–Ω—ã —Å Telegram\n"
        "/force_unban - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞–∑–±–∞–Ω –ø–æ ID/username\n"
        "/help - –ø–æ–º–æ—â—å"
    )

    await message.answer(welcome_text)
    logger.info(f"Start command response sent to {sanitize_for_logging(str(message.from_user.id))}")


@admin_router.message(Command("status"))
async def handle_status_command(
    message: Message,
    moderation_service: ModerationService,
    bot_service: BotService,
    channel_service: ChannelService,
    admin_id: int,
) -> None:
    """–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞."""
    try:
        if not message.from_user:
            return
        logger.info(f"Status command from {sanitize_for_logging(str(message.from_user.id))}")

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        # total_bots = await bot_service.get_total_bots_count()
        # total_channels = await channel_service.get_total_channels_count()  # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
        banned_users = await moderation_service.get_banned_users(limit=100)
        active_bans = len([ban for ban in banned_users if ban.is_active])

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–ø–∞–º–∞
        spam_stats = await moderation_service.get_spam_statistics()
        deleted_messages = spam_stats["deleted_messages"]
        total_actions = spam_stats["total_actions"]

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–∞—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        try:
            all_channels = await channel_service.get_all_channels()
        except Exception:
            all_channels = []

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫–∞–Ω–∞–ª—ã, –≥–¥–µ –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        connected_channels = []
        for channel in all_channels:
            try:
                telegram_id = int(channel.telegram_id) if channel.telegram_id is not None else 0 if channel.telegram_id is not None else 0
                is_native = await channel_service.is_native_channel(telegram_id)
                if is_native:
                    connected_channels.append(channel)
            except Exception:
                continue

        # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        comment_groups = []
        for channel in all_channels:
            if hasattr(channel, "is_comment_group") and bool(channel.is_comment_group):
                comment_groups.append(
                    {
                        "title": channel.title or f"–ì—Ä—É–ø–ø–∞ {channel.telegram_id}",
                        "chat_id": str(channel.telegram_id),
                        "type": "–ì—Ä—É–ø–ø–∞ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤",
                    }
                )

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–∞—Ö
        channel_info = []

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã (–≥–¥–µ –±–æ—Ç –∞–¥–º–∏–Ω)
        for channel in connected_channels[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
            channel_info.append(f"‚Ä¢ {channel.title} <code>({channel.telegram_id})</code>")
            channel_info.append("  ‚îî –¢–∏–ø: –ö–∞–Ω–∞–ª")
            channel_info.append("  ‚îî –°—Ç–∞—Ç—É—Å: ‚úÖ –ê–Ω—Ç–∏—Å–ø–∞–º –∞–∫—Ç–∏–≤–µ–Ω")

        # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        for chat in comment_groups:
            channel_info.append(f"‚Ä¢ {chat['title']} <code>({chat['chat_id']})</code>")
            channel_info.append(f"  ‚îî –¢–∏–ø: {chat['type']}")
            channel_info.append("  ‚îî –°—Ç–∞—Ç—É—Å: ‚úÖ –ê–Ω—Ç–∏—Å–ø–∞–º –∞–∫—Ç–∏–≤–µ–Ω")

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ (—É–ø—Ä–æ—â—ë–Ω–Ω–æ)
        # bot_username = "FlameOfStyx_bot"  # –ò–∑ –∫–æ–Ω—Ñ–∏–≥–∞ - –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
        bot_id = "7977609078"  # –ò–∑ –ª–æ–≥–æ–≤

        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Ç–æ–≤
        total_connected_chats = len(connected_channels) + len(comment_groups)

        status_text = (
            "üìä <b>–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
            "ü§ñ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:</b>\n"
            "‚Ä¢ Username: @FlameOfStyx_bot\n"
            f"‚Ä¢ ID: <code>{bot_id}</code>\n"
            "‚Ä¢ –°—Ç–∞—Ç—É—Å: ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç\n\n"
            f"üì¢ <b>–ü–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã–µ —á–∞—Ç—ã ({total_connected_chats}):</b>\n"
        )

        if channel_info:
            status_text += "\n".join(channel_info)
            if len(connected_channels) > 5:
                status_text += f"\n‚Ä¢ ... –∏ –µ—â—ë {len(connected_channels) - 5} –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"
        else:
            status_text += "‚Ä¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ —á–∞—Ç—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã\n"
            status_text += "üí° <b>–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —á–∞—Ç–æ–≤:</b>\n"
            status_text += "1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É\n"
            status_text += "2. –î–∞–π—Ç–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
            status_text += "3. –í–∫–ª—é—á–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–æ—Å—Ç–∞–º\n"
            status_text += "4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /channels –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"

        status_text += "\n\nüö´ <b>–ú–æ–¥–µ—Ä–∞—Ü–∏—è:</b>\n"
        status_text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –±–∞–Ω–æ–≤: {active_bans}\n"
        status_text += f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(banned_users)}\n"
        status_text += f"‚Ä¢ –£–¥–∞–ª–µ–Ω–æ —Å–ø–∞–º-—Å–æ–æ–±—â–µ–Ω–∏–π: {deleted_messages}\n"
        status_text += f"‚Ä¢ –í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {total_actions}\n\n"
        status_text += f"üëë <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:</b> <code>{admin_id}</code>"

        await message.answer(status_text)
        logger.info(f"Status response sent to {sanitize_for_logging(str(message.from_user.id))}")

    except Exception as e:
        logger.error(f"Error in status command: {sanitize_for_logging(str(e))}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")


@admin_router.message(Command("channels"))
async def handle_channels_command(
    message: Message,
    channel_service: ChannelService,
    admin_id: int,
) -> None:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏."""
    try:
        if not message.from_user:
            return
        logger.info(f"Channels command from {sanitize_for_logging(str(message.from_user.id))}")

        channels = await channel_service.get_all_channels()

        if not channels:
            await message.answer("üì¢ –ö–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        # –†–∞–∑–¥–µ–ª—è–µ–º –∫–∞–Ω–∞–ª—ã –Ω–∞ –Ω–∞—Ç–∏–≤–Ω—ã–µ –∏ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–µ
        native_channels = []
        foreign_channels = []

        for channel in channels:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–∞–Ω–∞–ª –Ω–∞—Ç–∏–≤–Ω—ã–º (–≥–¥–µ –±–æ—Ç –∞–¥–º–∏–Ω)
            telegram_id = int(channel.telegram_id) if channel.telegram_id is not None else 0
            is_native = await channel_service.is_native_channel(telegram_id)
            if is_native:
                native_channels.append(channel)
            else:
                foreign_channels.append(channel)

        channels_text = "üì¢ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏</b>\n\n"

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—Ç–∏–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã (–≥–¥–µ –±–æ—Ç –∞–¥–º–∏–Ω)
        if native_channels:
            channels_text += f"‚úÖ <b>–ù–∞—Ç–∏–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã ({len(native_channels)})</b>\n"
            channels_text += "<i>–ö–∞–Ω–∞–ª—ã –≥–¥–µ –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º</i>\n\n"

            for channel in native_channels[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –Ω–∞—Ç–∏–≤–Ω—ã—Ö
                username = f"@{channel.username}" if channel.username else "–ë–µ–∑ username"
                channels_text += f"<b>{channel.title or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</b>\n"
                channels_text += f"   ID: <code>{channel.telegram_id}</code> | {username}\n"
                if channel.member_count:
                    channels_text += f"   üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {channel.member_count}\n"
                channels_text += "\n"

            if len(native_channels) > 5:
                channels_text += f"... –∏ –µ—â–µ {len(native_channels) - 5} –Ω–∞—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤\n\n"
            else:
                channels_text += "\n"

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã (–æ—Ç–∫—É–¥–∞ –ø—Ä–∏—Ö–æ–¥—è—Ç —Å–æ–æ–±—â–µ–Ω–∏—è)
        if foreign_channels:
            channels_text += f"üîç <b>–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã ({len(foreign_channels)})</b>\n"
            channels_text += "<i>–ö–∞–Ω–∞–ª—ã –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—Ö–æ–¥—è—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (–±–æ—Ç –Ω–µ –∞–¥–º–∏–Ω)</i>\n\n"

            for channel in foreign_channels[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö
                username = f"@{channel.username}" if channel.username else "–ë–µ–∑ username"
                channels_text += f"<b>{channel.title or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</b>\n"
                channels_text += f"   ID: <code>{channel.telegram_id}</code> | {username}\n"
                if channel.member_count:
                    channels_text += f"   üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {channel.member_count}\n"
                channels_text += "\n"

            if len(foreign_channels) > 5:
                channels_text += f"... –∏ –µ—â–µ {len(foreign_channels) - 5} –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤\n\n"

        # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        comment_groups = []
        for channel in channels:
            if hasattr(channel, "is_comment_group") and bool(channel.is_comment_group):
                comment_groups.append(
                    {
                        "title": channel.title or f"–ì—Ä—É–ø–ø–∞ {channel.telegram_id}",
                        "chat_id": str(channel.telegram_id),
                        "type": "–ì—Ä—É–ø–ø–∞ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤",
                    }
                )

        if comment_groups:
            channels_text += f"\nüí¨ <b>–ì—Ä—É–ø–ø—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ ({len(comment_groups)})</b>\n"
            channels_text += "<i>–ì—Ä—É–ø–ø—ã –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ –ø–æ—Å—Ç–∞–º</i>\n\n"

            for group in comment_groups:
                channels_text += f"<b>{group['title']}</b>\n"
                channels_text += f"   ID: <code>{group['chat_id']}</code>\n"
                channels_text += f"   –¢–∏–ø: {group['type']}\n"
                channels_text += "   –°—Ç–∞—Ç—É—Å: ‚úÖ –ê–Ω—Ç–∏—Å–ø–∞–º –∞–∫—Ç–∏–≤–µ–Ω\n\n"

        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        channels_text += "üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        channels_text += f"‚Ä¢ –ù–∞—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {len(native_channels)}\n"
        channels_text += f"‚Ä¢ –ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {len(foreign_channels)}\n"
        channels_text += f"‚Ä¢ –ì—Ä—É–ø–ø –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {len(comment_groups)}\n"
        channels_text += f"‚Ä¢ –í—Å–µ–≥–æ —á–∞—Ç–æ–≤: {len(channels) + len(comment_groups)}"

        await message.answer(channels_text)
        logger.info(f"Channels response sent to {sanitize_for_logging(str(message.from_user.id))}")

    except Exception as e:
        logger.error(f"Error in channels command: {sanitize_for_logging(str(e))}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤")


@admin_router.message(Command("bots"))
async def handle_bots_command(
    message: Message,
    bot_service: BotService,
    admin_id: int,
) -> None:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞–º–∏."""
    try:
        if not message.from_user:
            return
        logger.info(f"Bots command from {sanitize_for_logging(str(message.from_user.id))}")

        bots = await bot_service.get_all_bots()

        if not bots:
            await message.answer("ü§ñ –ë–æ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        bots_text = "ü§ñ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞–º–∏</b>\n\n"
        for bot in bots[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            is_whitelisted = bool(bot.is_whitelisted)
            status = "‚úÖ –í–∞–π—Ç–ª–∏—Å—Ç" if is_whitelisted else "‚ùå –ë–ª—ç–∫–ª–∏—Å—Ç"
            username_value = bot.username
            username = str(username_value) if username_value is not None else "–ë–µ–∑ username"
            bots_text += f"{status} @{username}\n"

        if len(bots) > 10:
            bots_text += f"\n... –∏ –µ—â–µ {len(bots) - 10} –±–æ—Ç–æ–≤"

        await message.answer(bots_text)
        logger.info(f"Bots response sent to {sanitize_for_logging(str(message.from_user.id))}")

    except Exception as e:
        logger.error(f"Error in bots command: {sanitize_for_logging(str(e))}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –±–æ—Ç–æ–≤")




@admin_router.message(Command("settings"))
async def handle_settings_command(message: Message) -> None:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞."""
    try:
        if not message.from_user:
            return
        logger.info(f"Settings command from {sanitize_for_logging(str(message.from_user.id))}")

        # Load current configuration
        from app.config import load_config

        config = load_config()

        settings_text = (
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞</b>\n\n"
            "üîß <b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n"
            f"‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π: ‚úÖ –í–∫–ª—é—á–µ–Ω–∞\n"
            f"‚Ä¢ –ü–æ—Ä–æ–≥ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {config.suspicion_threshold}\n"
            f"‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ—Ä–∞—Ü–∏—è: ‚úÖ –í–∫–ª—é—á–µ–Ω–∞\n"
            f"‚Ä¢ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ: ‚úÖ –í–∫–ª—é—á–µ–Ω–æ\n\n"
            "üõ°Ô∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω—Ç–∏—Å–ø–∞–º–∞:</b>\n"
            f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ–¥–∏–∞ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏: {'‚úÖ' if config.check_media_without_caption else '‚ùå'}\n"
            f"‚Ä¢ –†–∞–∑—Ä–µ—à–∞—Ç—å GIF –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏: {'‚úÖ' if config.allow_videos_without_caption else '‚ùå'}\n"
            f"‚Ä¢ –†–∞–∑—Ä–µ—à–∞—Ç—å —Ñ–æ—Ç–æ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏: {'‚úÖ' if config.allow_photos_without_caption else '‚ùå'}\n"
            f"‚Ä¢ –†–∞–∑—Ä–µ—à–∞—Ç—å –≤–∏–¥–µ–æ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏: {'‚úÖ' if config.allow_videos_without_caption else '‚ùå'}\n"
            f"‚Ä¢ –ú–∞–∫—Å. —Ä–∞–∑–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–¥–æ–∑—Ä–µ–Ω–∏—è: {config.max_document_size_suspicious} –±–∞–π—Ç\n\n"
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            "‚Ä¢ Middleware –∞–∫—Ç–∏–≤–µ–Ω\n"
            "‚Ä¢ DI —Å–µ—Ä–≤–∏—Å—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã\n"
            "‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞\n\n"
            "‚ÑπÔ∏è –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "‚Ä¢ /setlimit threshold &lt;–∑–Ω–∞—á–µ–Ω–∏–µ&gt; - –ø–æ—Ä–æ–≥ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏\n"
            "‚Ä¢ /setlimit media_check &lt;0|1&gt; - –ø—Ä–æ–≤–µ—Ä–∫–∞ –º–µ–¥–∏–∞ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏\n"
            "‚Ä¢ /setlimit allow_gifs &lt;0|1&gt; - —Ä–∞–∑—Ä–µ—à–∏—Ç—å GIF –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏\n"
            "‚Ä¢ /setlimit allow_photos &lt;0|1&gt; - —Ä–∞–∑—Ä–µ—à–∏—Ç—å —Ñ–æ—Ç–æ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏\n"
            "‚Ä¢ /setlimit allow_videos &lt;0|1&gt; - —Ä–∞–∑—Ä–µ—à–∏—Ç—å –≤–∏–¥–µ–æ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏\n"
            "‚Ä¢ /setlimit doc_size &lt;–±–∞–π—Ç—ã&gt; - —Ä–∞–∑–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–¥–æ–∑—Ä–µ–Ω–∏—è"
        )

        await message.answer(settings_text)
        if message.from_user:
            logger.info(f"Settings response sent to {sanitize_for_logging(str(message.from_user.id))}")

    except Exception as e:
        logger.error(f"Error in settings command: {sanitize_for_logging(str(e))}")


@admin_router.message(Command("setlimits"))
async def handle_setlimits_command(message: Message, limits_service: LimitsService) -> None:
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–∏–º–∏—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã."""
    try:
        if not message.from_user:
            return
        logger.info(f"Setlimits command from {sanitize_for_logging(str(message.from_user.id))}")

        limits_text = (
            "üîí <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞–º–∏</b>\n\n" "üëë <b>–î–æ—Å—Ç—É–ø–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º</b>\n\n"
        ) + limits_service.get_limits_display()

        await message.answer(limits_text)
        if message.from_user:
            logger.info(f"Setlimits response sent to {sanitize_for_logging(str(message.from_user.id))}")

    except Exception as e:
        logger.error(f"Error in setlimits command: {sanitize_for_logging(str(e))}")


@admin_router.message(Command("setlimit"))
async def handle_setlimit_command(message: Message, limits_service: LimitsService) -> None:
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞."""
    try:
        if not message.from_user:
            return
        logger.info(f"Setlimit command from {sanitize_for_logging(str(message.from_user.id))}")

        # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É: /setlimit <—Ç–∏–ø> <–∑–Ω–∞—á–µ–Ω–∏–µ>
        text = message.text or ""
        parts = text.split()

        if len(parts) < 3:
            await message.answer(
                "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã</b>\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /setlimit &lt;—Ç–∏–ø&gt; &lt;–∑–Ω–∞—á–µ–Ω–∏–µ&gt;\n\n"
                "üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã:</b>\n"
                "‚Ä¢ messages - –º–∞–∫—Å–∏–º—É–º —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –º–∏–Ω—É—Ç—É\n"
                "‚Ä¢ links - –º–∞–∫—Å–∏–º—É–º —Å—Å—ã–ª–æ–∫ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏\n"
                "‚Ä¢ ban - –≤—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤ —á–∞—Å–∞—Ö\n"
                "‚Ä¢ threshold - –ø–æ—Ä–æ–≥ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏\n"
                "‚Ä¢ media_check - –ø—Ä–æ–≤–µ—Ä–∫–∞ –º–µ–¥–∏–∞ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏ (0/1)\n"
                "‚Ä¢ allow_gifs - —Ä–∞–∑—Ä–µ—à–∏—Ç—å GIF –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏ (0/1)\n"
                "‚Ä¢ allow_photos - —Ä–∞–∑—Ä–µ—à–∏—Ç—å —Ñ–æ—Ç–æ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏ (0/1)\n"
                "‚Ä¢ allow_videos - —Ä–∞–∑—Ä–µ—à–∏—Ç—å –≤–∏–¥–µ–æ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏ (0/1)\n"
                "‚Ä¢ doc_size - —Ä–∞–∑–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–¥–æ–∑—Ä–µ–Ω–∏—è (–±–∞–π—Ç—ã)\n\n"
                "üí° <b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
                "‚Ä¢ /setlimit messages 15\n"
                "‚Ä¢ /setlimit threshold 0.3\n"
                "‚Ä¢ /setlimit allow_gifs 1\n"
                "‚Ä¢ /setlimit doc_size 100000"
            )
            return

        limit_type = parts[1].lower()
        try:
            value = float(parts[2]) if limit_type == "threshold" else int(parts[2])
        except ValueError:
            await message.answer("‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
            return

        # –ú–∞–ø–ø–∏–Ω–≥ —Ç–∏–ø–æ–≤ –ª–∏–º–∏—Ç–æ–≤
        limit_mapping = {
            "messages": "max_messages_per_minute",
            "links": "max_links_per_message",
            "ban": "ban_duration_hours",
            "threshold": "suspicion_threshold",
            "media_check": "check_media_without_caption",
            "allow_gifs": "allow_videos_without_caption",
            "allow_photos": "allow_photos_without_caption",
            "allow_videos": "allow_videos_without_caption",
            "doc_size": "max_document_size_suspicious",
        }

        if limit_type not in limit_mapping:
            await message.answer(
                "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ª–∏–º–∏—Ç–∞</b>\n\n"
                "üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã:</b>\n"
                "‚Ä¢ messages - –º–∞–∫—Å–∏–º—É–º —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –º–∏–Ω—É—Ç—É\n"
                "‚Ä¢ links - –º–∞–∫—Å–∏–º—É–º —Å—Å—ã–ª–æ–∫ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏\n"
                "‚Ä¢ ban - –≤—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤ —á–∞—Å–∞—Ö\n"
                "‚Ä¢ threshold - –ø–æ—Ä–æ–≥ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏\n"
                "‚Ä¢ media_check - –ø—Ä–æ–≤–µ—Ä–∫–∞ –º–µ–¥–∏–∞ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏ (0/1)\n"
                "‚Ä¢ allow_gifs - —Ä–∞–∑—Ä–µ—à–∏—Ç—å GIF –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏ (0/1)\n"
                "‚Ä¢ allow_photos - —Ä–∞–∑—Ä–µ—à–∏—Ç—å —Ñ–æ—Ç–æ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏ (0/1)\n"
                "‚Ä¢ allow_videos - —Ä–∞–∑—Ä–µ—à–∏—Ç—å –≤–∏–¥–µ–æ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏ (0/1)\n"
                "‚Ä¢ doc_size - —Ä–∞–∑–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–¥–æ–∑—Ä–µ–Ω–∏—è (–±–∞–π—Ç—ã)"
            )
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏–º–∏—Ç
        success = limits_service.update_limit(limit_mapping[limit_type], value)

        if success:
            await message.answer(
                f"‚úÖ <b>–õ–∏–º–∏—Ç –æ–±–Ω–æ–≤–ª–µ–Ω!</b>\n\n"
                f"üìä <b>{limit_type}</b> –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ <b>{value}</b>\n\n"
                "üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –±–ª–∞–≥–æ–¥–∞—Ä—è hot-reload!"
            )
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞!")

        if message.from_user:
            logger.info(f"Setlimit response sent to {sanitize_for_logging(str(message.from_user.id))}")

    except Exception as e:
        logger.error(f"Error in setlimit command: {sanitize_for_logging(str(e))}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã!")


@admin_router.message(Command("reload_limits"))
async def handle_reload_limits_command(message: Message, limits_service: LimitsService) -> None:
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞."""
    try:
        if not message.from_user:
            return
        logger.info(f"Reload limits command from {sanitize_for_logging(str(message.from_user.id))}")

        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ª–∏–º–∏—Ç—ã
        success = limits_service.reload_limits()

        if success:
            limits = limits_service.get_current_limits()
            await message.answer(
                "üîÑ <b>–õ–∏–º–∏—Ç—ã –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã!</b>\n\n"
                f"üìä <b>–¢–µ–∫—É—â–∏–µ –ª–∏–º–∏—Ç—ã:</b>\n"
                f"‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π –≤ –º–∏–Ω—É—Ç—É: {limits['max_messages_per_minute']}\n"
                f"‚Ä¢ –°—Å—ã–ª–æ–∫ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏: {limits['max_links_per_message']}\n"
                f"‚Ä¢ –í—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {limits['ban_duration_hours']} —á–∞—Å–æ–≤\n"
                f"‚Ä¢ –ü–æ—Ä–æ–≥ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {limits['suspicion_threshold']}\n\n"
                "‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ!"
            )
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ –ª–∏–º–∏—Ç–æ–≤!")

        if message.from_user:
            logger.info(f"Reload limits response sent to {sanitize_for_logging(str(message.from_user.id))}")

    except Exception as e:
        logger.error(f"Error in reload_limits command: {sanitize_for_logging(str(e))}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ –ª–∏–º–∏—Ç–æ–≤!")


@admin_router.message(Command("unban"))
async def handle_unban_command(
    message: Message,
    moderation_service: ModerationService,
    channel_service: ChannelService,
    profile_service: ProfileService,
    admin_id: int,
) -> None:
    """–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏."""
    try:
        if not message.from_user:
            return
        logger.info(f"Unban command from {sanitize_for_logging(str(message.from_user.id))}")

        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        if not message.text:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return
        args = message.text.split()[1:] if message.text and len(message.text.split()) > 1 else []

        if not args:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±–æ—Ä–∞
            banned_users = await moderation_service.get_banned_users(limit=5)

            if not banned_users:
                await message.answer("‚ùå –ù–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                return

            text = "üö´ <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:</b>\n\n"

            for i, log_entry in enumerate(banned_users, 1):
                user_id = log_entry.user_id
                reason = log_entry.reason or "–°–ø–∞–º"
                chat_id = log_entry.chat_id

                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                user_info = await profile_service.get_user_info(user_id)
                user_display = (
                    f"@{user_info['username']}"
                    if user_info["username"]
                    else f"{user_info['first_name']} {user_info['last_name'] or ''}".strip()
                )
                if not user_display or user_display == "Unknown User":
                    user_display = f"User {user_id}"

                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
                chat_info = (
                    await channel_service.get_channel_info(chat_id) if chat_id else {"title": "Unknown Chat", "username": None}
                )
                chat_display = f"@{chat_info['username']}" if chat_info["username"] else chat_info["title"]

                text += f"{i}. <b>{user_display}</b> <code>({user_id})</code>\n"
                text += f"   –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
                text += f"   –ß–∞—Ç: <b>{chat_display}</b> <code>({chat_id})</code>\n\n"

            text += "üí° <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>\n"
            text += "‚Ä¢ <code>/unban 1</code> - —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ –Ω–æ–º–µ—Ä—É\n"
            text += "‚Ä¢ <code>/unban &lt;user_id&gt; [chat_id]</code> - —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ ID"

            await message.answer(text)
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ –Ω–æ–º–µ—Ä—É
        if args[0].isdigit() and 1 <= int(args[0]) <= 5:
            banned_users = await moderation_service.get_banned_users(limit=5)
            user_index = int(args[0]) - 1

            if 0 <= user_index < len(banned_users):
                log_entry = banned_users[user_index]
                user_id = log_entry.user_id
                chat_id = log_entry.chat_id

                # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                success = await moderation_service.unban_user(user_id=user_id, chat_id=chat_id, admin_id=admin_id)

                if success:
                    await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{sanitize_for_logging(str(user_id))}</code> —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ —á–∞—Ç–µ <code>{sanitize_for_logging(str(chat_id))}</code>")
                    logger.info(f"User {sanitize_for_logging(str(user_id))} unbanned by admin {sanitize_for_logging(str(admin_id))}")
                else:
                    await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>{sanitize_for_logging(str(user_id))}</code>")
            else:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ user_id –∏ chat_id
        if len(args) < 1:
            await message.answer(
                "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unban &lt;user_id_or_username&gt; [chat_id]\n" 
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "‚Ä¢ /unban 123456789 -1001234567890\n"
                "‚Ä¢ /unban @username -1001234567890"
            )
            return

        user_identifier = args[0]
        if len(args) > 1:
            chat_id = int(args[1])
        else:
            await message.answer("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å ID —á–∞—Ç–∞: /unban <user_id> <chat_id>")
            return
        
        # –ï—Å–ª–∏ ID –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –∏ –¥–ª–∏–Ω–Ω—ã–π, –¥–æ–±–∞–≤–ª—è–µ–º –º–∏–Ω—É—Å –¥–ª—è –≥—Ä—É–ø–ø/–∫–∞–Ω–∞–ª–æ–≤
        if chat_id > 0 and len(str(chat_id)) >= 10:
            chat_id = -chat_id

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º user_id
        user_id = None
        if user_identifier.startswith("@"):
            # –≠—Ç–æ username, –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ user_id
            username = user_identifier[1:]  # –£–±–∏—Ä–∞–µ–º @
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —á–µ—Ä–µ–∑ Telegram API
                user_info = await moderation_service.bot.get_chat_member(chat_id=chat_id, user_id=int(username))
                user_id = user_info.user.id
                logger.info(f"Found user_id {sanitize_for_logging(str(user_id))} for username @{sanitize_for_logging(username)}")
            except Exception as e:
                await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{sanitize_for_logging(username)}: {sanitize_for_logging(str(e))}")
                return
        else:
            # –≠—Ç–æ user_id
            try:
                user_id = int(user_identifier)
            except ValueError:
                await message.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {sanitize_for_logging(str(user_identifier))}")
                return

        # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        success = await moderation_service.unban_user(user_id=user_id, chat_id=chat_id, admin_id=admin_id)

        if success:
            await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{user_id}</code> —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ —á–∞—Ç–µ <code>{chat_id}</code>")
            logger.info(f"User {sanitize_for_logging(str(user_id))} unbanned by admin {sanitize_for_logging(str(admin_id))}")
        else:
            await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>{user_id}</code>")

    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        logger.error(f"Error in unban command: {sanitize_for_logging(str(e))}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")


@admin_router.message(Command("force_unban"))
async def handle_force_unban_command(
    message: Message,
    moderation_service: ModerationService,
    channel_service: ChannelService,
    profile_service: ProfileService,
    admin_id: int,
) -> None:
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞–∑–±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID –∏–ª–∏ username."""
    try:
        if not message.from_user:
            return
        logger.info(f"Force unban command from {sanitize_for_logging(str(message.from_user.id))}")

        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        if not message.text:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return
        args = message.text.split()[1:] if message.text and len(message.text.split()) > 1 else []

        if len(args) < 2:
            await message.answer(
                "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /force_unban <user_id_or_username> <chat_id>\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "‚Ä¢ /force_unban 123456789 -1001234567890\n"
                "‚Ä¢ /force_unban @username -1001234567890"
            )
            return

        user_identifier = args[0]
        chat_id = int(args[1])
        
        # –ï—Å–ª–∏ ID –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –∏ –¥–ª–∏–Ω–Ω—ã–π, –¥–æ–±–∞–≤–ª—è–µ–º –º–∏–Ω—É—Å –¥–ª—è –≥—Ä—É–ø–ø/–∫–∞–Ω–∞–ª–æ–≤
        if chat_id > 0 and len(str(chat_id)) >= 10:
            chat_id = -chat_id

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º user_id
        user_id = None
        if user_identifier.startswith("@"):
            # –≠—Ç–æ username, –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ user_id
            username = user_identifier[1:]  # –£–±–∏—Ä–∞–µ–º @
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —á–µ—Ä–µ–∑ Telegram API
                user_info = await moderation_service.bot.get_chat_member(chat_id=chat_id, user_id=int(username))
                user_id = user_info.user.id
                logger.info(f"Found user_id {sanitize_for_logging(str(user_id))} for username @{sanitize_for_logging(username)}")
            except Exception as e:
                await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{sanitize_for_logging(username)}: {sanitize_for_logging(str(e))}")
                return
        else:
            # –≠—Ç–æ user_id
            try:
                user_id = int(user_identifier)
            except ValueError:
                await message.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {sanitize_for_logging(str(user_identifier))}")
                return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —á–∞—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –±–æ—Ç –º–æ–∂–µ—Ç –≤ –Ω–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å
        try:
            chat = await moderation_service.bot.get_chat(chat_id)
            logger.info(f"Chat found: {sanitize_for_logging(chat.title or 'Unknown')} (ID: {sanitize_for_logging(str(chat_id))})")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –±–æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
            try:
                bot_member = await moderation_service.bot.get_chat_member(chat_id, moderation_service.bot.id)
                if bot_member.status not in ["administrator", "creator"]:
                    await message.answer(
                        f"‚ùå <b>–ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ —á–∞—Ç–µ:</b>\n\n"
                        f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {chat.title}\n"
                        f"üÜî ID: <code>{chat_id}</code>\n"
                        f"ü§ñ –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞: {bot_member.status}\n\n"
                        f"üí° <b>–î–ª—è —Ä–∞–∑–±–∞–Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:</b>\n"
                        f"‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —á–∞—Ç\n"
                        f"‚Ä¢ –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —á–∞—Ç –≥–¥–µ –±–æ—Ç —É–∂–µ –∞–¥–º–∏–Ω\n\n"
                        f"üîç <b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:</b> <code>/my_chats</code>"
                    )
                    return
            except Exception as e:
                logger.error(f"Error checking bot status: {sanitize_for_logging(str(e))}")
                await message.answer(
                    f"‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –≤ —á–∞—Ç–µ:</b>\n\n"
                    f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {chat.title}\n"
                    f"üÜî ID: <code>{chat_id}</code>\n"
                    f"‚ùå –û—à–∏–±–∫–∞: {e}\n\n"
                    f"üí° <b>–í–æ–∑–º–æ–∂–Ω–æ –±–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º</b>\n"
                    f"üîç <b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:</b> <code>/my_chats</code>"
                )
                return
                
        except Exception as e:
            logger.error(f"Chat not found: {sanitize_for_logging(str(e))}")
            await message.answer(f"‚ùå –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {sanitize_for_logging(str(e))}")
            return

        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        logger.info(f"Force unbanning user {sanitize_for_logging(str(user_id))} in chat {sanitize_for_logging(str(chat_id))}")
        
        try:
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –≤ Telegram
            await moderation_service.bot.unban_chat_member(chat_id=chat_id, user_id=user_id)
            logger.info(f"Successfully force unbanned user {sanitize_for_logging(str(user_id))} in Telegram chat {sanitize_for_logging(str(chat_id))}")
        except Exception as telegram_error:
            logger.error(f"Telegram API error during force unban: {sanitize_for_logging(str(telegram_error))}")
            await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ Telegram API: {sanitize_for_logging(str(telegram_error))}")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await moderation_service._update_user_status(user_id, is_banned=False, ban_reason=None)
        
        # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –±–∞–Ω—ã
        await moderation_service._deactivate_all_user_bans(user_id)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        await moderation_service._log_moderation_action(
            action=ModerationAction.UNBAN, 
            user_id=user_id, 
            admin_id=admin_id, 
            chat_id=chat_id
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ —Ä–∞–∑–±–∞–Ω–∞
        try:
            member = await moderation_service.bot.get_chat_member(chat_id=chat_id, user_id=user_id)
            status_info = f"–°—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ —Ä–∞–∑–±–∞–Ω–∞: {member.status}"
        except Exception as status_error:
            status_info = f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å: {status_error}"

        await message.answer(
            f"‚úÖ <b>–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞–∑–±–∞–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω</b>\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <code>{user_id}</code>\n"
            f"üí¨ –ß–∞—Ç: <code>{chat_id}</code>\n"
            f"üìä {status_info}\n\n"
            f"üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–∞–Ω–∞–ª—É —Å–Ω–æ–≤–∞"
        )
        
        logger.info(f"Force unban completed for user {sanitize_for_logging(str(user_id))} in chat {sanitize_for_logging(str(chat_id))}")

    except ValueError as e:
        await message.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —á–∞—Ç–∞: {sanitize_for_logging(str(e))}")
    except Exception as e:
        logger.error(f"Error in force_unban command: {sanitize_for_logging(str(e))}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º —Ä–∞–∑–±–∞–Ω–µ")


@admin_router.message(Command("suspicious"))
async def handle_suspicious_command(
    message: Message,
    profile_service: ProfileService,
    admin_id: int,
) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏."""
    try:
        if not message.from_user:
            return
        logger.info(f"Suspicious command from {sanitize_for_logging(str(message.from_user.id))}")

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏
        profiles = await profile_service.get_suspicious_profiles(limit=10)
        
        if not profiles:
            await message.answer("‚úÖ –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return

        text = "üîç <b>–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏:</b>\n\n"
        
        for i, profile in enumerate(profiles, 1):
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user_info = await profile_service.get_user_info(int(profile.user_id))
            username = f"@{user_info['username']}" if user_info['username'] else "–ù–µ—Ç username"
            name = f"{user_info['first_name']} {user_info['last_name'] or ''}".strip()
            
            text += f"{i}. <b>{name}</b>\n"
            text += f"   ID: <code>{profile.user_id}</code>\n"
            text += f"   Username: {username}\n"
            text += f"   –°—á–µ—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {profile.suspicion_score:.2f}\n"
            text += f"   –ü–∞—Ç—Ç–µ—Ä–Ω—ã: {profile.detected_patterns}\n"
            if profile.linked_chat_title and str(profile.linked_chat_title).strip():
                text += f"   –°–≤—è–∑–∞–Ω–Ω—ã–π —á–∞—Ç: {profile.linked_chat_title}\n"
            text += f"   –î–∞—Ç–∞: {profile.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"

        text += "üí° <b>–ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:</b>\n"
        text += "‚Ä¢ /suspicious_reset - —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏\n"
        text += "‚Ä¢ /suspicious_analyze <user_id> - –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        text += "‚Ä¢ /suspicious_remove <user_id> - —É–¥–∞–ª–∏—Ç—å –∏–∑ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö"
        
        await message.answer(text)
        logger.info(f"Suspicious profiles response sent to {sanitize_for_logging(str(message.from_user.id))}")

    except Exception as e:
        logger.error(f"Error in suspicious command: {sanitize_for_logging(str(e))}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π")


@admin_router.message(Command("suspicious_reset"))
async def handle_suspicious_reset_command(
    message: Message,
    profile_service: ProfileService,
    admin_id: int,
) -> None:
    """–°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏."""
    try:
        if not message.from_user:
            return
        logger.info(f"Suspicious reset command from {sanitize_for_logging(str(message.from_user.id))}")

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏
        deleted_count = await profile_service.reset_suspicious_profiles()
        
        await message.answer(
            f"‚úÖ <b>–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ —Å–±—Ä–æ—à–µ–Ω—ã</b>\n\n"
            f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {deleted_count}\n"
            f"üìä –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–±—Ä–æ—à–µ–Ω–∞"
        )
        logger.info(f"Reset {sanitize_for_logging(str(deleted_count))} suspicious profiles for {sanitize_for_logging(str(message.from_user.id))}")

    except Exception as e:
        logger.error(f"Error in suspicious_reset command: {sanitize_for_logging(str(e))}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π")


@admin_router.message(Command("suspicious_analyze"))
async def handle_suspicious_analyze_command(
    message: Message,
    profile_service: ProfileService,
    admin_id: int,
) -> None:
    """–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        if not message.from_user:
            return
        logger.info(f"Suspicious analyze command from {sanitize_for_logging(str(message.from_user.id))}")

        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        if not message.text:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return
        args = message.text.split()[1:] if message.text and len(message.text.split()) > 1 else []

        if len(args) < 1:
            await message.answer(
                "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /suspicious_analyze <user_id>\n"
                "–ü—Ä–∏–º–µ—Ä: /suspicious_analyze 123456789"
            )
            return

        try:
            user_id = int(args[0])
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = await profile_service.get_user_info(user_id)
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç User –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        from aiogram.types import User
        user = User(
            id=user_info['id'],
            is_bot=user_info['is_bot'],
            first_name=user_info['first_name'],
            last_name=user_info['last_name'],
            username=user_info['username']
        )
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        profile = await profile_service.analyze_user_profile(user, admin_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        text = f"üîç <b>–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
        text += f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user_info['first_name']} {user_info['last_name'] or ''}\n"
        text += f"<b>ID:</b> <code>{user_id}</code>\n"
        text += f"<b>Username:</b> @{user_info['username'] or '–ù–µ—Ç'}\n"
        
        if profile:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π
            text += f"<b>–°—á–µ—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:</b> {profile.suspicion_score:.2f}\n"
            
            # –ü–∞—Ä—Å–∏–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏
            patterns = str(profile.detected_patterns).split(',') if profile.detected_patterns else []
            text += f"<b>–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤:</b> {len(patterns)}\n\n"
            
            if patterns:
                text += "<b>üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã:</b>\n"
                for pattern in patterns:
                    if pattern.strip():  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                        text += f"‚Ä¢ {pattern.strip()}\n"
                text += "\n"
            
            if profile.linked_chat_title and str(profile.linked_chat_title).strip():
                text += f"<b>üì± –°–≤—è–∑–∞–Ω–Ω—ã–π —á–∞—Ç:</b> {profile.linked_chat_title}\n"
                text += f"<b>üìä –ü–æ—Å—Ç–æ–≤:</b> {profile.post_count}\n\n"
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            if float(profile.suspicion_score) >= 0.7:
                status = "üî¥ –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫"
            elif float(profile.suspicion_score) >= 0.4:
                status = "üü° –°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫"
            else:
                status = "üü¢ –ù–∏–∑–∫–∏–π —Ä–∏—Å–∫"
                
            text += f"<b>–°—Ç–∞—Ç—É—Å:</b> {status}\n"
            text += f"<b>–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞:</b> {profile.created_at.strftime('%d.%m.%Y %H:%M') if profile.created_at else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}"
        else:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π
            text += f"<b>–°—á–µ—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:</b> 0.00\n"
            text += f"<b>–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤:</b> 0\n\n"
            text += f"<b>–°—Ç–∞—Ç—É—Å:</b> üü¢ –ù–∏–∑–∫–∏–π —Ä–∏—Å–∫\n"
            text += f"<b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b> –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º"
        
        await message.answer(text)
        logger.info(f"Profile analysis completed for user {sanitize_for_logging(str(user_id))}")

    except Exception as e:
        logger.error(f"Error in suspicious_analyze command: {sanitize_for_logging(str(e))}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ—Ñ–∏–ª—è")


@admin_router.message(Command("suspicious_remove"))
async def handle_suspicious_remove_command(
    message: Message,
    profile_service: ProfileService,
    admin_id: int,
) -> None:
    """–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö."""
    try:
        if not message.from_user:
            return
        logger.info(f"Suspicious remove command from {sanitize_for_logging(str(message.from_user.id))}")

        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        if not message.text:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return
        args = message.text.split()[1:] if message.text and len(message.text.split()) > 1 else []

        if len(args) < 1:
            await message.answer(
                "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /suspicious_remove <user_id>\n"
                "–ü—Ä–∏–º–µ—Ä: /suspicious_remove 123456789"
            )
            return

        try:
            user_id = int(args[0])
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return

        # –£–¥–∞–ª—è–µ–º –∏–∑ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π
        profile = await profile_service._get_suspicious_profile(user_id)
        if not profile:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è—Ö")
            return
            
        await profile_service.db.delete(profile)
        await profile_service.db.commit()
        
        await message.answer(
            f"‚úÖ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω –∏–∑ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö</b>\n\n"
            f"üë§ ID: <code>{user_id}</code>\n"
            f"üóëÔ∏è –ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
        )
        logger.info(f"Removed user {sanitize_for_logging(str(user_id))} from suspicious profiles")

    except Exception as e:
        logger.error(f"Error in suspicious_remove command: {sanitize_for_logging(str(e))}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö")


@admin_router.message(Command("find_chat"))
async def handle_find_chat_command(
    message: Message,
    moderation_service: ModerationService,
    admin_id: int,
) -> None:
    """–ù–∞–π—Ç–∏ ID —á–∞—Ç–∞ –ø–æ invite —Å—Å—ã–ª–∫–µ –∏–ª–∏ username."""
    try:
        if not message.from_user:
            return
        logger.info(f"Find chat command from {sanitize_for_logging(str(message.from_user.id))}")

        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        if not message.text:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return
        args = message.text.split()[1:] if message.text and len(message.text.split()) > 1 else []

        if len(args) < 1:
            await message.answer(
                "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /find_chat <invite_link_or_username>\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "‚Ä¢ /find_chat https://t.me/+xlbTj-RSikM0NjA6\n"
                "‚Ä¢ /find_chat @channel_username"
            )
            return

        chat_identifier = args[0]
        
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
            chat = await moderation_service.bot.get_chat(chat_identifier)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –±–æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
            try:
                bot_member = await moderation_service.bot.get_chat_member(chat.id, moderation_service.bot.id)
                admin_status = "‚úÖ –ê–¥–º–∏–Ω" if bot_member.status in ["administrator", "creator"] else "‚ùå –ù–µ –∞–¥–º–∏–Ω"
            except Exception:
                admin_status = "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
            await message.answer(
                f"‚úÖ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ:</b>\n\n"
                f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {chat.title}\n"
                f"üÜî ID: <code>{chat.id}</code>\n"
                f"üë§ Username: @{chat.username if chat.username else '–ù–µ—Ç'}\n"
                f"üìä –¢–∏–ø: {chat.type}\n"
                f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {getattr(chat, 'member_count', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                f"ü§ñ –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞: {admin_status}\n\n"
                f"üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ID –¥–ª—è –∫–æ–º–∞–Ω–¥: <code>{chat.id}</code>"
            )
            
        except Exception as e:
            await message.answer(
                f"‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —á–∞—Ç:</b>\n\n"
                f"üîç –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä: <code>{chat_identifier}</code>\n"
                f"‚ùå –û—à–∏–±–∫–∞: {e}\n\n"
                f"üí° <b>–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:</b>\n"
                f"‚Ä¢ –ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞\n"
                f"‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è invite —Å—Å—ã–ª–∫–∞\n"
                f"‚Ä¢ –ö–∞–Ω–∞–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —É–¥–∞–ª–µ–Ω\n"
                f"‚Ä¢ –£ –±–æ—Ç–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É\n\n"
                f"üîß <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:</b>\n"
                f"‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –∫–∞–Ω–∞–ª\n"
                f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å username –∫–∞–Ω–∞–ª–∞: @channel_name\n"
                f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å invite —Å—Å—ã–ª–∫–∏"
            )

    except Exception as e:
        logger.error(f"Error in find_chat command: {sanitize_for_logging(str(e))}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —á–∞—Ç–∞")


@admin_router.message(Command("my_chats"))
async def handle_my_chats_command(
    message: Message,
    channel_service: ChannelService,
    admin_id: int,
) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–∞–Ω–∞–ª—ã, –≥–¥–µ –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."""
    try:
        if not message.from_user:
            return
        logger.info(f"My chats command from {sanitize_for_logging(str(message.from_user.id))}")

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞–Ω–∞–ª—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        channels = await channel_service.get_all_channels()
        
        if not channels:
            await message.answer("‚ùå –ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return

        text = "üì¢ <b>–ö–∞–Ω–∞–ª—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:</b>\n\n"
        
        for i, channel in enumerate(channels, 1):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ
            try:
                bot_member = await channel_service.bot.get_chat_member(int(channel.telegram_id), channel_service.bot.id)
                admin_status = "‚úÖ –ê–¥–º–∏–Ω" if bot_member.status in ["administrator", "creator"] else "‚ùå –ù–µ –∞–¥–º–∏–Ω"
            except Exception:
                admin_status = "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
            text += f"{i}. <b>{channel.title}</b>\n"
            text += f"   ID: <code>{channel.telegram_id}</code>\n"
            text += f"   Username: @{channel.username if channel.username and str(channel.username).strip() else '–ù–µ—Ç'}\n"
            text += f"   –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞: {admin_status}\n"
            text += f"   –¢–∏–ø: {'–ö–∞–Ω–∞–ª' if not bool(channel.is_comment_group) else '–ì—Ä—É–ø–ø–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤'}\n\n"

        text += "üí° <b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥ —Ä–∞–∑–±–∞–Ω–∞</b>"
        
        await message.answer(text)
        logger.info(f"My chats response sent to {sanitize_for_logging(str(message.from_user.id))}")

    except Exception as e:
        logger.error(f"Error in my_chats command: {sanitize_for_logging(str(e))}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤")


@admin_router.message(Command("banned"))
async def handle_banned_command(
    message: Message,
    moderation_service: ModerationService,
    channel_service: ChannelService,
    profile_service: ProfileService,
    admin_id: int,
) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π."""
    try:
        if not message.from_user:
            return
        logger.info(f"Banned command from {sanitize_for_logging(str(message.from_user.id))}")

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        banned_users = await moderation_service.get_banned_users(limit=10)

        if not banned_users:
            await message.answer("üìù –ù–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            return

        text = "üö´ <b>–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n\n"

        for i, log_entry in enumerate(banned_users, 1):
            user_id = log_entry.user_id
            reason = log_entry.reason or "–°–ø–∞–º"
            date_text = log_entry.created_at.strftime("%d.%m.%Y %H:%M") if log_entry.created_at else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            chat_id = log_entry.chat_id

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user_info = await profile_service.get_user_info(user_id)

            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_info["username"]:
                user_display = f"@{user_info['username']}"
            else:
                first_name = user_info["first_name"] or ""
                last_name = user_info["last_name"] or ""
                full_name = f"{first_name} {last_name}".strip()
                user_display = full_name if full_name else f"User {user_id}"

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
            chat_info = (
                await channel_service.get_channel_info(chat_id) if chat_id else {"title": "Unknown Chat", "username": None}
            )
            chat_display = f"@{chat_info['username']}" if chat_info["username"] else chat_info["title"]

            text += f"{i}. <b>{user_display}</b> <code>({user_id})</code>\n"
            text += f"   –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
            text += f"   –ß–∞—Ç: <b>{chat_display}</b> <code>({chat_id})</code>\n"
            text += f"   –î–∞—Ç–∞: {date_text}\n\n"

        if len(banned_users) == 10:
            text += "üí° –ü–æ–∫–∞–∑–∞–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"

        await message.answer(text)
        logger.info(f"Banned list sent to {sanitize_for_logging(str(message.from_user.id))}")

    except Exception as e:
        logger.error(f"Error in banned command: {sanitize_for_logging(str(e))}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö")


@admin_router.message(Command("ban_history"))
async def handle_ban_history_command(
    message: Message,
    moderation_service: ModerationService,
    channel_service: ChannelService,
    profile_service: ProfileService,
    admin_id: int,
) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –±–∞–Ω–æ–≤ —Å chat_id –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞."""
    try:
        if not message.from_user:
            return
        logger.info(f"Ban history command from {sanitize_for_logging(str(message.from_user.id))}")

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –±–∞–Ω–æ–≤
        ban_history = await moderation_service.get_ban_history(limit=10)

        if not ban_history:
            await message.answer("üìù –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏ –±–∞–Ω–æ–≤")
            return

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –±–∞–Ω—ã –ø–æ —á–∞—Ç–∞–º
        bans_by_chat = {}
        for log_entry in ban_history:
            chat_id = log_entry.chat_id
            if chat_id not in bans_by_chat:
                bans_by_chat[chat_id] = []
            bans_by_chat[chat_id].append(log_entry)

        text = "üìã <b>–ò—Å—Ç–æ—Ä–∏—è –±–∞–Ω–æ–≤ (–ø–æ —á–∞—Ç–∞–º):</b>\n\n"

        entry_number = 1
        for chat_id, chat_bans in bans_by_chat.items():
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
            chat_info = (
                await channel_service.get_channel_info(chat_id) if chat_id else {"title": "Unknown Chat", "username": None}
            )
            chat_display = f"@{chat_info['username']}" if chat_info["username"] else chat_info["title"]
            
            text += f"<b>üí¨ {chat_display}</b> <code>({chat_id})</code>\n"
            
            for log_entry in chat_bans:
                user_id = log_entry.user_id
                reason = log_entry.reason or "–°–ø–∞–º"
                date_text = log_entry.created_at.strftime("%d.%m.%Y %H:%M") if log_entry.created_at else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                is_active = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if log_entry.is_active else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"

                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                user_info = await profile_service.get_user_info(user_id)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if user_info["username"]:
                    user_display = f"@{user_info['username']}"
                else:
                    first_name = user_info["first_name"] or ""
                    last_name = user_info["last_name"] or ""
                    full_name = f"{first_name} {last_name}".strip()
                    user_display = full_name if full_name else f"User {user_id}"

                text += f"  {entry_number}. <b>{user_display}</b> <code>({user_id})</code>\n"
                text += f"     –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
                text += f"     –°—Ç–∞—Ç—É—Å: {is_active}\n"
                text += f"     –î–∞—Ç–∞: {date_text}\n\n"
                
                entry_number += 1
            
            text += "\n"

        text += "üí° <b>–î–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:</b>\n"
        text += "‚Ä¢ <code>/sync_bans &lt;chat_id&gt;</code>\n"
        text += "‚Ä¢ <code>/sync_bans 1</code> - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ –Ω–æ–º–µ—Ä—É"

        await message.answer(text)
        logger.info(f"Ban history sent to {sanitize_for_logging(str(message.from_user.id))}")

    except Exception as e:
        logger.error(f"Error in ban_history command: {sanitize_for_logging(str(e))}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –±–∞–Ω–æ–≤")


@admin_router.message(Command("sync_bans"))
async def handle_sync_bans_command(
    message: Message,
    moderation_service: ModerationService,
    channel_service: ChannelService,
    admin_id: int,
) -> None:
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–Ω—ã —Å Telegram API."""
    try:
        if not message.from_user:
            return
        logger.info(f"Sync bans command from {sanitize_for_logging(str(message.from_user.id))}")

        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        if not message.text:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return
        args = message.text.split()[1:] if message.text and len(message.text.split()) > 1 else []

        if not args:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∫–∞–Ω–∞–ª—ã –≥–¥–µ –±–æ—Ç –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å
            channels = await channel_service.get_all_channels()
            
            if not channels:
                await message.answer("‚ùå –ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                return

            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫–∞–Ω–∞–ª—ã –≥–¥–µ –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
            native_channels = []
            for channel in channels:
                try:
                    bot_member = await channel_service.bot.get_chat_member(int(channel.telegram_id), channel_service.bot.id)
                    if bot_member.status in ["administrator", "creator"]:
                        native_channels.append(channel)
                except Exception:
                    # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                    continue

            if not native_channels:
                await message.answer("‚ùå –ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –Ω–∏ –≤ –æ–¥–Ω–æ–º –∫–∞–Ω–∞–ª–µ")
                return

            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –±–∞–Ω–æ–≤ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–∞–Ω–æ–≤
            ban_history = await moderation_service.get_ban_history(limit=50)
            
            text = "üîÑ <b>–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:</b>\n\n"

            for i, channel in enumerate(native_channels[:5], 1):
                # –°—á–∏—Ç–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –±–∞–Ω—ã –≤ —ç—Ç–æ–º —á–∞—Ç–µ
                active_bans = len([log for log in ban_history if log.chat_id == channel.telegram_id and log.is_active])
                
                chat_display = f"@{channel.username}" if channel.username else channel.title

                text += f"{i}. <b>{chat_display}</b>\n"
                text += f"   ID: <code>{channel.telegram_id}</code>\n"
                text += f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö –±–∞–Ω–æ–≤: {active_bans}\n\n"

            text += "üí° <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>\n"
            text += "‚Ä¢ <code>/sync_bans 1</code> - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ –Ω–æ–º–µ—Ä—É\n"
            text += "‚Ä¢ <code>/sync_bans &lt;chat_id&gt;</code> - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ ID\n"
            text += "‚Ä¢ <code>/ban_history</code> - –ø–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –±–∞–Ω–æ–≤"

            await message.answer(text)
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ –Ω–æ–º–µ—Ä—É
        if args[0].isdigit() and 1 <= int(args[0]) <= 5:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞–Ω–∞–ª—ã –≥–¥–µ –±–æ—Ç –∞–¥–º–∏–Ω
            channels = await channel_service.get_all_channels()
            native_channels = []
            for channel in channels:
                try:
                    bot_member = await channel_service.bot.get_chat_member(int(channel.telegram_id), channel_service.bot.id)
                    if bot_member.status in ["administrator", "creator"]:
                        native_channels.append(channel)
                except Exception:
                    continue
            
            chat_index = int(args[0]) - 1

            if 0 <= chat_index < len(native_channels):
                chat_id = native_channels[chat_index].telegram_id

                result = await moderation_service.sync_bans_from_telegram(chat_id)

                if result["status"] == "success":
                    await message.answer(f"‚úÖ {result['message']}")
                elif result["status"] == "info":
                    await message.answer(f"‚ÑπÔ∏è {result['message']}")
                elif result["status"] == "error":
                    await message.answer(f"‚ùå {result['message']}")
                else:
                    await message.answer(f"‚ö†Ô∏è {result['message']}")
            else:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —á–∞—Ç–∞")
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ chat_id –∏–ª–∏ user_id
        if len(args) == 1:
            # –¢–æ–ª—å–∫–æ chat_id - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –±–∞–Ω—ã –≤ —á–∞—Ç–µ
            try:
                chat_id = int(args[0])
                # –ï—Å–ª–∏ ID –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –∏ –¥–ª–∏–Ω–Ω—ã–π, –¥–æ–±–∞–≤–ª—è–µ–º –º–∏–Ω—É—Å –¥–ª—è –≥—Ä—É–ø–ø/–∫–∞–Ω–∞–ª–æ–≤
                if chat_id > 0 and len(str(chat_id)) >= 10:
                    chat_id = -chat_id
            except ValueError:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —á–∞—Ç–∞")
                return
            
            result = await moderation_service.sync_bans_from_telegram(chat_id)
            
            if result["status"] == "success":
                await message.answer(f"‚úÖ {result['message']}")
            elif result["status"] == "info":
                await message.answer(f"‚ÑπÔ∏è {result['message']}")
            elif result["status"] == "error":
                await message.answer(f"‚ùå {result['message']}")
            else:
                await message.answer(f"‚ö†Ô∏è {result['message']}")
        else:
            # user_id –∏ chat_id - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                user_id = int(args[0])
                chat_id = int(args[1])
                # –ï—Å–ª–∏ ID –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –∏ –¥–ª–∏–Ω–Ω—ã–π, –¥–æ–±–∞–≤–ª—è–µ–º –º–∏–Ω—É—Å –¥–ª—è –≥—Ä—É–ø–ø/–∫–∞–Ω–∞–ª–æ–≤
                if chat_id > 0 and len(str(chat_id)) >= 10:
                    chat_id = -chat_id
            except ValueError:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —á–∞—Ç–∞")
                return
            
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
                member = await moderation_service.bot.get_chat_member(chat_id=chat_id, user_id=user_id)
                telegram_status = member.status
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                is_banned_db = await moderation_service.is_user_banned(user_id)
                
                # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å
                if telegram_status == "kicked" and not is_banned_db:
                    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω –≤ Telegram, –Ω–æ –Ω–µ –≤ –ë–î - –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –±–∞–Ω
                    await moderation_service._update_user_status(user_id, is_banned=True)
                    await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω: –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –±–∞–Ω –≤ –ë–î")
                elif telegram_status in ["member", "administrator", "creator"] and is_banned_db:
                    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –∑–∞–±–∞–Ω–µ–Ω –≤ Telegram, –Ω–æ –∑–∞–±–∞–Ω–µ–Ω –≤ –ë–î - –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –±–∞–Ω
                    await moderation_service._update_user_status(user_id, is_banned=False)
                    await moderation_service._deactivate_all_user_bans(user_id)
                    await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω: –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –±–∞–Ω –≤ –ë–î")
                else:
                    await message.answer(f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω")
                    
            except Exception as e:
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

        logger.info(f"Sync bans response sent to {sanitize_for_logging(str(message.from_user.id))}")

    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —á–∞—Ç–∞")
    except Exception as e:
        logger.error(f"Error in sync_bans command: {sanitize_for_logging(str(e))}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –±–∞–Ω–æ–≤")


# –£–î–ê–õ–ï–ù–û: /sync_user_status - –¥—É–±–ª–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å /sync_bans


@admin_router.message(Command("help"))
async def handle_help_command(
    message: Message,
    help_service: HelpService,
) -> None:
    """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º."""
    try:
        if not message.from_user:
            return
        logger.info(f"Help command from {sanitize_for_logging(str(message.from_user.id))}")

        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        message_text = message.text or ""
        command_args = message_text.split()[1:] if len(message_text.split()) > 1 else []

        if command_args:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            category = command_args[0]
            user_id = message.from_user.id if message.from_user else None
            logger.info(f"Getting help for category: {sanitize_for_logging(category)}, user_id: {sanitize_for_logging(str(user_id))}")
            help_text = help_service.get_category_help(category, user_id=user_id)
        else:
            # –ï—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å–ø—Ä–∞–≤–∫—É
            help_text = help_service.get_main_help(is_admin=True)

        await message.answer(help_text)
        if message.from_user:
            logger.info(f"Help response sent to {sanitize_for_logging(str(message.from_user.id))}")

    except Exception as e:
        logger.error(f"Error in help command: {sanitize_for_logging(str(e))}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –¥–ª—è –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π
@admin_router.callback_query(lambda c: c.data and c.data.startswith("ban_suspicious:"))
async def handle_ban_suspicious_callback(
    callback_query: CallbackQuery,
    moderation_service: ModerationService,
    profile_service: ProfileService,
    admin_id: int,
) -> None:
    """–ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        if not callback_query.from_user:
            return

        callback_data = callback_query.data or ""
        user_id = int(callback_data.split(":")[1]) if callback_data and ":" in callback_data else 0

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = await profile_service.get_user_info(user_id)

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—á–µ—Ç–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        profile = await profile_service._get_suspicious_profile(user_id)
        suspicion_score = profile.suspicion_score if profile else 0.0

        # –ë–∞–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        success = await moderation_service.ban_user(
            user_id=user_id,
            chat_id=callback_query.message.chat.id if callback_query.message else 0,
            reason=f"–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å (—Å—á–µ—Ç: {suspicion_score:.2f})",
            admin_id=admin_id,
        )

        if success:
            # –û—Ç–º–µ—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∫–∞–∫ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π
            await profile_service.mark_profile_as_reviewed(
                user_id=user_id,
                admin_id=admin_id,
                is_confirmed=True,
                notes="–ó–∞–±–∞–Ω–µ–Ω –∑–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å",
            )

            await callback_query.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω")
            try:
                if callback_query.message and hasattr(callback_query.message, "edit_text") and callable(getattr(callback_query.message, "edit_text", None)):
                    await callback_query.message.edit_text(
                        f"üö´ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω</b>\n\n"
                        f"ID: {user_id}\n"
                        f"–ò–º—è: {user_info.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                        f"–ü—Ä–∏—á–∏–Ω–∞: –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å"
                    )
            except Exception as e:
                logger.warning(f"Could not edit message: {sanitize_for_logging(str(e))}")
        else:
            await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

    except Exception as e:
        logger.error(f"Error in ban_suspicious callback: {sanitize_for_logging(str(e))}")
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")


@admin_router.callback_query(lambda c: c.data and c.data.startswith("watch_suspicious:"))
async def handle_watch_suspicious_callback(
    callback_query: CallbackQuery,
    profile_service: ProfileService,
    admin_id: int,
) -> None:
    """–ü–æ–º–µ—Ç–∏—Ç—å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è."""
    try:
        if not callback_query.from_user:
            return

        callback_data = callback_query.data or ""
        user_id = int(callback_data.split(":")[1]) if callback_data and ":" in callback_data else 0

        # –û—Ç–º–µ—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∫–∞–∫ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π, –Ω–æ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π
        await profile_service.mark_profile_as_reviewed(
            user_id=user_id, admin_id=admin_id, is_confirmed=False, notes="–ü–æ–º–µ—á–µ–Ω –¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è"
        )

        await callback_query.answer("üëÄ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è")
        try:
            if callback_query.message and hasattr(callback_query.message, "edit_text") and callable(getattr(callback_query.message, "edit_text", None)):
                await callback_query.message.edit_text(
                    f"üëÄ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ</b>\n\n" f"ID: {user_id}\n" f"–°—Ç–∞—Ç—É—Å: –ù–∞–±–ª—é–¥–µ–Ω–∏–µ"
                )
        except Exception as e:
            logger.warning(f"Could not edit message: {sanitize_for_logging(str(e))}")

    except Exception as e:
        logger.error(f"Error in watch_suspicious callback: {sanitize_for_logging(str(e))}")
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")


@admin_router.callback_query(lambda c: c.data and c.data.startswith("allow_suspicious:"))
async def handle_allow_suspicious_callback(
    callback_query: CallbackQuery,
    profile_service: ProfileService,
    admin_id: int,
) -> None:
    """–†–∞–∑—Ä–µ—à–∏—Ç—å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–ª–æ–∂–Ω–æ–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ)."""
    try:
        if not callback_query.from_user:
            return

        callback_data = callback_query.data or ""
        user_id = int(callback_data.split(":")[1]) if callback_data and ":" in callback_data else 0

        # –û—Ç–º–µ—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∫–∞–∫ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π –∏ –ª–æ–∂–Ω–æ–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ
        await profile_service.mark_profile_as_reviewed(
            user_id=user_id,
            admin_id=admin_id,
            is_confirmed=False,
            notes="–õ–æ–∂–Ω–æ–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ - —Ä–∞–∑—Ä–µ—à–µ–Ω",
        )

        await callback_query.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑—Ä–µ—à–µ–Ω")
        try:
            if callback_query.message and hasattr(callback_query.message, "edit_text") and callable(getattr(callback_query.message, "edit_text", None)):
                await callback_query.message.edit_text(
                    f"‚úÖ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑—Ä–µ—à–µ–Ω</b>\n\n" f"ID: {user_id}\n" f"–°—Ç–∞—Ç—É—Å: –õ–æ–∂–Ω–æ–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ"
                )
        except Exception as e:
            logger.warning(f"Could not edit message: {sanitize_for_logging(str(e))}")

    except Exception as e:
        logger.error(f"Error in allow_suspicious callback: {sanitize_for_logging(str(e))}")
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")


@admin_router.message(Command("instructions"))
async def handle_instructions_command(
    message: Message,
    admin_id: int,
) -> None:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –±–æ—Ç–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –∫–∞–Ω–∞–ª–æ–≤."""
    try:
        if not message.from_user:
            return
        logger.info(f"Instructions command from {sanitize_for_logging(str(message.from_user.id))}")

        # Get bot username for instructions
        # bot_username = getattr(message.bot, "username", None) or "your_bot"  # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è

        instructions = (
            "üìã <b>–ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –ù–ê–°–¢–†–û–ô–ö–ï –ü–†–ê–í –ë–û–¢–ê</b>\n\n"
            "ü§ñ <b>–ß—Ç–æ –ø–æ–ª—É—á–∞—é—Ç –∞–¥–º–∏–Ω—ã –∫–∞–Ω–∞–ª–æ–≤ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±–æ—Ç–∞:</b>\n"
            "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞ –∫ —Ä–∞–±–æ—Ç–µ\n"
            "‚Ä¢ –ü–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ø—Ä–∞–≤\n"
            "‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏ —Å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –±–æ—Ç–∞\n\n"
            "üîß <b>–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –ü–†–ê–í–ê –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞:</b>\n\n"
            "1Ô∏è‚É£ <b>–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π</b>\n"
            "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞ ‚Üí –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã ‚Üí @your_bot\n"
            '‚Ä¢ –í–∫–ª—é—á–∏—Ç—å "–£–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è"\n'
            "‚Ä¢ –ë–µ–∑ —ç—Ç–æ–≥–æ –±–æ—Ç –Ω–µ —Å–º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å —Å–ø–∞–º\n\n"
            "2Ô∏è‚É£ <b>–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n"
            '‚Ä¢ –í–∫–ª—é—á–∏—Ç—å "–î–æ–±–∞–≤–ª—è—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤" –∏–ª–∏ "–ò—Å–∫–ª—é—á–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"\n'
            "‚Ä¢ –ë–µ–∑ —ç—Ç–æ–≥–æ –±–æ—Ç –Ω–µ —Å–º–æ–∂–µ—Ç –±–∞–Ω–∏—Ç—å —Å–ø–∞–º–µ—Ä–æ–≤\n\n"
            "3Ô∏è‚É£ <b>–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏–π</b>\n"
            "‚Ä¢ –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –±–æ—Ç –º–æ–∂–µ—Ç —á–∏—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è\n"
            "‚Ä¢ –ù—É–∂–Ω–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞\n\n"
            "‚úÖ <b>–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ü–†–ê–í–ê (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è):</b>\n"
            "‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è —Ä–∞–∑–±–∞–Ω–∞)\n"
            "‚Ä¢ –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π)\n\n"
            "‚ö†Ô∏è <b>–í–ê–ñ–ù–û –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –∫–∞–Ω–∞–ª–æ–≤:</b>\n"
            "‚Ä¢ –ë–µ–∑ –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∏ –±–∞–Ω –±–æ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –ù–ï –ë–£–î–ï–¢!\n"
            "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–∞–≤–∞ –Ω—É–∂–Ω–æ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è\n"
            "‚Ä¢ –ë–æ—Ç –Ω–∞—á–Ω–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n\n"
            "üîç <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã:</b>\n"
            "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç-—Å—Å—ã–ª–∫–æ–π\n"
            "‚Ä¢ –ë–æ—Ç –¥–æ–ª–∂–µ–Ω —É–¥–∞–ª–∏—Ç—å –µ–≥–æ (–µ—Å–ª–∏ –ø—Ä–∞–≤–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã)\n"
            "‚Ä¢ –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª—è–µ—Ç - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞\n\n"
            "‚öôÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞):</b>\n"
            "‚Ä¢ <code>/status</code> - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞\n"
            "‚Ä¢ <code>/settings</code> - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω—Ç–∏—Å–ø–∞–º–∞\n"
            "‚Ä¢ <code>/suspicious</code> - –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π\n"
            "‚Ä¢ <code>/channels</code> - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏\n"
            "‚Ä¢ <code>/setlimits</code> - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–∏–º–∏—Ç–æ–≤\n\n"
            "üìû <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b>\n"
            "‚Ä¢ –í–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞: [@ncux-ad](https://github.com/ncux-ad)\n"
            "‚Ä¢ GitHub: https://github.com/ncux-ad/Flame_Of_Styx_bot\n"
            "‚Ä¢ –ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π - –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –≤–ª–∞–¥–µ–ª—å—Ü—É\n\n"
            "üí° <b>–°–æ–≤–µ—Ç:</b> –ê–¥–º–∏–Ω—ã –∫–∞–Ω–∞–ª–æ–≤ –¥–æ–ª–∂–Ω—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–∞–≤–∞, –∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–µ—Ç—Å—è –∑–∞ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –±–æ—Ç–∞!"
        )

        await message.answer(instructions)
        if message.from_user:
            logger.info(f"Instructions sent to {sanitize_for_logging(str(message.from_user.id))}")

    except Exception as e:
        logger.error(f"Error in instructions command: {sanitize_for_logging(str(e))}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π")


@admin_router.message(Command("logs"))
async def handle_logs_command(
    message: Message,
    admin_id: int,
) -> None:
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ —Å–∏—Å—Ç–µ–º—ã."""
    try:
        if not message.from_user:
            return
        logger.info(f"Logs command from {sanitize_for_logging(str(message.from_user.id))}")

        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        message_text = message.text or ""
        command_args = message_text.split()[1:] if len(message_text.split()) > 1 else []
        log_level = command_args[0] if command_args else "all"

        # –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏ –∏–∑ journalctl
        import os
        import subprocess

        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø—É—Ç–∏ –∫ journalctl
        journalctl_paths = ["/usr/bin/journalctl", "/bin/journalctl", "journalctl"]

        journalctl_path = None
        for path in journalctl_paths:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
                if os.path.exists(path) or path == "journalctl":
                    journalctl_path = path
                    break
            except Exception:
                continue

        if not journalctl_path:
            # –ï—Å–ª–∏ journalctl –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏ –∏–∑ —Ñ–∞–π–ª–æ–≤
            try:
                log_files = ["/var/log/antispam-bot.log", "logs/antispam-bot.log", "antispam-bot.log"]

                logs_text = ""
                for log_file in log_files:
                    if os.path.exists(log_file):
                        with open(log_file, "r", encoding="utf-8") as f:
                            lines = f.readlines()
                            if log_level == "error":
                                logs_text = "\n".join([line for line in lines if "ERROR" in line or "CRITICAL" in line])[
                                    -2000:
                                ]
                            elif log_level == "warning":
                                logs_text = "\n".join(
                                    [line for line in lines if "WARNING" in line or "ERROR" in line or "CRITICAL" in line]
                                )[-2000:]
                            else:
                                logs_text = "\n".join(lines[-50:])
                        break

                if logs_text:
                    if len(logs_text) > 3500:
                        logs_text = logs_text[:3500] + "\n... (–ª–æ–≥–∏ –æ–±—Ä–µ–∑–∞–Ω—ã)"
                    response = f"üìã <b>–õ–æ–≥–∏ –∏–∑ —Ñ–∞–π–ª–∞ ({log_level})</b>\n\n<code>{logs_text}</code>"
                else:
                    response = "‚ùå <b>–õ–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>\n\njournalctl –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏ —Ñ–∞–π–ª—ã –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"

                await message.answer(response)
                return

            except Exception as e:
                response = f"‚ùå <b>–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤</b>\n\n{str(e)}"
                await message.answer(response)
                return

        try:

            if log_level == "error":
                # –¢–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏
                result = subprocess.run(
                    [
                        journalctl_path,
                        "-u",
                        "antispam-bot.service",
                        "--since",
                        "1 hour ago",
                        "--priority",
                        "err",
                        "--no-pager",
                        "-n",
                        "50",
                    ],
                    capture_output=True,
                    text=True,
                    timeout=10,
                    shell=False,
                )
            elif log_level == "warning":
                # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∏ –æ—à–∏–±–∫–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º grep –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
                result = subprocess.run(
                    [journalctl_path, "-u", "antispam-bot.service", "--since", "1 hour ago", "--no-pager", "-n", "100"],
                    capture_output=True,
                    text=True,
                    timeout=10,
                    shell=False,
                )
                if result.returncode == 0 and result.stdout:
                    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ WARNING –∏ ERROR —É—Ä–æ–≤–Ω–∏
                    import re

                    warning_lines = []
                    for line in result.stdout.split("\n"):
                        if re.search(r"(WARNING|ERROR|CRITICAL)", line, re.IGNORECASE):
                            warning_lines.append(line)
                    result.stdout = "\n".join(warning_lines[-50:])  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å—Ç—Ä–æ–∫
            else:
                # –í—Å–µ –ª–æ–≥–∏
                result = subprocess.run(
                    [journalctl_path, "-u", "antispam-bot.service", "--since", "1 hour ago", "--no-pager", "-n", "30"],
                    capture_output=True,
                    text=True,
                    timeout=10,
                    shell=False,
                )

            if result.returncode == 0:
                logs_text = result.stdout.strip() if result.stdout else ""

                if logs_text:
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è (Telegram –ª–∏–º–∏—Ç 4096 —Å–∏–º–≤–æ–ª–æ–≤)
                    if len(logs_text) > 3500:
                        logs_text = logs_text[:3500] + "\n... (–ª–æ–≥–∏ –æ–±—Ä–µ–∑–∞–Ω—ã)"

                    response = f"üìã <b>–õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã ({log_level})</b>\n\n<code>{logs_text}</code>"
                else:
                    # –ù–µ—Ç –ª–æ–≥–æ–≤ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
                    if log_level == "error":
                        response = "‚úÖ <b>–û—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</b>\n\n–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å –æ—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ."
                    elif log_level == "warning":
                        response = (
                            "‚úÖ <b>–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</b>\n\n–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –≤ –ª–æ–≥–∞—Ö –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ."
                        )
                    else:
                        response = "üìã <b>–õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã (all)</b>\n\n<code>-- No entries --</code>"

            else:
                error_msg = result.stderr or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
                response = f"‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤</b>\n\n–ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞: {result.returncode}\n–û—à–∏–±–∫–∞: {error_msg}\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ systemd —Å–µ—Ä–≤–∏—Å –Ω–∞ Ubuntu —Å–µ—Ä–≤–µ—Ä–µ."

        except subprocess.TimeoutExpired:
            response = "‚è∞ <b>–¢–∞–π–º–∞—É—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤</b>\n\n–õ–æ–≥–∏ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"
        except Exception as e:
            response = f"‚ùå <b>–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã</b>\n\n{str(e)}"

        await message.answer(response)
        if message.from_user:
            logger.info(f"Logs response sent to {sanitize_for_logging(str(message.from_user.id))}")

    except Exception as e:
        logger.error(f"Error in logs command: {sanitize_for_logging(str(e))}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤")
