"""Admin command handlers."""

import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command

from app.services.channels import ChannelService
from app.services.bots import BotService
from app.services.moderation import ModerationService
from app.services.profiles import ProfileService
from app.keyboards.inline import get_main_menu_keyboard
from app.keyboards.reply import get_admin_menu_keyboard
from app.filters.is_admin import IsAdminFilter

logger = logging.getLogger(__name__)

# Create router
admin_router = Router()

# Apply admin filter to all handlers
admin_router.message.filter(IsAdminFilter())
admin_router.callback_query.filter(IsAdminFilter())


@admin_router.message(Command("start"))
async def handle_start_command(message: Message) -> None:
    """Handle /start command for admins."""
    try:
        welcome_text = (
            "ü§ñ <b>AntiSpam Bot</b>\n\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/status - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            "/channels - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏\n"
            "/bots - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞–º–∏\n"
            "/suspicious - –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏\n"
            "/help - –ø–æ–º–æ—â—å"
        )
        
        await message.answer(
            welcome_text,
            reply_markup=get_admin_menu_keyboard()
        )
        
    except Exception as e:
        logger.error(f"Error handling start command: {e}")


@admin_router.message(Command("status"))
async def handle_status_command(message: Message) -> None:
    """Handle /status command."""
    try:
        # TODO: Get real statistics from database
        status_text = (
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ AntiSpam Bot</b>\n\n"
            f"<b>–ö–∞–Ω–∞–ª—ã:</b>\n"
            f"‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω—ã: 0\n"
            f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã: 0\n"
            f"‚è≥ –û–∂–∏–¥–∞—é—Ç: 0\n\n"
            f"<b>–ë–æ—Ç—ã:</b>\n"
            f"‚úÖ –í whitelist: 0\n\n"
            f"<b>–°—Ç–∞—Ç—É—Å:</b> üü¢ –†–∞–±–æ—Ç–∞–µ—Ç"
        )
        
        await message.answer(status_text)
        
    except Exception as e:
        logger.error(f"Error handling status command: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")


@admin_router.message(Command("channels"))
async def handle_channels_command(
    message: Message,
    channel_service: ChannelService
) -> None:
    """Handle /channels command."""
    try:
        # Get channel lists
        allowed_channels = await channel_service.get_allowed_channels()
        blocked_channels = await channel_service.get_blocked_channels()
        pending_channels = await channel_service.get_pending_channels()
        
        channels_text = "üìã <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏</b>\n\n"
        
        if allowed_channels:
            channels_text += "<b>‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:</b>\n"
            for channel in allowed_channels[:10]:  # Show first 10
                channels_text += f"‚Ä¢ {channel.title} (@{channel.username})\n"
            if len(allowed_channels) > 10:
                channels_text += f"... –∏ –µ—â–µ {len(allowed_channels) - 10}\n"
            channels_text += "\n"
        
        if blocked_channels:
            channels_text += "<b>üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:</b>\n"
            for channel in blocked_channels[:10]:  # Show first 10
                channels_text += f"‚Ä¢ {channel.title} (@{channel.username})\n"
            if len(blocked_channels) > 10:
                channels_text += f"... –∏ –µ—â–µ {len(blocked_channels) - 10}\n"
            channels_text += "\n"
        
        if pending_channels:
            channels_text += "<b>‚è≥ –û–∂–∏–¥–∞—é—â–∏–µ —Ä–µ—à–µ–Ω–∏—è:</b>\n"
            for channel in pending_channels[:10]:  # Show first 10
                channels_text += f"‚Ä¢ {channel.title} (@{channel.username})\n"
            if len(pending_channels) > 10:
                channels_text += f"... –∏ –µ—â–µ {len(pending_channels) - 10}\n"
        
        if not any([allowed_channels, blocked_channels, pending_channels]):
            channels_text += "–ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
        
        await message.answer(channels_text)
        
    except Exception as e:
        logger.error(f"Error handling channels command: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤")


@admin_router.message(Command("bots"))
async def handle_bots_command(
    message: Message,
    bot_service: BotService
) -> None:
    """Handle /bots command."""
    try:
        # Get bot lists
        whitelisted_bots = await bot_service.get_whitelisted_bots()
        all_bots = await bot_service.get_all_bots()
        
        bots_text = "ü§ñ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞–º–∏</b>\n\n"
        
        if whitelisted_bots:
            bots_text += "<b>‚úÖ –ë–æ—Ç—ã –≤ whitelist:</b>\n"
            for bot in whitelisted_bots[:10]:  # Show first 10
                bots_text += f"‚Ä¢ @{bot.username}\n"
            if len(whitelisted_bots) > 10:
                bots_text += f"... –∏ –µ—â–µ {len(whitelisted_bots) - 10}\n"
            bots_text += "\n"
        
        bots_text += f"<b>–í—Å–µ–≥–æ –±–æ—Ç–æ–≤ –≤ –±–∞–∑–µ:</b> {len(all_bots)}\n"
        bots_text += f"<b>–í whitelist:</b> {len(whitelisted_bots)}\n"
        bots_text += f"<b>–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã:</b> {len(all_bots) - len(whitelisted_bots)}"
        
        await message.answer(bots_text)
        
    except Exception as e:
        logger.error(f"Error handling bots command: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –±–æ—Ç–æ–≤")


@admin_router.message(Command("suspicious"))
async def handle_suspicious_command(
    message: Message,
    profile_service: ProfileService
) -> None:
    """Handle /suspicious command."""
    try:
        # This would need to be implemented in ProfileService
        suspicious_text = (
            "‚ö†Ô∏è <b>–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏</b>\n\n"
            "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ..."
        )
        
        await message.answer(suspicious_text)
        
    except Exception as e:
        logger.error(f"Error handling suspicious command: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π")


@admin_router.message(Command("help"))
async def handle_help_command(message: Message) -> None:
    """Handle /help command."""
    try:
        help_text = (
            "‚ùì <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º</b>\n\n"
            "<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "/start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "/status - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n"
            "/channels - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏\n"
            "/bots - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞–º–∏\n"
            "/suspicious - –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏\n"
            "/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
            "<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏:</b>\n"
            "–ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–∞–Ω–∞–ª–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏:\n"
            "‚úÖ –†–∞–∑—Ä–µ—à–∏—Ç—å - –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª –≤ whitelist\n"
            "üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å - –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª –≤ blacklist\n"
            "üóë –£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ - —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
            "<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞–º–∏:</b>\n"
            "–ë–æ—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±–∞–Ω–∏—Ç—Å—è, –µ—Å–ª–∏ –Ω–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ whitelist\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è whitelist"
        )
        
        await message.answer(help_text)
        
    except Exception as e:
        logger.error(f"Error handling help command: {e}")


@admin_router.callback_query(F.data == "admin_stats")
async def handle_admin_stats_callback(
    callback: CallbackQuery,
    channel_service: ChannelService,
    bot_service: BotService
) -> None:
    """Handle admin stats callback."""
    try:
        # Get statistics
        allowed_channels = await channel_service.get_allowed_channels()
        blocked_channels = await channel_service.get_blocked_channels()
        pending_channels = await channel_service.get_pending_channels()
        whitelisted_bots = await bot_service.get_whitelisted_bots()
        
        stats_text = (
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
            f"<b>–ö–∞–Ω–∞–ª—ã:</b>\n"
            f"‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω—ã: {len(allowed_channels)}\n"
            f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã: {len(blocked_channels)}\n"
            f"‚è≥ –û–∂–∏–¥–∞—é—Ç: {len(pending_channels)}\n\n"
            f"<b>–ë–æ—Ç—ã:</b>\n"
            f"‚úÖ –í whitelist: {len(whitelisted_bots)}"
        )
        
        await callback.message.edit_text(stats_text)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error handling admin stats callback: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
