"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–¥–º–∏–Ω—Å–∫–∏–π —Ä–æ—É—Ç–µ—Ä - —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
"""

import logging

from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message

from app.filters.is_admin_or_silent import IsAdminOrSilentFilter
from app.services.bots import BotService
from app.services.channels import ChannelService
from app.services.moderation import ModerationService
from app.services.profiles import ProfileService
from app.utils.security import safe_format_message, sanitize_for_logging

logger = logging.getLogger(__name__)

# Create router
admin_router = Router()

# Apply admin filter to all handlers in this router
admin_router.message.filter(IsAdminOrSilentFilter())


@admin_router.message(Command("start"))
async def handle_start_command(
    message: Message,
    moderation_service: ModerationService,
    bot_service: BotService,
    channel_service: ChannelService,
    profile_service: ProfileService,
    admin_id: int,
) -> None:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    try:
        logger.info(f"Admin start command from {message.from_user.id}")

        welcome_text = (
            "ü§ñ <b>AntiSpam Bot - –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è</b>\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/status - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n"
            "/channels - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏\n"
            "/bots - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞–º–∏\n"
            "/suspicious - –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏\n"
            "/unban - —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
            "/banned - —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö\n"
            "/sync_bans - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–Ω—ã —Å Telegram\n"
            "/help - –ø–æ–º–æ—â—å"
        )

        await message.answer(welcome_text)
        logger.info(f"Start command response sent to {message.from_user.id}")

    except Exception as e:
        logger.error(f"Error in start command: {e}")


@admin_router.message(Command("status"))
async def handle_status_command(
    message: Message,
    moderation_service: ModerationService,
    bot_service: BotService,
    channel_service: ChannelService,
    admin_id: int,
) -> None:
    """–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞."""
    try:
        logger.info(f"Status command from {message.from_user.id}")

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_bots = await bot_service.get_total_bots_count()
        total_channels = await channel_service.get_total_channels_count()
        banned_users = await moderation_service.get_banned_users(limit=100)
        active_bans = len([ban for ban in banned_users if ban.is_active])

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–∞—Ö (—É–ø—Ä–æ—â—ë–Ω–Ω–æ)
        try:
            channels = await channel_service.get_all_channels()
            channel_info = []
            for channel in channels[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –∫–∞–Ω–∞–ª–æ–≤
                channel_info.append(f"‚Ä¢ {channel.title} <code>({channel.chat_id})</code>")
        except:
            channels = []
            channel_info = []

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —á–∞—Ç—ã –∏–∑ –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç –≤ –±–∞–∑–µ
        known_chats = [
            {
                "title": "Test_FlameOfStyx_bot",
                "chat_id": "-1003094131978",
                "type": "–ì—Ä—É–ø–ø–∞ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤",
            }
        ]

        # –ï—Å–ª–∏ –≤ –±–∞–∑–µ –Ω–µ—Ç –∫–∞–Ω–∞–ª–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ
        if not channel_info:
            for chat in known_chats:
                channel_info.append(f"‚Ä¢ {chat['title']} <code>({chat['chat_id']})</code>")
                channel_info.append(f"  ‚îî –¢–∏–ø: {chat['type']}")
                channel_info.append(f"  ‚îî –°—Ç–∞—Ç—É—Å: ‚úÖ –ê–Ω—Ç–∏—Å–ø–∞–º –∞–∫—Ç–∏–≤–µ–Ω")

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ (—É–ø—Ä–æ—â—ë–Ω–Ω–æ)
        bot_username = "FlameOfStyx_bot"  # –ò–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        bot_id = "7977609078"  # –ò–∑ –ª–æ–≥–æ–≤

        status_text = (
            f"üìä <b>–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
            f"ü§ñ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:</b>\n"
            f"‚Ä¢ Username: @{bot_username}\n"
            f"‚Ä¢ ID: <code>{bot_id}</code>\n"
            f"‚Ä¢ –°—Ç–∞—Ç—É—Å: ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç\n\n"
            f"üì¢ <b>–ü–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã–µ —á–∞—Ç—ã ({total_channels}):</b>\n"
        )

        if channel_info:
            status_text += "\n".join(channel_info)
            if len(channels) > 5:
                status_text += f"\n‚Ä¢ ... –∏ –µ—â—ë {len(channels) - 5} —á–∞—Ç–æ–≤"
        else:
            status_text += "‚Ä¢ –ß–∞—Ç—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö\n"
            status_text += "üí° <b>–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —á–∞—Ç–æ–≤:</b>\n"
            status_text += "1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É\n"
            status_text += "2. –î–∞–π—Ç–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
            status_text += "3. –í–∫–ª—é—á–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–æ—Å—Ç–∞–º\n"
            status_text += "4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /channels –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"

        status_text += f"\n\nüö´ <b>–ú–æ–¥–µ—Ä–∞—Ü–∏—è:</b>\n"
        status_text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –±–∞–Ω–æ–≤: {active_bans}\n"
        status_text += f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(banned_users)}\n\n"
        status_text += f"üëë <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:</b> <code>{admin_id}</code>"

        await message.answer(status_text)
        logger.info(f"Status response sent to {message.from_user.id}")

    except Exception as e:
        logger.error(f"Error in status command: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")


@admin_router.message(Command("channels"))
async def handle_channels_command(
    message: Message,
    channel_service: ChannelService,
    admin_id: int,
) -> None:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏."""
    try:
        logger.info(f"Channels command from {message.from_user.id}")

        channels = await channel_service.get_all_channels()

        if not channels:
            await message.answer("üì¢ –ö–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        channels_text = "üì¢ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏</b>\n\n"
        for channel in channels[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            status = "‚úÖ –ù–∞—Ç–∏–≤–Ω—ã–π" if channel.is_native else "üîç –ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π"
            username = f"@{channel.username}" if channel.username else "–ë–µ–∑ username"
            channels_text += f"{status} <b>{channel.title or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</b>\n"
            channels_text += f"   ID: <code>{channel.telegram_id}</code> | {username}\n"
            if channel.member_count:
                channels_text += f"   üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {channel.member_count}\n"
            channels_text += "\n"

        if len(channels) > 10:
            channels_text += f"... –∏ –µ—â–µ {len(channels) - 10} –∫–∞–Ω–∞–ª–æ–≤"

        await message.answer(channels_text)
        logger.info(f"Channels response sent to {message.from_user.id}")

    except Exception as e:
        logger.error(f"Error in channels command: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤")


@admin_router.message(Command("bots"))
async def handle_bots_command(
    message: Message,
    bot_service: BotService,
    admin_id: int,
) -> None:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞–º–∏."""
    try:
        logger.info(f"Bots command from {message.from_user.id}")

        bots = await bot_service.get_all_bots()

        if not bots:
            await message.answer("ü§ñ –ë–æ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        bots_text = "ü§ñ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞–º–∏</b>\n\n"
        for bot in bots[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            status = "‚úÖ –í–∞–π—Ç–ª–∏—Å—Ç" if bot.is_whitelisted else "‚ùå –ë–ª—ç–∫–ª–∏—Å—Ç"
            bots_text += f"{status} @{bot.username or '–ë–µ–∑ username'}\n"

        if len(bots) > 10:
            bots_text += f"\n... –∏ –µ—â–µ {len(bots) - 10} –±–æ—Ç–æ–≤"

        await message.answer(bots_text)
        logger.info(f"Bots response sent to {message.from_user.id}")

    except Exception as e:
        logger.error(f"Error in bots command: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –±–æ—Ç–æ–≤")


@admin_router.message(Command("suspicious"))
async def handle_suspicious_command(
    message: Message,
    profile_service: ProfileService,
    admin_id: int,
) -> None:
    """–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏."""
    try:
        logger.info(f"Suspicious command from {message.from_user.id}")

        profiles = await profile_service.get_suspicious_profiles()

        if not profiles:
            await message.answer("üë§ –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        profiles_text = "üë§ <b>–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏</b>\n\n"
        for profile in profiles[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            profiles_text += f"ID: {profile.user_id}\n"

        if len(profiles) > 10:
            profiles_text += f"\n... –∏ –µ—â–µ {len(profiles) - 10} –ø—Ä–æ—Ñ–∏–ª–µ–π"

        await message.answer(profiles_text)
        logger.info(f"Suspicious response sent to {message.from_user.id}")

    except Exception as e:
        logger.error(f"Error in suspicious command: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π")


@admin_router.message(Command("unban"))
async def handle_unban_command(
    message: Message,
    moderation_service: ModerationService,
    channel_service: ChannelService,
    profile_service: ProfileService,
    admin_id: int,
) -> None:
    """–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏."""
    try:
        logger.info(f"Unban command from {message.from_user.id}")

        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        args = message.text.split()[1:] if len(message.text.split()) > 1 else []

        if not args:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±–æ—Ä–∞
            banned_users = await moderation_service.get_banned_users(limit=5)

            if not banned_users:
                await message.answer("‚ùå –ù–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                return

            text = "üö´ <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:</b>\n\n"

            for i, log_entry in enumerate(banned_users, 1):
                user_id = log_entry.user_id
                reason = log_entry.reason or "–°–ø–∞–º"
                chat_id = log_entry.chat_id

                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                user_info = await profile_service.get_user_info(user_id)
                user_display = (
                    f"@{user_info['username']}"
                    if user_info["username"]
                    else f"{user_info['first_name']} {user_info['last_name'] or ''}".strip()
                )
                if not user_display or user_display == "Unknown User":
                    user_display = f"User {user_id}"

                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
                chat_info = (
                    await channel_service.get_channel_info(chat_id)
                    if chat_id
                    else {"title": "Unknown Chat", "username": None}
                )
                chat_display = (
                    f"@{chat_info['username']}" if chat_info["username"] else chat_info["title"]
                )

                text += f"{i}. <b>{user_display}</b> <code>({user_id})</code>\n"
                text += f"   –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
                text += f"   –ß–∞—Ç: <b>{chat_display}</b> <code>({chat_id})</code>\n\n"

            text += "üí° <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>\n"
            text += "‚Ä¢ <code>/unban 1</code> - —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ –Ω–æ–º–µ—Ä—É\n"
            text += "‚Ä¢ <code>/unban &lt;user_id&gt; [chat_id]</code> - —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ ID"

            await message.answer(text)
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ –Ω–æ–º–µ—Ä—É
        if args[0].isdigit() and 1 <= int(args[0]) <= 5:
            banned_users = await moderation_service.get_banned_users(limit=5)
            user_index = int(args[0]) - 1

            if 0 <= user_index < len(banned_users):
                log_entry = banned_users[user_index]
                user_id = log_entry.user_id
                chat_id = log_entry.chat_id

                # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                success = await moderation_service.unban_user(
                    user_id=user_id, chat_id=chat_id, admin_id=admin_id
                )

                if success:
                    await message.answer(
                        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{user_id}</code> —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ —á–∞—Ç–µ <code>{chat_id}</code>"
                    )
                    logger.info(f"User {user_id} unbanned by admin {admin_id}")
                else:
                    await message.answer(
                        f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>{user_id}</code>"
                    )
            else:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ user_id –∏ chat_id
        if len(args) < 1:
            await message.answer(
                "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unban &lt;user_id&gt; [chat_id]\n"
                "–ü—Ä–∏–º–µ—Ä: /unban 123456789 -1001234567890"
            )
            return

        user_id = int(args[0])
        chat_id = int(args[1]) if len(args) > 1 else message.chat.id

        # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        success = await moderation_service.unban_user(
            user_id=user_id, chat_id=chat_id, admin_id=admin_id
        )

        if success:
            await message.answer(
                f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{user_id}</code> —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ —á–∞—Ç–µ <code>{chat_id}</code>"
            )
            logger.info(f"User {user_id} unbanned by admin {admin_id}")
        else:
            await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>{user_id}</code>")

    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        logger.error(f"Error in unban command: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")


@admin_router.message(Command("banned"))
async def handle_banned_command(
    message: Message,
    moderation_service: ModerationService,
    channel_service: ChannelService,
    profile_service: ProfileService,
    admin_id: int,
) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π."""
    try:
        logger.info(f"Banned command from {message.from_user.id}")

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        banned_users = await moderation_service.get_banned_users(limit=10)

        if not banned_users:
            await message.answer("üìù –ù–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            return

        text = "üö´ <b>–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n\n"

        for i, log_entry in enumerate(banned_users, 1):
            user_id = log_entry.user_id
            reason = log_entry.reason or "–°–ø–∞–º"
            date_text = (
                log_entry.created_at.strftime("%d.%m.%Y %H:%M")
                if log_entry.created_at
                else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            )
            chat_id = log_entry.chat_id

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user_info = await profile_service.get_user_info(user_id)

            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_info["username"]:
                user_display = f"@{user_info['username']}"
            else:
                first_name = user_info["first_name"] or ""
                last_name = user_info["last_name"] or ""
                full_name = f"{first_name} {last_name}".strip()
                user_display = full_name if full_name else f"User {user_id}"

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
            chat_info = (
                await channel_service.get_channel_info(chat_id)
                if chat_id
                else {"title": "Unknown Chat", "username": None}
            )
            chat_display = (
                f"@{chat_info['username']}" if chat_info["username"] else chat_info["title"]
            )

            text += f"{i}. <b>{user_display}</b> <code>({user_id})</code>\n"
            text += f"   –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
            text += f"   –ß–∞—Ç: <b>{chat_display}</b> <code>({chat_id})</code>\n"
            text += f"   –î–∞—Ç–∞: {date_text}\n\n"

        if len(banned_users) == 10:
            text += "üí° –ü–æ–∫–∞–∑–∞–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"

        await message.answer(text)
        logger.info(f"Banned list sent to {message.from_user.id}")

    except Exception as e:
        logger.error(f"Error in banned command: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö")


@admin_router.message(Command("ban_history"))
async def handle_ban_history_command(
    message: Message,
    moderation_service: ModerationService,
    channel_service: ChannelService,
    admin_id: int,
) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –±–∞–Ω–æ–≤ —Å chat_id –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞."""
    try:
        logger.info(f"Ban history command from {message.from_user.id}")

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –±–∞–Ω–æ–≤
        ban_history = await moderation_service.get_ban_history(limit=10)

        if not ban_history:
            await message.answer("üìù –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏ –±–∞–Ω–æ–≤")
            return

        text = "üìã <b>–ò—Å—Ç–æ—Ä–∏—è –±–∞–Ω–æ–≤ (—Å ID —á–∞—Ç–æ–≤):</b>\n\n"

        for i, log_entry in enumerate(ban_history, 1):
            user_id = log_entry.user_id
            reason = log_entry.reason or "–°–ø–∞–º"
            chat_id = log_entry.chat_id
            date_text = (
                log_entry.created_at.strftime("%d.%m.%Y %H:%M")
                if log_entry.created_at
                else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            )
            is_active = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if log_entry.is_active else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
            chat_info = (
                await channel_service.get_channel_info(chat_id)
                if chat_id
                else {"title": "Unknown Chat", "username": None}
            )
            chat_display = (
                f"@{chat_info['username']}" if chat_info["username"] else chat_info["title"]
            )

            text += f"{i}. <b>User {user_id}</b>\n"
            text += f"   –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
            text += f"   –ß–∞—Ç: <b>{chat_display}</b>\n"
            text += f"   ID —á–∞—Ç–∞: <code>{chat_id}</code>\n"
            text += f"   –°—Ç–∞—Ç—É—Å: {is_active}\n"
            text += f"   –î–∞—Ç–∞: {date_text}\n\n"

        text += "üí° <b>–î–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:</b>\n"
        text += "‚Ä¢ <code>/sync_bans &lt;chat_id&gt;</code>\n"
        text += "‚Ä¢ <code>/sync_bans 1</code> - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ –Ω–æ–º–µ—Ä—É"

        await message.answer(text)
        logger.info(f"Ban history sent to {message.from_user.id}")

    except Exception as e:
        logger.error(f"Error in ban_history command: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –±–∞–Ω–æ–≤")


@admin_router.message(Command("sync_bans"))
async def handle_sync_bans_command(
    message: Message,
    moderation_service: ModerationService,
    channel_service: ChannelService,
    admin_id: int,
) -> None:
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–Ω—ã —Å Telegram API."""
    try:
        logger.info(f"Sync bans command from {message.from_user.id}")

        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        args = message.text.split()[1:] if len(message.text.split()) > 1 else []

        if not args:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —á–∞—Ç—ã —Å –±–∞–Ω–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞
            ban_history = await moderation_service.get_ban_history(limit=10)

            if not ban_history:
                await message.answer("‚ùå –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏ –±–∞–Ω–æ–≤")
                return

            # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ chat_id
            chat_ids = list(set([log.chat_id for log in ban_history if log.chat_id]))

            if not chat_ids:
                await message.answer("‚ùå –ù–µ—Ç —á–∞—Ç–æ–≤ —Å –±–∞–Ω–∞–º–∏")
                return

            text = "üîÑ <b>–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:</b>\n\n"

            for i, chat_id in enumerate(chat_ids[:5], 1):
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
                chat_info = await channel_service.get_channel_info(chat_id)
                chat_display = (
                    f"@{chat_info['username']}" if chat_info["username"] else chat_info["title"]
                )

                # –°—á–∏—Ç–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –±–∞–Ω—ã –≤ —ç—Ç–æ–º —á–∞—Ç–µ
                active_bans = len(
                    [log for log in ban_history if log.chat_id == chat_id and log.is_active]
                )

                text += f"{i}. <b>{chat_display}</b>\n"
                text += f"   ID: <code>{chat_id}</code>\n"
                text += f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö –±–∞–Ω–æ–≤: {active_bans}\n\n"

            text += "üí° <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>\n"
            text += "‚Ä¢ <code>/sync_bans 1</code> - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ –Ω–æ–º–µ—Ä—É\n"
            text += "‚Ä¢ <code>/sync_bans &lt;chat_id&gt;</code> - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ ID\n"
            text += "‚Ä¢ <code>/ban_history</code> - –ø–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –±–∞–Ω–æ–≤"

            await message.answer(text)
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ –Ω–æ–º–µ—Ä—É
        if args[0].isdigit() and 1 <= int(args[0]) <= 5:
            ban_history = await moderation_service.get_ban_history(limit=10)
            chat_ids = list(set([log.chat_id for log in ban_history if log.chat_id]))
            chat_index = int(args[0]) - 1

            if 0 <= chat_index < len(chat_ids):
                chat_id = chat_ids[chat_index]

                result = await moderation_service.sync_bans_from_telegram(chat_id)

                if result["status"] == "success":
                    await message.answer(f"‚úÖ {result['message']}")
                elif result["status"] == "info":
                    await message.answer(f"‚ÑπÔ∏è {result['message']}")
                elif result["status"] == "error":
                    await message.answer(f"‚ùå {result['message']}")
                else:
                    await message.answer(f"‚ö†Ô∏è {result['message']}")
            else:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —á–∞—Ç–∞")
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ chat_id
        chat_id = int(args[0])

        result = await moderation_service.sync_bans_from_telegram(chat_id)

        if result["status"] == "success":
            await message.answer(f"‚úÖ {result['message']}")
        elif result["status"] == "info":
            await message.answer(f"‚ÑπÔ∏è {result['message']}")
        elif result["status"] == "error":
            await message.answer(f"‚ùå {result['message']}")
        else:
            await message.answer(f"‚ö†Ô∏è {result['message']}")

        logger.info(f"Sync bans response sent to {message.from_user.id}")

    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —á–∞—Ç–∞")
    except Exception as e:
        logger.error(f"Error in sync_bans command: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –±–∞–Ω–æ–≤")


@admin_router.message(Command("help"))
async def handle_help_command(
    message: Message,
    admin_id: int,
) -> None:
    """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º."""
    try:
        logger.info(f"Help command from {message.from_user.id}")

        help_text = (
            "ü§ñ <b>AntiSpam Bot - –°–ø—Ä–∞–≤–∫–∞</b>\n\n"
            "üëë <b>–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n"
            "/start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "/status - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n"
            "/channels - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏\n"
            "/bots - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞–º–∏\n"
            "/suspicious - –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏\n"
            "/unban - —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
            "/banned - —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö\n"
            "/ban_history - –∏—Å—Ç–æ—Ä–∏—è –±–∞–Ω–æ–≤ —Å ID —á–∞—Ç–æ–≤\n"
            "/sync_bans - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–Ω—ã —Å Telegram\n"
            "/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
            "üìñ <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n"
            "‚Ä¢ –í—Å–µ –∫–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö\n"
            "‚Ä¢ –ê–Ω—Ç–∏—Å–ø–∞–º —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ –∫–∞–Ω–∞–ª–∞—Ö\n"
            "‚Ä¢ –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É"
        )

        await message.answer(help_text)
        logger.info(f"Help response sent to {message.from_user.id}")

    except Exception as e:
        logger.error(f"Error in help command: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏")
