"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–¥–º–∏–Ω—Å–∫–∏–π —Ä–æ—É—Ç–µ—Ä - —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
"""

import logging

from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message

from app.filters.is_admin_or_silent import IsAdminOrSilentFilter
from app.services.bots import BotService
from app.services.channels import ChannelService
from app.services.moderation import ModerationService
from app.services.profiles import ProfileService
from app.utils.security import safe_format_message, sanitize_for_logging

logger = logging.getLogger(__name__)

# Create router
admin_router = Router()

# Apply admin filter to all handlers in this router
admin_router.message.filter(IsAdminOrSilentFilter())


@admin_router.message(Command("start"))
async def handle_start_command(
    message: Message,
    moderation_service: ModerationService,
    bot_service: BotService,
    channel_service: ChannelService,
    profile_service: ProfileService,
    admin_id: int,
) -> None:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    try:
        logger.info(f"Admin start command from {message.from_user.id}")

        welcome_text = (
            "ü§ñ <b>AntiSpam Bot - –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è</b>\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/status - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n"
            "/channels - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏\n"
            "/bots - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞–º–∏\n"
            "/suspicious - –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏\n"
            "/unban - —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
            "/help - –ø–æ–º–æ—â—å"
        )

        await message.answer(welcome_text)
        logger.info(f"Start command response sent to {message.from_user.id}")

    except Exception as e:
        logger.error(f"Error in start command: {e}")


@admin_router.message(Command("status"))
async def handle_status_command(
    message: Message,
    moderation_service: ModerationService,
    bot_service: BotService,
    channel_service: ChannelService,
    admin_id: int,
) -> None:
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞."""
    try:
        logger.info(f"Status command from {message.from_user.id}")

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_bots = await bot_service.get_total_bots_count()
        total_channels = await channel_service.get_total_channels_count()

        status_text = (
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
            f"ü§ñ –í—Å–µ–≥–æ –±–æ—Ç–æ–≤: {total_bots}\n"
            f"üì¢ –í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤: {total_channels}\n"
            f"üëë –ê–¥–º–∏–Ω ID: {admin_id}\n"
            f"‚úÖ –°—Ç–∞—Ç—É—Å: –†–∞–±–æ—Ç–∞–µ—Ç"
        )

        await message.answer(status_text)
        logger.info(f"Status response sent to {message.from_user.id}")

    except Exception as e:
        logger.error(f"Error in status command: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")


@admin_router.message(Command("channels"))
async def handle_channels_command(
    message: Message,
    channel_service: ChannelService,
    admin_id: int,
) -> None:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏."""
    try:
        logger.info(f"Channels command from {message.from_user.id}")

        channels = await channel_service.get_all_channels()

        if not channels:
            await message.answer("üì¢ –ö–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        channels_text = "üì¢ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏</b>\n\n"
        for channel in channels[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            status = "‚úÖ –ù–∞—Ç–∏–≤–Ω—ã–π" if channel.is_native else "üîç –ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π"
            username = f"@{channel.username}" if channel.username else "–ë–µ–∑ username"
            channels_text += f"{status} <b>{channel.title or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</b>\n"
            channels_text += f"   ID: <code>{channel.telegram_id}</code> | {username}\n"
            if channel.member_count:
                channels_text += f"   üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {channel.member_count}\n"
            channels_text += "\n"

        if len(channels) > 10:
            channels_text += f"... –∏ –µ—â–µ {len(channels) - 10} –∫–∞–Ω–∞–ª–æ–≤"

        await message.answer(channels_text)
        logger.info(f"Channels response sent to {message.from_user.id}")

    except Exception as e:
        logger.error(f"Error in channels command: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤")


@admin_router.message(Command("bots"))
async def handle_bots_command(
    message: Message,
    bot_service: BotService,
    admin_id: int,
) -> None:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞–º–∏."""
    try:
        logger.info(f"Bots command from {message.from_user.id}")

        bots = await bot_service.get_all_bots()

        if not bots:
            await message.answer("ü§ñ –ë–æ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        bots_text = "ü§ñ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞–º–∏</b>\n\n"
        for bot in bots[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            status = "‚úÖ –í–∞–π—Ç–ª–∏—Å—Ç" if bot.is_whitelisted else "‚ùå –ë–ª—ç–∫–ª–∏—Å—Ç"
            bots_text += f"{status} @{bot.username or '–ë–µ–∑ username'}\n"

        if len(bots) > 10:
            bots_text += f"\n... –∏ –µ—â–µ {len(bots) - 10} –±–æ—Ç–æ–≤"

        await message.answer(bots_text)
        logger.info(f"Bots response sent to {message.from_user.id}")

    except Exception as e:
        logger.error(f"Error in bots command: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –±–æ—Ç–æ–≤")


@admin_router.message(Command("suspicious"))
async def handle_suspicious_command(
    message: Message,
    profile_service: ProfileService,
    admin_id: int,
) -> None:
    """–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏."""
    try:
        logger.info(f"Suspicious command from {message.from_user.id}")

        profiles = await profile_service.get_suspicious_profiles()

        if not profiles:
            await message.answer("üë§ –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        profiles_text = "üë§ <b>–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏</b>\n\n"
        for profile in profiles[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            profiles_text += f"ID: {profile.user_id}\n"

        if len(profiles) > 10:
            profiles_text += f"\n... –∏ –µ—â–µ {len(profiles) - 10} –ø—Ä–æ—Ñ–∏–ª–µ–π"

        await message.answer(profiles_text)
        logger.info(f"Suspicious response sent to {message.from_user.id}")

    except Exception as e:
        logger.error(f"Error in suspicious command: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π")


@admin_router.message(Command("unban"))
async def handle_unban_command(
    message: Message,
    moderation_service: ModerationService,
    admin_id: int,
) -> None:
    """–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        logger.info(f"Unban command from {message.from_user.id}")

        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        args = message.text.split()[1:] if len(message.text.split()) > 1 else []

        if len(args) < 1:
            await message.answer(
                "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unban &lt;user_id&gt; [chat_id]\n"
                "–ü—Ä–∏–º–µ—Ä: /unban 123456789 -1001234567890"
            )
            return

        user_id = int(args[0])
        chat_id = int(args[1]) if len(args) > 1 else message.chat.id

        # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        success = await moderation_service.unban_user(
            user_id=user_id, chat_id=chat_id, admin_id=admin_id
        )

        if success:
            await message.answer(
                f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{user_id}</code> —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ —á–∞—Ç–µ <code>{chat_id}</code>"
            )
            logger.info(f"User {user_id} unbanned by admin {admin_id}")
        else:
            await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>{user_id}</code>")

    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        logger.error(f"Error in unban command: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")


@admin_router.message(Command("help"))
async def handle_help_command(
    message: Message,
    admin_id: int,
) -> None:
    """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º."""
    try:
        logger.info(f"Help command from {message.from_user.id}")

        help_text = (
            "ü§ñ <b>AntiSpam Bot - –°–ø—Ä–∞–≤–∫–∞</b>\n\n"
            "üëë <b>–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n"
            "/start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "/status - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n"
            "/channels - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏\n"
            "/bots - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞–º–∏\n"
            "/suspicious - –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏\n"
            "/unban - —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
            "/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
            "üìñ <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n"
            "‚Ä¢ –í—Å–µ –∫–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö\n"
            "‚Ä¢ –ê–Ω—Ç–∏—Å–ø–∞–º —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ –∫–∞–Ω–∞–ª–∞—Ö\n"
            "‚Ä¢ –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É"
        )

        await message.answer(help_text)
        logger.info(f"Help response sent to {message.from_user.id}")

    except Exception as e:
        logger.error(f"Error in help command: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏")
