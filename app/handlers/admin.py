"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–¥–º–∏–Ω—Å–∫–∏–π —Ä–æ—É—Ç–µ—Ä - —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
"""

import logging

from aiogram import Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from app.filters.is_admin_or_silent import IsAdminOrSilentFilter
from app.services.bots import BotService
from app.services.channels import ChannelService
from app.services.help import HelpService
from app.services.limits import LimitsService
from app.services.moderation import ModerationService
from app.services.profiles import ProfileService

# from app.utils.security import safe_format_message, sanitize_for_logging

logger = logging.getLogger(__name__)

# Create router
admin_router = Router()

# Apply admin filter to all handlers in this router
admin_router.message.filter(IsAdminOrSilentFilter())


@admin_router.message(Command("start"))
async def handle_start_command(
    message: Message,
    moderation_service: ModerationService,
    bot_service: BotService,
    channel_service: ChannelService,
    profile_service: ProfileService,
    admin_id: int,
) -> None:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    try:
        if not message.from_user:
            return
        logger.info(f"Admin start command from {message.from_user.id}")

        welcome_text = (
            "ü§ñ <b>AntiSpam Bot - –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è</b>\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/status - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n"
            "/channels - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏\n"
            "/bots - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞–º–∏\n"
            "/suspicious - –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏\n"
            "/unban - —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
            "/banned - —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö\n"
            "/sync_bans - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–Ω—ã —Å Telegram\n"
            "/help - –ø–æ–º–æ—â—å"
        )

        await message.answer(welcome_text)
        logger.info(f"Start command response sent to {message.from_user.id}")

    except Exception as e:
        logger.error(f"Error in start command: {e}")


@admin_router.message(Command("status"))
async def handle_status_command(
    message: Message,
    moderation_service: ModerationService,
    bot_service: BotService,
    channel_service: ChannelService,
    admin_id: int,
) -> None:
    """–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞."""
    try:
        if not message.from_user:
            return
        logger.info(f"Status command from {message.from_user.id}")

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        # total_bots = await bot_service.get_total_bots_count()
        total_channels = await channel_service.get_total_channels_count()
        banned_users = await moderation_service.get_banned_users(limit=100)
        active_bans = len([ban for ban in banned_users if ban.is_active])

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–ø–∞–º–∞
        spam_stats = await moderation_service.get_spam_statistics()
        deleted_messages = spam_stats["deleted_messages"]
        total_actions = spam_stats["total_actions"]

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–∞—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        try:
            channels = await channel_service.get_all_channels()
        except Exception:
            channels = []

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —á–∞—Ç—ã, –≥–¥–µ –±–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω
        known_chats = [
            {
                "title": "Test_FlameOfStyx_bot",
                "chat_id": "-1003094131978",
                "type": "–ì—Ä—É–ø–ø–∞ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤",
            }
        ]

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–∞—Ö
        channel_info = []

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–∞–ª—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        for channel in channels[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –∫–∞–Ω–∞–ª–æ–≤
            channel_info.append(f"‚Ä¢ {channel.title} <code>({channel.telegram_id})</code>")
            channel_info.append("  ‚îî –¢–∏–ø: –ö–∞–Ω–∞–ª")
            channel_info.append("  ‚îî –°—Ç–∞—Ç—É—Å: ‚úÖ –ê–Ω—Ç–∏—Å–ø–∞–º –∞–∫—Ç–∏–≤–µ–Ω")

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —á–∞—Ç—ã (–≥—Ä—É–ø–ø—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤)
        for chat in known_chats:
            channel_info.append(f"‚Ä¢ {chat['title']} <code>({chat['chat_id']})</code>")
            channel_info.append(f"  ‚îî –¢–∏–ø: {chat['type']}")
            channel_info.append("  ‚îî –°—Ç–∞—Ç—É—Å: ‚úÖ –ê–Ω—Ç–∏—Å–ø–∞–º –∞–∫—Ç–∏–≤–µ–Ω")

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ (—É–ø—Ä–æ—â—ë–Ω–Ω–æ)
        bot_username = "FlameOfStyx_bot"  # –ò–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        bot_id = "7977609078"  # –ò–∑ –ª–æ–≥–æ–≤

        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Ç–æ–≤
        total_connected_chats = len(channels) + len(known_chats)

        status_text = (
            "üìä <b>–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
            "ü§ñ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:</b>\n"
            f"‚Ä¢ Username: @{bot_username}\n"
            f"‚Ä¢ ID: <code>{bot_id}</code>\n"
            "‚Ä¢ –°—Ç–∞—Ç—É—Å: ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç\n\n"
            f"üì¢ <b>–ü–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã–µ —á–∞—Ç—ã ({total_connected_chats}):</b>\n"
        )

        if channel_info:
            status_text += "\n".join(channel_info)
            if len(channels) > 5:
                status_text += f"\n‚Ä¢ ... –∏ –µ—â—ë {len(channels) - 5} —á–∞—Ç–æ–≤"
        else:
            status_text += "‚Ä¢ –ß–∞—Ç—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö\n"
            status_text += "üí° <b>–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —á–∞—Ç–æ–≤:</b>\n"
            status_text += "1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É\n"
            status_text += "2. –î–∞–π—Ç–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
            status_text += "3. –í–∫–ª—é—á–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–æ—Å—Ç–∞–º\n"
            status_text += "4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /channels –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"

        status_text += "\n\nüö´ <b>–ú–æ–¥–µ—Ä–∞—Ü–∏—è:</b>\n"
        status_text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –±–∞–Ω–æ–≤: {active_bans}\n"
        status_text += f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(banned_users)}\n"
        status_text += f"‚Ä¢ –£–¥–∞–ª–µ–Ω–æ —Å–ø–∞–º-—Å–æ–æ–±—â–µ–Ω–∏–π: {deleted_messages}\n"
        status_text += f"‚Ä¢ –í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {total_actions}\n\n"
        status_text += f"üëë <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:</b> <code>{admin_id}</code>"

        await message.answer(status_text)
        logger.info(f"Status response sent to {message.from_user.id}")

    except Exception as e:
        logger.error(f"Error in status command: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")


@admin_router.message(Command("channels"))
async def handle_channels_command(
    message: Message,
    channel_service: ChannelService,
    admin_id: int,
) -> None:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏."""
    try:
        if not message.from_user:
            return
        logger.info(f"Channels command from {message.from_user.id}")

        channels = await channel_service.get_all_channels()

        if not channels:
            await message.answer("üì¢ –ö–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        channels_text = "üì¢ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏</b>\n\n"
        for channel in channels[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            status = "‚úÖ –ù–∞—Ç–∏–≤–Ω—ã–π" if channel.is_native else "üîç –ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π"
            username = f"@{channel.username}" if channel.username else "–ë–µ–∑ username"
            channels_text += f"<b>{channel.title or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</b>\n"
            channels_text += f"   ID: <code>{channel.telegram_id}</code> | {username}\n"
            if channel.member_count:
                channels_text += f"   üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {channel.member_count}\n"
            channels_text += "\n"

        if len(channels) > 10:
            channels_text += f"... –∏ –µ—â–µ {len(channels) - 10} –∫–∞–Ω–∞–ª–æ–≤"

        await message.answer(channels_text)
        logger.info(f"Channels response sent to {message.from_user.id}")

    except Exception as e:
        logger.error(f"Error in channels command: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤")


@admin_router.message(Command("bots"))
async def handle_bots_command(
    message: Message,
    bot_service: BotService,
    admin_id: int,
) -> None:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞–º–∏."""
    try:
        if not message.from_user:
            return
        logger.info(f"Bots command from {message.from_user.id}")

        bots = await bot_service.get_all_bots()

        if not bots:
            await message.answer("ü§ñ –ë–æ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        bots_text = "ü§ñ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞–º–∏</b>\n\n"
        for bot in bots[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            status = "‚úÖ –í–∞–π—Ç–ª–∏—Å—Ç" if bot.is_whitelisted else "‚ùå –ë–ª—ç–∫–ª–∏—Å—Ç"
            bots_text += f"{status} @{bot.username or '–ë–µ–∑ username'}\n"

        if len(bots) > 10:
            bots_text += f"\n... –∏ –µ—â–µ {len(bots) - 10} –±–æ—Ç–æ–≤"

        await message.answer(bots_text)
        logger.info(f"Bots response sent to {message.from_user.id}")

    except Exception as e:
        logger.error(f"Error in bots command: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –±–æ—Ç–æ–≤")


@admin_router.message(Command("suspicious"))
async def handle_suspicious_command(
    message: Message,
    profile_service: ProfileService,
    admin_id: int,
) -> None:
    """–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏."""
    try:
        if not message.from_user:
            return
        logger.info(f"Suspicious command from {message.from_user.id}")

        profiles = await profile_service.get_suspicious_profiles()

        if not profiles:
            await message.answer("üë§ –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        profiles_text = "üë§ <b>–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏</b>\n\n"

        for i, profile in enumerate(profiles[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user_info = await profile_service.get_user_info(profile.user_id)

            profiles_text += f"<b>{i}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {profile.user_id}</b>\n"
            profiles_text += f"‚Ä¢ <b>–ò–º—è:</b> {user_info.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            if user_info.get("username"):
                profiles_text += f"‚Ä¢ <b>Username:</b> @{user_info['username']}\n"
            profiles_text += f"‚Ä¢ <b>–°—á–µ—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:</b> {profile.suspicion_score:.2f}\n"

            if profile.linked_chat_title and profile.linked_chat_title.strip():
                profiles_text += f"‚Ä¢ <b>–°–≤—è–∑–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª:</b> {profile.linked_chat_title}\n"
                if profile.linked_chat_username and profile.linked_chat_username.strip():
                    profiles_text += f"‚Ä¢ <b>Username –∫–∞–Ω–∞–ª–∞:</b> @{profile.linked_chat_username}\n"

            if profile.detected_patterns and profile.detected_patterns.strip():
                patterns = profile.detected_patterns.split(",") if profile.detected_patterns else []
                pattern_names = {
                    "short_first_name": "–ö–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è",
                    "short_last_name": "–ö–æ—Ä–æ—Ç–∫–∞—è —Ñ–∞–º–∏–ª–∏—è",
                    "no_identifying_info": "–ù–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤",
                    "bot_like_username": "Bot-–ø–æ–¥–æ–±–Ω—ã–π username",
                    "no_username": "–ù–µ—Ç username",
                    "no_last_name": "–ù–µ—Ç —Ñ–∞–º–∏–ª–∏–∏",
                    "bot_like_first_name": "Bot-–ø–æ–¥–æ–±–Ω–æ–µ –∏–º—è",
                }
                pattern_text = ", ".join([pattern_names.get(p, p) for p in patterns if p])
                profiles_text += f"‚Ä¢ <b>–ü–∞—Ç—Ç–µ—Ä–Ω—ã:</b> {pattern_text}\n"

            if profile.is_reviewed:
                status = (
                    "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω"
                    if profile.is_confirmed_suspicious
                    else "‚ùå –õ–æ–∂–Ω–æ–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ"
                )
                profiles_text += f"‚Ä¢ <b>–°—Ç–∞—Ç—É—Å:</b> {status}\n"
            else:
                profiles_text += f"‚Ä¢ <b>–°—Ç–∞—Ç—É—Å:</b> ‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏\n"

            profiles_text += f"‚Ä¢ <b>–î–∞—Ç–∞:</b> {profile.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"

        if len(profiles) > 10:
            profiles_text += f"<i>... –∏ –µ—â–µ {len(profiles) - 10} –ø—Ä–æ—Ñ–∏–ª–µ–π</i>"

        await message.answer(profiles_text)
        logger.info(f"Suspicious response sent to {message.from_user.id}")

    except Exception as e:
        logger.error(f"Error in suspicious command: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π")


@admin_router.message(Command("reset_suspicious"))
async def handle_reset_suspicious_command(message: Message, profile_service: ProfileService):
    """Reset suspicious profile status for testing."""
    try:
        # Reset all suspicious profiles to unreviewed status
        result = await profile_service.reset_suspicious_profiles()

        if result > 0:
            await message.answer(f"‚úÖ –°–±—Ä–æ—à–µ–Ω–æ —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π: {result}")
        else:
            await message.answer("‚ÑπÔ∏è –ù–µ—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–ª—è —Å–±—Ä–æ—Å–∞")

    except Exception as e:
        logger.error(f"Error resetting suspicious profiles: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Å—Ç–∞—Ç—É—Å–æ–≤: {e}")


@admin_router.message(Command("recalculate_suspicious"))
async def handle_recalculate_suspicious_command(message: Message, profile_service: ProfileService):
    """Recalculate suspicious profiles with new weights."""
    try:
        # Get all suspicious profiles
        profiles = await profile_service.get_suspicious_profiles(limit=100)

        if not profiles:
            await message.answer("‚ÑπÔ∏è –ù–µ—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞")
            return

        updated_count = 0
        for profile in profiles:
            # Get user info and recalculate
            user_info = await profile_service.get_user_info(profile.user_id)
            if user_info:
                # Create a mock User object for recalculation
                from aiogram.types import User

                mock_user = User(
                    id=profile.user_id,
                    is_bot=False,
                    first_name=user_info.get("first_name", ""),
                    last_name=user_info.get("last_name"),
                    username=user_info.get("username"),
                    language_code="ru",
                )

                # Recalculate analysis
                analysis_result = await profile_service._perform_profile_analysis(mock_user)

                # Update profile with new score
                if analysis_result["suspicion_score"] != profile.suspicion_score:
                    profile.suspicion_score = analysis_result["suspicion_score"]
                    profile.detected_patterns = ",".join(analysis_result["patterns"])
                    profile.is_suspicious = analysis_result["is_suspicious"]
                    updated_count += 1

        if updated_count > 0:
            await profile_service.db.commit()
            await message.answer(f"‚úÖ –ü–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–æ –ø—Ä–æ—Ñ–∏–ª–µ–π: {updated_count}")
        else:
            await message.answer("‚ÑπÔ∏è –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ø—Ä–æ—Ñ–∏–ª—è—Ö")

    except Exception as e:
        logger.error(f"Error recalculating suspicious profiles: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—á–µ—Ç–µ: {e}")


@admin_router.message(Command("cleanup_duplicates"))
async def handle_cleanup_duplicates_command(message: Message, profile_service: ProfileService):
    """Clean up duplicate suspicious profiles."""
    try:
        from sqlalchemy import delete, func, select

        from app.models.suspicious_profile import SuspiciousProfile

        # Find users with multiple profiles
        result = await profile_service.db.execute(
            select(SuspiciousProfile.user_id, func.count(SuspiciousProfile.id).label("count"))
            .group_by(SuspiciousProfile.user_id)
            .having(func.count(SuspiciousProfile.id) > 1)
        )

        duplicates = result.fetchall()

        if not duplicates:
            await message.answer("‚ÑπÔ∏è –î—É–±–ª–∏—Ä—É—é—â–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return

        cleaned_count = 0
        for user_id, count in duplicates:
            # Keep the most recent profile, delete others
            profiles = await profile_service.db.execute(
                select(SuspiciousProfile)
                .where(SuspiciousProfile.user_id == user_id)
                .order_by(SuspiciousProfile.created_at.desc())
            )
            profiles_list = profiles.scalars().all()

            # Delete all except the first (most recent)
            for profile in profiles_list[1:]:
                await profile_service.db.delete(profile)
                cleaned_count += 1

        await profile_service.db.commit()
        await message.answer(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π: {cleaned_count}")

    except Exception as e:
        logger.error(f"Error cleaning up duplicates: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")


@admin_router.message(Command("settings"))
async def handle_settings_command(message: Message) -> None:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞."""
    try:
        if not message.from_user:
            return
        logger.info(f"Settings command from {message.from_user.id}")

        settings_text = (
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞</b>\n\n"
            "üîß <b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n"
            "‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π: ‚úÖ –í–∫–ª—é—á–µ–Ω–∞\n"
            "‚Ä¢ –ü–æ—Ä–æ–≥ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: 0.2\n"
            "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ—Ä–∞—Ü–∏—è: ‚úÖ –í–∫–ª—é—á–µ–Ω–∞\n"
            "‚Ä¢ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ: ‚úÖ –í–∫–ª—é—á–µ–Ω–æ\n\n"
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            "‚Ä¢ Middleware –∞–∫—Ç–∏–≤–µ–Ω\n"
            "‚Ä¢ DI —Å–µ—Ä–≤–∏—Å—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã\n"
            "‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞\n\n"
            "‚ÑπÔ∏è –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É"
        )

        await message.answer(settings_text)
        if message.from_user:
            logger.info(f"Settings response sent to {message.from_user.id}")

    except Exception as e:
        logger.error(f"Error in settings command: {e}")


@admin_router.message(Command("setlimits"))
async def handle_setlimits_command(message: Message, limits_service: LimitsService) -> None:
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–∏–º–∏—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã."""
    try:
        if not message.from_user:
            return
        logger.info(f"Setlimits command from {message.from_user.id}")

        limits_text = (
            "üîí <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞–º–∏</b>\n\n" "üëë <b>–î–æ—Å—Ç—É–ø–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º</b>\n\n"
        ) + limits_service.get_limits_display()

        await message.answer(limits_text)
        if message.from_user:
            logger.info(f"Setlimits response sent to {message.from_user.id}")

    except Exception as e:
        logger.error(f"Error in setlimits command: {e}")


@admin_router.message(Command("setlimit"))
async def handle_setlimit_command(message: Message, limits_service: LimitsService) -> None:
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞."""
    try:
        if not message.from_user:
            return
        logger.info(f"Setlimit command from {message.from_user.id}")

        # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É: /setlimit <—Ç–∏–ø> <–∑–Ω–∞—á–µ–Ω–∏–µ>
        text = message.text or ""
        parts = text.split()

        if len(parts) < 3:
            await message.answer(
                "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã</b>\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /setlimit &lt;—Ç–∏–ø&gt; &lt;–∑–Ω–∞—á–µ–Ω–∏–µ&gt;\n\n"
                "üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã:</b>\n"
                "‚Ä¢ messages - –º–∞–∫—Å–∏–º—É–º —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –º–∏–Ω—É—Ç—É\n"
                "‚Ä¢ links - –º–∞–∫—Å–∏–º—É–º —Å—Å—ã–ª–æ–∫ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏\n"
                "‚Ä¢ ban - –≤—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤ —á–∞—Å–∞—Ö\n"
                "‚Ä¢ threshold - –ø–æ—Ä–æ–≥ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏\n\n"
                "üí° <b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
                "‚Ä¢ /setlimit messages 15\n"
                "‚Ä¢ /setlimit links 5\n"
                "‚Ä¢ /setlimit ban 48\n"
                "‚Ä¢ /setlimit threshold 0.3"
            )
            return

        limit_type = parts[1].lower()
        try:
            value = float(parts[2]) if limit_type == "threshold" else int(parts[2])
        except ValueError:
            await message.answer("‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
            return

        # –ú–∞–ø–ø–∏–Ω–≥ —Ç–∏–ø–æ–≤ –ª–∏–º–∏—Ç–æ–≤
        limit_mapping = {
            "messages": "max_messages_per_minute",
            "links": "max_links_per_message",
            "ban": "ban_duration_hours",
            "threshold": "suspicion_threshold",
        }

        if limit_type not in limit_mapping:
            await message.answer(
                "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ª–∏–º–∏—Ç–∞</b>\n\n"
                "üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã:</b>\n"
                "‚Ä¢ messages - –º–∞–∫—Å–∏–º—É–º —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –º–∏–Ω—É—Ç—É\n"
                "‚Ä¢ links - –º–∞–∫—Å–∏–º—É–º —Å—Å—ã–ª–æ–∫ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏\n"
                "‚Ä¢ ban - –≤—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤ —á–∞—Å–∞—Ö\n"
                "‚Ä¢ threshold - –ø–æ—Ä–æ–≥ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
            )
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏–º–∏—Ç
        success = limits_service.update_limit(limit_mapping[limit_type], value)

        if success:
            await message.answer(
                f"‚úÖ <b>–õ–∏–º–∏—Ç –æ–±–Ω–æ–≤–ª–µ–Ω!</b>\n\n"
                f"üìä <b>{limit_type}</b> –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ <b>{value}</b>\n\n"
                "üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø—è—Ç –≤ —Å–∏–ª—É –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"
            )
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞!")

        if message.from_user:
            logger.info(f"Setlimit response sent to {message.from_user.id}")

    except Exception as e:
        logger.error(f"Error in setlimit command: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã!")


@admin_router.message(Command("unban"))
async def handle_unban_command(
    message: Message,
    moderation_service: ModerationService,
    channel_service: ChannelService,
    profile_service: ProfileService,
    admin_id: int,
) -> None:
    """–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏."""
    try:
        if not message.from_user:
            return
        logger.info(f"Unban command from {message.from_user.id}")

        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        if not message.text:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return
        args = message.text.split()[1:] if len(message.text.split()) > 1 else []

        if not args:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±–æ—Ä–∞
            banned_users = await moderation_service.get_banned_users(limit=5)

            if not banned_users:
                await message.answer("‚ùå –ù–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                return

            text = "üö´ <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:</b>\n\n"

            for i, log_entry in enumerate(banned_users, 1):
                user_id = log_entry.user_id
                reason = log_entry.reason or "–°–ø–∞–º"
                chat_id = log_entry.chat_id

                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                user_info = await profile_service.get_user_info(user_id)
                user_display = (
                    f"@{user_info['username']}"
                    if user_info["username"]
                    else f"{user_info['first_name']} {user_info['last_name'] or ''}".strip()
                )
                if not user_display or user_display == "Unknown User":
                    user_display = f"User {user_id}"

                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
                chat_info = (
                    await channel_service.get_channel_info(chat_id)
                    if chat_id
                    else {"title": "Unknown Chat", "username": None}
                )
                chat_display = (
                    f"@{chat_info['username']}" if chat_info["username"] else chat_info["title"]
                )

                text += f"{i}. <b>{user_display}</b> <code>({user_id})</code>\n"
                text += f"   –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
                text += f"   –ß–∞—Ç: <b>{chat_display}</b> <code>({chat_id})</code>\n\n"

            text += "üí° <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>\n"
            text += "‚Ä¢ <code>/unban 1</code> - —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ –Ω–æ–º–µ—Ä—É\n"
            text += "‚Ä¢ <code>/unban &lt;user_id&gt; [chat_id]</code> - —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ ID"

            await message.answer(text)
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ –Ω–æ–º–µ—Ä—É
        if args[0].isdigit() and 1 <= int(args[0]) <= 5:
            banned_users = await moderation_service.get_banned_users(limit=5)
            user_index = int(args[0]) - 1

            if 0 <= user_index < len(banned_users):
                log_entry = banned_users[user_index]
                user_id = log_entry.user_id
                chat_id = log_entry.chat_id

                # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                success = await moderation_service.unban_user(
                    user_id=user_id, chat_id=chat_id, admin_id=admin_id
                )

                if success:
                    await message.answer(
                        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{user_id}</code> —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ —á–∞—Ç–µ <code>{chat_id}</code>"
                    )
                    logger.info(f"User {user_id} unbanned by admin {admin_id}")
                else:
                    await message.answer(
                        f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>{user_id}</code>"
                    )
            else:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ user_id –∏ chat_id
        if len(args) < 1:
            await message.answer(
                "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unban &lt;user_id&gt; [chat_id]\n"
                "–ü—Ä–∏–º–µ—Ä: /unban 123456789 -1001234567890"
            )
            return

        user_id = int(args[0])
        chat_id = int(args[1]) if len(args) > 1 else message.chat.id

        # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        success = await moderation_service.unban_user(
            user_id=user_id, chat_id=chat_id, admin_id=admin_id
        )

        if success:
            await message.answer(
                f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{user_id}</code> —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ —á–∞—Ç–µ <code>{chat_id}</code>"
            )
            logger.info(f"User {user_id} unbanned by admin {admin_id}")
        else:
            await message.answer(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>{user_id}</code>"
            )

    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        logger.error(f"Error in unban command: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")


@admin_router.message(Command("banned"))
async def handle_banned_command(
    message: Message,
    moderation_service: ModerationService,
    channel_service: ChannelService,
    profile_service: ProfileService,
    admin_id: int,
) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π."""
    try:
        if not message.from_user:
            return
        logger.info(f"Banned command from {message.from_user.id}")

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        banned_users = await moderation_service.get_banned_users(limit=10)

        if not banned_users:
            await message.answer("üìù –ù–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            return

        text = "üö´ <b>–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n\n"

        for i, log_entry in enumerate(banned_users, 1):
            user_id = log_entry.user_id
            reason = log_entry.reason or "–°–ø–∞–º"
            date_text = (
                log_entry.created_at.strftime("%d.%m.%Y %H:%M")
                if log_entry.created_at
                else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            )
            chat_id = log_entry.chat_id

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user_info = await profile_service.get_user_info(user_id)

            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_info["username"]:
                user_display = f"@{user_info['username']}"
            else:
                first_name = user_info["first_name"] or ""
                last_name = user_info["last_name"] or ""
                full_name = f"{first_name} {last_name}".strip()
                user_display = full_name if full_name else f"User {user_id}"

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
            chat_info = (
                await channel_service.get_channel_info(chat_id)
                if chat_id
                else {"title": "Unknown Chat", "username": None}
            )
            chat_display = (
                f"@{chat_info['username']}" if chat_info["username"] else chat_info["title"]
            )

            text += f"{i}. <b>{user_display}</b> <code>({user_id})</code>\n"
            text += f"   –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
            text += f"   –ß–∞—Ç: <b>{chat_display}</b> <code>({chat_id})</code>\n"
            text += f"   –î–∞—Ç–∞: {date_text}\n\n"

        if len(banned_users) == 10:
            text += "üí° –ü–æ–∫–∞–∑–∞–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"

        await message.answer(text)
        logger.info(f"Banned list sent to {message.from_user.id}")

    except Exception as e:
        logger.error(f"Error in banned command: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö")


@admin_router.message(Command("ban_history"))
async def handle_ban_history_command(
    message: Message,
    moderation_service: ModerationService,
    channel_service: ChannelService,
    admin_id: int,
) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –±–∞–Ω–æ–≤ —Å chat_id –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞."""
    try:
        if not message.from_user:
            return
        logger.info(f"Ban history command from {message.from_user.id}")

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –±–∞–Ω–æ–≤
        ban_history = await moderation_service.get_ban_history(limit=10)

        if not ban_history:
            await message.answer("üìù –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏ –±–∞–Ω–æ–≤")
            return

        text = "üìã <b>–ò—Å—Ç–æ—Ä–∏—è –±–∞–Ω–æ–≤ (—Å ID —á–∞—Ç–æ–≤):</b>\n\n"

        for i, log_entry in enumerate(ban_history, 1):
            user_id = log_entry.user_id
            reason = log_entry.reason or "–°–ø–∞–º"
            chat_id = log_entry.chat_id
            date_text = (
                log_entry.created_at.strftime("%d.%m.%Y %H:%M")
                if log_entry.created_at
                else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            )
            is_active = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if log_entry.is_active else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
            chat_info = (
                await channel_service.get_channel_info(chat_id)
                if chat_id
                else {"title": "Unknown Chat", "username": None}
            )
            chat_display = (
                f"@{chat_info['username']}" if chat_info["username"] else chat_info["title"]
            )

            text += f"{i}. <b>User {user_id}</b>\n"
            text += f"   –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
            text += f"   –ß–∞—Ç: <b>{chat_display}</b>\n"
            text += f"   ID —á–∞—Ç–∞: <code>{chat_id}</code>\n"
            text += f"   –°—Ç–∞—Ç—É—Å: {is_active}\n"
            text += f"   –î–∞—Ç–∞: {date_text}\n\n"

        text += "üí° <b>–î–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:</b>\n"
        text += "‚Ä¢ <code>/sync_bans &lt;chat_id&gt;</code>\n"
        text += "‚Ä¢ <code>/sync_bans 1</code> - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ –Ω–æ–º–µ—Ä—É"

        await message.answer(text)
        logger.info(f"Ban history sent to {message.from_user.id}")

    except Exception as e:
        logger.error(f"Error in ban_history command: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –±–∞–Ω–æ–≤")


@admin_router.message(Command("sync_bans"))
async def handle_sync_bans_command(
    message: Message,
    moderation_service: ModerationService,
    channel_service: ChannelService,
    admin_id: int,
) -> None:
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–Ω—ã —Å Telegram API."""
    try:
        if not message.from_user:
            return
        logger.info(f"Sync bans command from {message.from_user.id}")

        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        if not message.text:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return
        args = message.text.split()[1:] if len(message.text.split()) > 1 else []

        if not args:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —á–∞—Ç—ã —Å –±–∞–Ω–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞
            ban_history = await moderation_service.get_ban_history(limit=10)

            if not ban_history:
                await message.answer("‚ùå –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏ –±–∞–Ω–æ–≤")
                return

            # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ chat_id
            chat_ids = list(set([log.chat_id for log in ban_history if log.chat_id]))

            if not chat_ids:
                await message.answer("‚ùå –ù–µ—Ç —á–∞—Ç–æ–≤ —Å –±–∞–Ω–∞–º–∏")
                return

            text = "üîÑ <b>–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:</b>\n\n"

            for i, chat_id in enumerate(chat_ids[:5], 1):
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
                chat_info = await channel_service.get_channel_info(chat_id)
                chat_display = (
                    f"@{chat_info['username']}" if chat_info["username"] else chat_info["title"]
                )

                # –°—á–∏—Ç–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –±–∞–Ω—ã –≤ —ç—Ç–æ–º —á–∞—Ç–µ
                active_bans = len(
                    [log for log in ban_history if log.chat_id == chat_id and log.is_active]
                )

                text += f"{i}. <b>{chat_display}</b>\n"
                text += f"   ID: <code>{chat_id}</code>\n"
                text += f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö –±–∞–Ω–æ–≤: {active_bans}\n\n"

            text += "üí° <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>\n"
            text += "‚Ä¢ <code>/sync_bans 1</code> - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ –Ω–æ–º–µ—Ä—É\n"
            text += "‚Ä¢ <code>/sync_bans &lt;chat_id&gt;</code> - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ ID\n"
            text += "‚Ä¢ <code>/ban_history</code> - –ø–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –±–∞–Ω–æ–≤"

            await message.answer(text)
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ –Ω–æ–º–µ—Ä—É
        if args[0].isdigit() and 1 <= int(args[0]) <= 5:
            ban_history = await moderation_service.get_ban_history(limit=10)
            chat_ids = list(set([log.chat_id for log in ban_history if log.chat_id]))
            chat_index = int(args[0]) - 1

            if 0 <= chat_index < len(chat_ids):
                chat_id = chat_ids[chat_index]

                result = await moderation_service.sync_bans_from_telegram(chat_id)

                if result["status"] == "success":
                    await message.answer(f"‚úÖ {result['message']}")
                elif result["status"] == "info":
                    await message.answer(f"‚ÑπÔ∏è {result['message']}")
                elif result["status"] == "error":
                    await message.answer(f"‚ùå {result['message']}")
                else:
                    await message.answer(f"‚ö†Ô∏è {result['message']}")
            else:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —á–∞—Ç–∞")
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ chat_id
        chat_id = int(args[0])

        result = await moderation_service.sync_bans_from_telegram(chat_id)

        if result["status"] == "success":
            await message.answer(f"‚úÖ {result['message']}")
        elif result["status"] == "info":
            await message.answer(f"‚ÑπÔ∏è {result['message']}")
        elif result["status"] == "error":
            await message.answer(f"‚ùå {result['message']}")
        else:
            await message.answer(f"‚ö†Ô∏è {result['message']}")

        logger.info(f"Sync bans response sent to {message.from_user.id}")

    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —á–∞—Ç–∞")
    except Exception as e:
        logger.error(f"Error in sync_bans command: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –±–∞–Ω–æ–≤")


@admin_router.message(Command("help"))
async def handle_help_command(
    message: Message,
    help_service: HelpService,
) -> None:
    """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º."""
    try:
        if not message.from_user:
            return
        logger.info(f"Help command from {message.from_user.id}")

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º HelpService –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Å–ø—Ä–∞–≤–∫–∏
        help_text = help_service.get_main_help(is_admin=True)

        await message.answer(help_text)
        if message.from_user:
            logger.info(f"Help response sent to {message.from_user.id}")

    except Exception as e:
        logger.error(f"Error in help command: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –¥–ª—è –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π
@admin_router.callback_query(lambda c: c.data and c.data.startswith("ban_suspicious:"))
async def handle_ban_suspicious_callback(
    callback_query: CallbackQuery,
    moderation_service: ModerationService,
    profile_service: ProfileService,
    admin_id: int,
) -> None:
    """–ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        if not callback_query.from_user:
            return

        user_id = int(callback_query.data.split(":")[1]) if callback_query.data else 0

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = await profile_service.get_user_info(user_id)

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—á–µ—Ç–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        profile = await profile_service._get_suspicious_profile(user_id)
        suspicion_score = profile.suspicion_score if profile else 0.0

        # –ë–∞–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        success = await moderation_service.ban_user(
            user_id=user_id,
            chat_id=callback_query.message.chat.id if callback_query.message else 0,
            reason=f"–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å (—Å—á–µ—Ç: {suspicion_score:.2f})",
            admin_id=admin_id,
        )

        if success:
            # –û—Ç–º–µ—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∫–∞–∫ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π
            await profile_service.mark_profile_as_reviewed(
                user_id=user_id,
                admin_id=admin_id,
                is_confirmed=True,
                notes="–ó–∞–±–∞–Ω–µ–Ω –∑–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å",
            )

            await callback_query.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω")
            if callback_query.message:
                await callback_query.message.edit_text(
                    f"üö´ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω</b>\n\n"
                    f"ID: {user_id}\n"
                    f"–ò–º—è: {user_info.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                    f"–ü—Ä–∏—á–∏–Ω–∞: –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å"
                )
        else:
            await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

    except Exception as e:
        logger.error(f"Error in ban_suspicious callback: {e}")
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")


@admin_router.callback_query(lambda c: c.data and c.data.startswith("watch_suspicious:"))
async def handle_watch_suspicious_callback(
    callback_query: CallbackQuery,
    profile_service: ProfileService,
    admin_id: int,
) -> None:
    """–ü–æ–º–µ—Ç–∏—Ç—å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è."""
    try:
        if not callback_query.from_user:
            return

        user_id = int(callback_query.data.split(":")[1]) if callback_query.data else 0

        # –û—Ç–º–µ—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∫–∞–∫ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π, –Ω–æ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π
        await profile_service.mark_profile_as_reviewed(
            user_id=user_id, admin_id=admin_id, is_confirmed=False, notes="–ü–æ–º–µ—á–µ–Ω –¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è"
        )

        await callback_query.answer("üëÄ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è")
        if callback_query.message:
            await callback_query.message.edit_text(
                f"üëÄ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ</b>\n\n"
                f"ID: {user_id}\n"
                f"–°—Ç–∞—Ç—É—Å: –ù–∞–±–ª—é–¥–µ–Ω–∏–µ"
            )

    except Exception as e:
        logger.error(f"Error in watch_suspicious callback: {e}")
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")


@admin_router.callback_query(lambda c: c.data and c.data.startswith("allow_suspicious:"))
async def handle_allow_suspicious_callback(
    callback_query: CallbackQuery,
    profile_service: ProfileService,
    admin_id: int,
) -> None:
    """–†–∞–∑—Ä–µ—à–∏—Ç—å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–ª–æ–∂–Ω–æ–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ)."""
    try:
        if not callback_query.from_user:
            return

        user_id = int(callback_query.data.split(":")[1]) if callback_query.data else 0

        # –û—Ç–º–µ—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∫–∞–∫ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π –∏ –ª–æ–∂–Ω–æ–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ
        await profile_service.mark_profile_as_reviewed(
            user_id=user_id,
            admin_id=admin_id,
            is_confirmed=False,
            notes="–õ–æ–∂–Ω–æ–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ - —Ä–∞–∑—Ä–µ—à–µ–Ω",
        )

        await callback_query.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑—Ä–µ—à–µ–Ω")
        if callback_query.message:
            await callback_query.message.edit_text(
                f"‚úÖ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑—Ä–µ—à–µ–Ω</b>\n\n"
                f"ID: {user_id}\n"
                f"–°—Ç–∞—Ç—É—Å: –õ–æ–∂–Ω–æ–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ"
            )

    except Exception as e:
        logger.error(f"Error in allow_suspicious callback: {e}")
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
