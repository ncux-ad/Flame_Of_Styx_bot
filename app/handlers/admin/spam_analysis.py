"""
–ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–ø–∞–º–∞.
"""

import logging
from datetime import datetime, timedelta
from typing import List, Dict, Any

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from app.filters.is_admin_or_silent import IsAdminOrSilentFilter
from app.keyboards.inline import get_spam_analysis_keyboard
from app.utils.pii_protection import secure_logger

logger = logging.getLogger(__name__)

router = Router()
# –§–∏–ª—å—Ç—Ä –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ —É—Ä–æ–≤–Ω–µ admin_router
# router.message.filter(IsAdminOrSilentFilter())
# router.callback_query.filter(IsAdminOrSilentFilter())


@router.message(Command("spam_analysis"), IsAdminOrSilentFilter())
async def spam_analysis_menu(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∞–Ω–∞–ª–∏–∑–∞ —Å–ø–∞–º–∞."""
    try:
        logger.info(f"Spam analysis menu requested by user {message.from_user.id}")
        keyboard = get_spam_analysis_keyboard()
        
        await message.answer(
            "üîç <b>–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö —Å–ø–∞–º–∞</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        logger.info(f"Spam analysis menu sent to user {message.from_user.id}")
    except Exception as e:
        logger.error(f"Error in spam_analysis_menu: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é –∞–Ω–∞–ª–∏–∑–∞ —Å–ø–∞–º–∞")


@router.callback_query(F.data == "spam_stats")
async def show_spam_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–ø–∞–º–∞."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        spam_data = secure_logger.get_spam_analysis_data(days=30)
        
        if not spam_data:
            await callback.message.edit_text(
                "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–ø–∞–º–∞**\n\n"
                "‚ùå –î–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n"
                "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ –ø–æ–ª–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ.",
                parse_mode="Markdown"
            )
            return
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        total_entries = len(spam_data)
        profile_analyses = [d for d in spam_data if d.get('additional_data', {}).get('log_type') == 'profile_analysis']
        link_analyses = [d for d in spam_data if d.get('additional_data', {}).get('log_type') == 'spam_analysis']
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–æ—Ñ–∏–ª—è–º
        suspicious_profiles = len([p for p in profile_analyses if p.get('analysis_result', {}).get('profile_analysis', {}).get('is_suspicious', False)])
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Å—ã–ª–∫–∞–º
        total_bot_links = sum(d.get('analysis_result', {}).get('bot_links_count', 0) for d in link_analyses)
        total_suspicious = sum(d.get('analysis_result', {}).get('total_suspicious', 0) for d in link_analyses)
        
        # –¢–æ–ø –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        pattern_counts = {}
        for entry in profile_analyses:
            patterns = entry.get('analysis_result', {}).get('profile_analysis', {}).get('patterns', [])
            for pattern in patterns:
                pattern_counts[pattern] = pattern_counts.get(pattern, 0) + 1
        
        top_patterns = sorted(pattern_counts.items(), key=lambda x: x[1], reverse=True)[:5]
        
        stats_text = (
            "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–ø–∞–º–∞ (30 –¥–Ω–µ–π)**\n\n"
            f"üìà **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total_entries}\n"
            f"‚Ä¢ –ê–Ω–∞–ª–∏–∑–æ–≤ –ø—Ä–æ—Ñ–∏–ª–µ–π: {len(profile_analyses)}\n"
            f"‚Ä¢ –ê–Ω–∞–ª–∏–∑–æ–≤ —Å—Å—ã–ª–æ–∫: {len(link_analyses)}\n\n"
            f"üö® **–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏:**\n"
            f"‚Ä¢ –ù–∞–π–¥–µ–Ω–æ: {suspicious_profiles}\n"
            f"‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç: {suspicious_profiles/len(profile_analyses)*100:.1f}%\n\n"
            f"üîó **–°—Å—ã–ª–∫–∏ –∏ –º–µ–¥–∏–∞:**\n"
            f"‚Ä¢ –ë–æ—Ç-—Å—Å—ã–ª–∫–∏: {total_bot_links}\n"
            f"‚Ä¢ –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö: {total_suspicious}\n\n"
            f"üèÜ **–¢–æ–ø –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤:**\n"
        )
        
        for pattern, count in top_patterns:
            stats_text += f"‚Ä¢ {pattern}: {count}\n"
        
        await callback.message.edit_text(
            stats_text,
            reply_markup=get_spam_analysis_keyboard(),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–ø–∞–º–∞: {e}")
        await callback.message.edit_text(
            "‚ùå **–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏**\n\n"
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}",
            reply_markup=get_spam_analysis_keyboard(),
            parse_mode="Markdown"
        )


@router.callback_query(F.data == "spam_export")
async def export_spam_data(callback: CallbackQuery):
    """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö —Å–ø–∞–º–∞."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        spam_data = secure_logger.get_spam_analysis_data(days=7)
        
        if not spam_data:
            await callback.message.edit_text(
                "üì§ **–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö —Å–ø–∞–º–∞**\n\n"
                "‚ùå –î–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                reply_markup=get_spam_analysis_keyboard(),
                parse_mode="Markdown"
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏
        filename = f"spam_analysis_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        
        import json
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(spam_data, f, ensure_ascii=False, indent=2)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        with open(filename, 'rb') as f:
            await callback.message.answer_document(
                document=f,
                caption=f"üì§ **–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö —Å–ø–∞–º–∞**\n\n"
                        f"üìÖ –ü–µ—Ä–∏–æ–¥: –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π\n"
                        f"üìä –ó–∞–ø–∏—Å–µ–π: {len(spam_data)}\n"
                        f"üìÅ –§–∞–π–ª: {filename}",
                parse_mode="Markdown"
            )
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        import os
        os.remove(filename)
        
        await callback.message.edit_text(
            "‚úÖ **–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω**\n\n"
            f"–î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ñ–∞–π–ª {filename}",
            reply_markup=get_spam_analysis_keyboard(),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö —Å–ø–∞–º–∞: {e}")
        await callback.message.edit_text(
            "‚ùå **–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞**\n\n"
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}",
            reply_markup=get_spam_analysis_keyboard(),
            parse_mode="Markdown"
        )


@router.callback_query(F.data == "spam_cleanup")
async def cleanup_spam_data(callback: CallbackQuery):
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–ø–∞–º–∞."""
    try:
        # –û—á–∏—â–∞–µ–º –ª–æ–≥–∏ —Å—Ç–∞—Ä—à–µ 90 –¥–Ω–µ–π
        secure_logger.cleanup_old_logs(days=90)
        
        await callback.message.edit_text(
            "üßπ **–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö**\n\n"
            "‚úÖ –°—Ç–∞—Ä—ã–µ –ª–æ–≥–∏ (—Å—Ç–∞—Ä—à–µ 90 –¥–Ω–µ–π) —É–¥–∞–ª–µ–Ω—ã.\n"
            "üíæ –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ.",
            reply_markup=get_spam_analysis_keyboard(),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å–ø–∞–º–∞: {e}")
        await callback.message.edit_text(
            "‚ùå **–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏**\n\n"
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}",
            reply_markup=get_spam_analysis_keyboard(),
            parse_mode="Markdown"
        )


@router.callback_query(F.data == "spam_patterns")
async def show_spam_patterns(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Å–ø–∞–º–∞."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        spam_data = secure_logger.get_spam_analysis_data(days=30)
        
        if not spam_data:
            await callback.message.edit_text(
                "üîç **–ü–∞—Ç—Ç–µ—Ä–Ω—ã —Å–ø–∞–º–∞**\n\n"
                "‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                reply_markup=get_spam_analysis_keyboard(),
                parse_mode="Markdown"
            )
            return
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        pattern_analysis = {}
        
        for entry in spam_data:
            analysis_result = entry.get('analysis_result', {})
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –ø—Ä–æ—Ñ–∏–ª–µ–π
            if 'profile_analysis' in analysis_result:
                patterns = analysis_result['profile_analysis'].get('patterns', [])
                for pattern in patterns:
                    pattern_analysis[pattern] = pattern_analysis.get(pattern, 0) + 1
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω—ã —Å—Å—ã–ª–æ–∫
            if 'check_types' in analysis_result:
                check_types = analysis_result['check_types']
                for check_type in check_types:
                    pattern_analysis[f"link_{check_type}"] = pattern_analysis.get(f"link_{check_type}", 0) + 1
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —á–∞—Å—Ç–æ—Ç–µ
        sorted_patterns = sorted(pattern_analysis.items(), key=lambda x: x[1], reverse=True)
        
        patterns_text = "üîç **–ü–∞—Ç—Ç–µ—Ä–Ω—ã —Å–ø–∞–º–∞ (30 –¥–Ω–µ–π)**\n\n"
        
        if sorted_patterns:
            patterns_text += "üìä **–¢–æ–ø –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤:**\n"
            for pattern, count in sorted_patterns[:10]:
                patterns_text += f"‚Ä¢ {pattern}: {count}\n"
        else:
            patterns_text += "‚ùå –ü–∞—Ç—Ç–µ—Ä–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
        
        await callback.message.edit_text(
            patterns_text,
            reply_markup=get_spam_analysis_keyboard(),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Å–ø–∞–º–∞: {e}")
        await callback.message.edit_text(
            "‚ùå **–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤**\n\n"
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}",
            reply_markup=get_spam_analysis_keyboard(),
            parse_mode="Markdown"
        )


@router.callback_query(F.data == "spam_back")
async def back_to_spam_menu(callback: CallbackQuery):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –∞–Ω–∞–ª–∏–∑–∞ —Å–ø–∞–º–∞."""
    keyboard = get_spam_analysis_keyboard()
    
    await callback.message.edit_text(
        "üîç **–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö —Å–ø–∞–º–∞**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
