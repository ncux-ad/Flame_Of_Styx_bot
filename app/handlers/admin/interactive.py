"""
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–≤–æ–¥–∞
"""

import logging
from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message

from app.services.profiles import ProfileService
from app.services.limits import LimitsService
from app.utils.error_handling import handle_errors
from app.utils.security import sanitize_for_logging
from app.middlewares.silent_logging import send_silent_response

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
interactive_router = Router()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞
waiting_for_user_input = {}


async def analyze_user_by_id(message: Message, profile_service: ProfileService, admin_id: int, user_id: int) -> None:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = await profile_service.get_user_info(user_id)
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç User –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        from aiogram.types import User
        user = User(
            id=user_info['id'],
            is_bot=user_info['is_bot'],
            first_name=user_info['first_name'],
            last_name=user_info['last_name'],
            username=user_info.get('username')
        )
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        logger.info("Starting profile analysis for user " + str(user_id))
        try:
            profile = await profile_service.analyze_user_profile(user, admin_id)
            logger.info("Profile analysis completed, profile: " + str(profile))
        except Exception as e:
            logger.error("Error in analyze_user_profile: " + str(e))
            raise
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        logger.info("Starting text formatting")
        text = "üîç <b>–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
        logger.info("Added header")
        
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML —Å–∏–º–≤–æ–ª—ã
        def escape_html(text):
            if not text:
                return ""
            return str(text).replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;")
        
        first_name = escape_html(str(user_info['first_name'] or ''))
        last_name = escape_html(str(user_info['last_name'] or ''))
        username = escape_html(str(user_info['username'] or '–ù–µ—Ç'))
        
        text += "<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> " + first_name + " " + last_name + "\n"
        logger.info("Added user name")
        
        text += "<b>ID:</b> <code>" + str(user_id) + "</code>\n"
        logger.info("Added user ID")
        
        text += "<b>Username:</b> @" + username + "\n"
        logger.info("Added username")
        
        if profile:
            logger.info("Profile exists, processing suspicious user")
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π
            text += "<b>–°—á–µ—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:</b> " + str(profile.suspicion_score) + "\n"
            logger.info("Added suspicion score")
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–∞—Ä—Å–∏–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã
            patterns = []
            if profile.detected_patterns and str(profile.detected_patterns).strip():
                try:
                    logger.info("Processing patterns: " + str(profile.detected_patterns))
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞
                    if isinstance(profile.detected_patterns, (str, int, float)):
                        patterns = str(profile.detected_patterns).split(',')
                        patterns = [p.strip() for p in patterns if p.strip()]
                    else:
                        patterns = []
                    logger.info("Parsed patterns: " + str(patterns))
                except Exception as e:
                    logger.error("Error parsing patterns: " + str(e))
                    patterns = []
            
            text += "<b>–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤:</b> " + str(len(patterns)) + "\n\n"
            
            if patterns:
                text += "<b>üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã:</b>\n"
                for pattern in patterns:
                    text += "‚Ä¢ " + escape_html(str(pattern)) + "\n"
                text += "\n"
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–π —á–∞—Ç
            if profile.linked_chat_title and str(profile.linked_chat_title).strip():
                try:
                    chat_title = str(profile.linked_chat_title).strip()
                    if chat_title:
                        text += "<b>üì± –°–≤—è–∑–∞–Ω–Ω—ã–π —á–∞—Ç:</b> " + escape_html(chat_title) + "\n"
                        text += "<b>üìä –ü–æ—Å—Ç–æ–≤:</b> " + str(profile.post_count) + "\n\n"
                except Exception:
                    pass
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            try:
                score = float(str(profile.suspicion_score))
                if score >= 0.7:
                    status = "üî¥ –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫"
                elif score >= 0.4:
                    status = "üü° –°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫"
                else:
                    status = "üü¢ –ù–∏–∑–∫–∏–π —Ä–∏—Å–∫"
            except Exception:
                status = "üü¢ –ù–∏–∑–∫–∏–π —Ä–∏—Å–∫"
                
            text += "<b>–°—Ç–∞—Ç—É—Å:</b> " + str(status) + "\n"
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
            try:
                if profile.created_at and hasattr(profile.created_at, 'strftime'):
                    date_str = profile.created_at.strftime('%d.%m.%Y %H:%M')
                else:
                    date_str = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
            except Exception:
                date_str = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
            
            text += "<b>–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞:</b> " + str(date_str) + "\n"
        else:
            logger.info("No profile, processing non-suspicious user")
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π
            text += "<b>–°—á–µ—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:</b> 0.00\n"
            logger.info("Added suspicion score 0.00")
            
            text += "<b>–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤:</b> 0\n\n"
            logger.info("Added patterns count 0")
            
            text += "<b>–°—Ç–∞—Ç—É—Å:</b> üü¢ –ù–∏–∑–∫–∏–π —Ä–∏—Å–∫\n"
            logger.info("Added status")
            
            text += "<b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b> –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º\n"
            logger.info("Added result")
        
        await send_silent_response(message, text)
        logger.info("Profile analysis completed for user " + sanitize_for_logging(str(user_id)))

    except Exception as e:
        logger.error("Error in analyze_user_by_id: " + sanitize_for_logging(str(e)))
        await send_silent_response(message, "‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ—Ñ–∏–ª—è")


async def remove_suspicious_user_by_id(message: Message, profile_service: ProfileService, admin_id: int, user_id: int) -> None:
    """–£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ ID."""
    try:
        # –£–¥–∞–ª—è–µ–º –∏–∑ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π
        profile = await profile_service._get_suspicious_profile(user_id)
        if not profile:
            await send_silent_response(message, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è—Ö")
            return
            
        await profile_service.db.delete(profile)
        await profile_service.db.commit()
        
        await send_silent_response(message,
            f"‚úÖ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω –∏–∑ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö</b>\n\n"
            f"üë§ ID: <code>{user_id}</code>\n"
            f"üóëÔ∏è –ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
        )
        logger.info(f"Removed user {sanitize_for_logging(str(user_id))} from suspicious profiles by {sanitize_for_logging(str(admin_id))}")

    except Exception as e:
        logger.error(f"Error in remove_suspicious_user_by_id: {sanitize_for_logging(str(e))}")
        await send_silent_response(message, "‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö")


async def set_limit_by_params(message: Message, limits_service: LimitsService, limit_type: str, value: float) -> None:
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ª–∏–º–∏—Ç –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º."""
    try:
        # –ú–∞–ø–ø–∏–Ω–≥ —Ç–∏–ø–æ–≤ –ª–∏–º–∏—Ç–æ–≤
        limit_mapping = {
            "messages": "max_messages_per_minute",
            "links": "max_links_per_message",
            "ban": "ban_duration_hours",
            "threshold": "suspicion_threshold",
            "media_check": "check_media_without_caption",
            "allow_gifs": "allow_videos_without_caption",
            "allow_photos": "allow_photos_without_caption",
            "allow_videos": "allow_videos_without_caption",
            "doc_size": "max_document_size_suspicious",
        }

        if limit_type not in limit_mapping:
            await send_silent_response(message,
                "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ª–∏–º–∏—Ç–∞</b>\n\n"
                "üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã:</b>\n"
                "‚Ä¢ messages - –º–∞–∫—Å–∏–º—É–º —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –º–∏–Ω—É—Ç—É\n"
                "‚Ä¢ links - –º–∞–∫—Å–∏–º—É–º —Å—Å—ã–ª–æ–∫ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏\n"
                "‚Ä¢ ban - –≤—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤ —á–∞—Å–∞—Ö\n"
                "‚Ä¢ threshold - –ø–æ—Ä–æ–≥ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏\n"
                "‚Ä¢ media_check - –ø—Ä–æ–≤–µ—Ä–∫–∞ –º–µ–¥–∏–∞ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏ (0/1)\n"
                "‚Ä¢ allow_gifs - —Ä–∞–∑—Ä–µ—à–∏—Ç—å GIF –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏ (0/1)\n"
                "‚Ä¢ allow_photos - —Ä–∞–∑—Ä–µ—à–∏—Ç—å —Ñ–æ—Ç–æ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏ (0/1)\n"
                "‚Ä¢ allow_videos - —Ä–∞–∑—Ä–µ—à–∏—Ç—å –≤–∏–¥–µ–æ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏ (0/1)\n"
                "‚Ä¢ doc_size - —Ä–∞–∑–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–¥–æ–∑—Ä–µ–Ω–∏—è (–±–∞–π—Ç—ã)"
            )
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏–º–∏—Ç
        success = limits_service.update_limit(limit_mapping[limit_type], value)

        if success:
            await send_silent_response(message,
                f"‚úÖ <b>–õ–∏–º–∏—Ç –æ–±–Ω–æ–≤–ª–µ–Ω!</b>\n\n"
                f"üìä <b>{limit_type}</b> –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ <b>{value}</b>\n\n"
                "üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –±–ª–∞–≥–æ–¥–∞—Ä—è hot-reload!"
            )
        else:
            await send_silent_response(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞!")

        if message.from_user:
            logger.info(f"Setlimit response sent to {sanitize_for_logging(str(message.from_user.id))}")

    except Exception as e:
        logger.error(f"Error in set_limit_by_params: {sanitize_for_logging(str(e))}")
        await send_silent_response(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ª–∏–º–∏—Ç–∞!")


def get_example_value(limit_type: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∏–º–µ—Ä –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ç–∏–ø–∞ –ª–∏–º–∏—Ç–∞."""
    examples = {
        "messages": "15",
        "links": "3", 
        "ban": "24",
        "threshold": "0.5",
        "media_check": "1",
        "allow_gifs": "0",
        "allow_photos": "1",
        "allow_videos": "1",
        "doc_size": "100000"
    }
    return examples.get(limit_type, "10")


@interactive_router.message(Command("suspicious_analyze"))
async def handle_suspicious_analyze_command(
    message: Message,
    profile_service: ProfileService,
    admin_id: int,
) -> None:
    """–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è)."""
    try:
        if not message.from_user:
            return
        logger.info(f"Suspicious analyze command from {sanitize_for_logging(str(message.from_user.id))}")

        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        if not message.text:
            await send_silent_response(message,("‚ùå –û—à–∏–±–∫–∞: –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏
        parts = message.text.split()
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–±
        if len(parts) >= 2:
            try:
                user_id = int(parts[1])
                await analyze_user_by_id(message, profile_service, admin_id, user_id)
                return
            except (ValueError, IndexError):
                await send_silent_response(message,("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                return
        
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥
        user_id = message.from_user.id
        waiting_for_user_input[user_id] = "suspicious_analyze"
        
        await send_silent_response(message,(
            "üîç <b>–ê–Ω–∞–ª–∏–∑ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è</b>\n\n"
            "üìù <b>–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ username:</b>\n\n"
            "‚Ä¢ <b>ID:</b> <code>123456789</code>\n"
            "‚Ä¢ <b>Username:</b> <code>@username</code>\n\n"
            "üí° <b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
            "‚Ä¢ <code>6157876046</code>\n"
            "‚Ä¢ <code>@vvvvvmiyyyyy</code>\n\n"
            "‚ùå <b>–î–ª—è –æ—Ç–º–µ–Ω—ã:</b> /cancel"
        )
        logger.info(f"Waiting for user input for suspicious_analyze from {sanitize_for_logging(str(user_id))}")

    except Exception as e:
        logger.error(f"Error in suspicious_analyze command: {sanitize_for_logging(str(e))}")
        await send_silent_response(message,("‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ—Ñ–∏–ª—è")


@interactive_router.message(Command("suspicious_remove"))
async def handle_suspicious_remove_command(
    message: Message,
    profile_service: ProfileService,
    admin_id: int,
) -> None:
    """–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö (–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è)."""
    try:
        if not message.from_user:
            return
        logger.info(f"Suspicious remove command from {sanitize_for_logging(str(message.from_user.id))}")

        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        if not message.text:
            await send_silent_response(message,("‚ùå –û—à–∏–±–∫–∞: –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏
        parts = message.text.split()
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–±
        if len(parts) >= 2:
            try:
                user_id = int(parts[1])
                await remove_suspicious_user_by_id(message, profile_service, admin_id, user_id)
                return
            except ValueError:
                await send_silent_response(message,("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                return
        
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥
        user_id = message.from_user.id
        waiting_for_user_input[user_id] = "suspicious_remove"
        
        await send_silent_response(message,(
            "üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π</b>\n\n"
            "üìù <b>–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:</b>\n\n"
            "‚Ä¢ <b>ID:</b> <code>123456789</code>\n\n"
            "üí° <b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
            "‚Ä¢ <code>6157876046</code>\n"
            "‚Ä¢ <code>218729349</code>\n\n"
            "‚ùå <b>–î–ª—è –æ—Ç–º–µ–Ω—ã:</b> /cancel"
        )
        logger.info(f"Waiting for user input for suspicious_remove from {sanitize_for_logging(str(user_id))}")

    except Exception as e:
        logger.error(f"Error in suspicious_remove command: {sanitize_for_logging(str(e))}")
        await send_silent_response(message,("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö")


@interactive_router.message(Command("setlimit"))
async def handle_setlimit_command(message: Message, limits_service: LimitsService) -> None:
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ (–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è)."""
    try:
        if not message.from_user:
            return
        logger.info(f"Setlimit command from {sanitize_for_logging(str(message.from_user.id))}")

        # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É: /setlimit <—Ç–∏–ø> <–∑–Ω–∞—á–µ–Ω–∏–µ>
        text = message.text or ""
        parts = text.split()

        # –ï—Å–ª–∏ –µ—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–±
        if len(parts) >= 3:
            limit_type = parts[1].lower()
            try:
                value = float(parts[2]) if limit_type == "threshold" else int(parts[2])
                await set_limit_by_params(message, limits_service, limit_type, value)
                return
            except ValueError:
                await send_silent_response(message,("‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
                return

        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–∏–ø –ª–∏–º–∏—Ç–∞
        user_id = message.from_user.id
        waiting_for_user_input[user_id] = "setlimit_type"
        
        await send_silent_response(message,(
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–∏–º–∏—Ç–æ–≤</b>\n\n"
            "üìù <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ª–∏–º–∏—Ç–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:</b>\n\n"
            "‚Ä¢ <b>messages</b> - –º–∞–∫—Å–∏–º—É–º —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –º–∏–Ω—É—Ç—É\n"
            "‚Ä¢ <b>links</b> - –º–∞–∫—Å–∏–º—É–º —Å—Å—ã–ª–æ–∫ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏\n"
            "‚Ä¢ <b>ban</b> - –≤—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤ —á–∞—Å–∞—Ö\n"
            "‚Ä¢ <b>threshold</b> - –ø–æ—Ä–æ–≥ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏\n"
            "‚Ä¢ <b>media_check</b> - –ø—Ä–æ–≤–µ—Ä–∫–∞ –º–µ–¥–∏–∞ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏ (0/1)\n"
            "‚Ä¢ <b>allow_gifs</b> - —Ä–∞–∑—Ä–µ—à–∏—Ç—å GIF –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏ (0/1)\n"
            "‚Ä¢ <b>allow_photos</b> - —Ä–∞–∑—Ä–µ—à–∏—Ç—å —Ñ–æ—Ç–æ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏ (0/1)\n"
            "‚Ä¢ <b>allow_videos</b> - —Ä–∞–∑—Ä–µ—à–∏—Ç—å –≤–∏–¥–µ–æ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏ (0/1)\n"
            "‚Ä¢ <b>doc_size</b> - —Ä–∞–∑–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–¥–æ–∑—Ä–µ–Ω–∏—è (–±–∞–π—Ç—ã)\n\n"
            "‚ùå <b>–î–ª—è –æ—Ç–º–µ–Ω—ã:</b> /cancel"
        )
        logger.info(f"Waiting for limit type from {sanitize_for_logging(str(user_id))}")

    except Exception as e:
        logger.error(f"Error in setlimit command: {sanitize_for_logging(str(e))}")
        await send_silent_response(message,("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã!")


@interactive_router.message(Command("cancel"))
async def handle_cancel_command(
    message: Message,
    admin_id: int,
) -> None:
    """–û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é."""
    try:
        if not message.from_user:
            return
        
        user_id = message.from_user.id
        if user_id in waiting_for_user_input:
            del waiting_for_user_input[user_id]
            await send_silent_response(message,("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
            logger.info(f"Operation cancelled for user {sanitize_for_logging(str(user_id))}")
        else:
            await send_silent_response(message,("‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã")
            
    except Exception as e:
        logger.error(f"Error in cancel command: {sanitize_for_logging(str(e))}")
        await send_silent_response(message,("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏")


@interactive_router.message()
async def handle_user_input(
    message: Message,
    profile_service: ProfileService,
    limits_service: LimitsService,
    admin_id: int,
) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."""
    try:
        if not message.from_user or not message.text:
            return
        
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∞
        if user_id not in waiting_for_user_input:
            return
        
        command = waiting_for_user_input[user_id]
        
        if command == "suspicious_analyze":
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ—Ñ–∏–ª—è
            input_text = message.text.strip()
            
            # –ü–∞—Ä—Å–∏–º –≤–≤–æ–¥
            user_id_to_analyze = None
            
            if input_text.startswith("@"):
                # –≠—Ç–æ username
                username = input_text[1:]  # –£–±–∏—Ä–∞–µ–º @
                try:
                    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username
                    # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø–æ–∫–∞ —á—Ç–æ –Ω–µ —Ä–µ–∞–ª–∏–∑—É–µ–º –ø–æ–∏—Å–∫ –ø–æ username
                    await send_silent_response(message,("‚ùå –ü–æ–∏—Å–∫ –ø–æ username –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
                    return
                except Exception as e:
                    await send_silent_response(message,(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {sanitize_for_logging(str(e))}")
                    return
            else:
                # –≠—Ç–æ ID
                try:
                    user_id_to_analyze = int(input_text)
                except ValueError:
                    await send_silent_response(message,("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                    return
            
            # –£–±–∏—Ä–∞–µ–º –∏–∑ –æ–∂–∏–¥–∞–Ω–∏—è
            del waiting_for_user_input[user_id]
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await analyze_user_by_id(message, profile_service, admin_id, user_id_to_analyze)
            
        elif command == "suspicious_remove":
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö
            input_text = message.text.strip()
            
            # –ü–∞—Ä—Å–∏–º –≤–≤–æ–¥
            user_id_to_remove = None
            
            try:
                user_id_to_remove = int(input_text)
            except ValueError:
                await send_silent_response(message,("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                return
            
            # –£–±–∏—Ä–∞–µ–º –∏–∑ –æ–∂–∏–¥–∞–Ω–∏—è
            del waiting_for_user_input[user_id]
            
            # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await remove_suspicious_user_by_id(message, profile_service, admin_id, user_id_to_remove)
            
        elif command == "setlimit_type":
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –ª–∏–º–∏—Ç–∞
            input_text = message.text.strip().lower()
            
            # –í–∞–ª–∏–¥–Ω—ã–µ —Ç–∏–ø—ã –ª–∏–º–∏—Ç–æ–≤
            valid_types = ["messages", "links", "ban", "threshold", "media_check", "allow_gifs", "allow_photos", "allow_videos", "doc_size"]
            
            if input_text not in valid_types:
                await send_silent_response(message,("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ª–∏–º–∏—Ç–∞. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –ª–∏–º–∏—Ç–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
            waiting_for_user_input[user_id] = f"setlimit_value_{input_text}"
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–Ω–∞—á–µ–Ω–∏—è
            if input_text == "threshold":
                value_type = "–¥–µ—Å—è—Ç–∏—á–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 0.5)"
            elif input_text in ["media_check", "allow_gifs", "allow_photos", "allow_videos"]:
                value_type = "0 –∏–ª–∏ 1"
            elif input_text == "doc_size":
                value_type = "—Ä–∞–∑–º–µ—Ä –≤ –±–∞–π—Ç–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 100000)"
            else:
                value_type = "—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ"
            
            await send_silent_response(message,(
                f"üìù <b>–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {input_text}:</b>\n\n"
                f"‚Ä¢ –¢–∏–ø –∑–Ω–∞—á–µ–Ω–∏—è: {value_type}\n\n"
                f"üí° <b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
                f"‚Ä¢ –î–ª—è {input_text}: {get_example_value(input_text)}\n\n"
                f"‚ùå <b>–î–ª—è –æ—Ç–º–µ–Ω—ã:</b> /cancel"
            )
            
        elif command.startswith("setlimit_value_"):
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –∑–Ω–∞—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞
            limit_type = command.replace("setlimit_value_", "")
            input_text = message.text.strip()
            
            try:
                # –ü–∞—Ä—Å–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ
                if limit_type == "threshold":
                    value = float(input_text)
                else:
                    value = int(input_text)
                
                # –£–±–∏—Ä–∞–µ–º –∏–∑ –æ–∂–∏–¥–∞–Ω–∏—è
                del waiting_for_user_input[user_id]
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–∏–º–∏—Ç
                await set_limit_by_params(message, limits_service, limit_type, value)
                
            except ValueError:
                await send_silent_response(message,("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–Ω–∞—á–µ–Ω–∏—è. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
                return
            
    except Exception as e:
        logger.error(f"Error in handle_user_input: {sanitize_for_logging(str(e))}")
        await send_silent_response(message,("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞")
