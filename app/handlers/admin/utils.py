"""
–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
"""

import logging
from typing import Any, Dict

logger = logging.getLogger(__name__)


def format_user_display(user_info: Dict[str, Any], user_id: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if user_info.get("username"):
        return f"@{user_info.get('username')}"
    else:
        first_name = user_info.get("first_name", "")
        last_name = user_info.get("last_name", "")
        full_name = f"{first_name} {last_name}".strip()
        return full_name if full_name else f"User {user_id}"


def format_chat_display(chat_info: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–∞—Ç–∞."""
    if chat_info.get("username"):
        return f"@{chat_info.get('username')}"
    else:
        return chat_info.get("title", "Unknown Chat")


def escape_html(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç HTML —Å–∏–º–≤–æ–ª—ã."""
    if not text:
        return ""
    return str(text).replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;")


def get_suspicion_status(score: float) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ —Å—á–µ—Ç—É."""
    if score >= 0.7:
        return "üî¥ –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫"
    elif score >= 0.4:
        return "üü° –°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫"
    else:
        return "üü¢ –ù–∏–∑–∫–∏–π —Ä–∏—Å–∫"


def format_date(date_obj) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
    try:
        if date_obj and hasattr(date_obj, "strftime"):
            return date_obj.strftime("%d.%m.%Y %H:%M")
        else:
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    except Exception:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"


def truncate_text(text: str, max_length: int = 200) -> str:
    """–û–±—Ä–µ–∑–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã."""
    if len(text) <= max_length:
        return text
    return text[:max_length] + "..."
