"""
–ë–∞–∑–æ–≤—ã–µ –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
"""

import logging
from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message

from app.services.admin import AdminService
from app.services.status import StatusService
from app.services.help import HelpService
from app.utils.error_handling import handle_errors
from app.utils.security import sanitize_for_logging

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –±–∞–∑–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
basic_router = Router()


@basic_router.message(Command("start"))
@handle_errors(user_message="‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã /start")
async def handle_start_command(
    message: Message,
    admin_service: AdminService,
    admin_id: int,
) -> None:
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∞–¥–º–∏–Ω–∞."""
    try:
        if not message.from_user:
            return
        logger.info(f"Start command from {sanitize_for_logging(str(message.from_user.id))}")

        welcome_message = await admin_service.get_welcome_message()
        await message.answer(welcome_message)
        logger.info(f"Welcome message sent to {sanitize_for_logging(str(message.from_user.id))}")

    except Exception as e:
        logger.error(f"Error in start command: {sanitize_for_logging(str(e))}")
        raise


@basic_router.message(Command("status"))
async def handle_status_command(
    message: Message,
    status_service: StatusService,
    admin_id: int,
) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞."""
    try:
        if not message.from_user:
            return
        logger.info(f"Status command from {sanitize_for_logging(str(message.from_user.id))}")

        status_text = await status_service.get_bot_status(admin_id)
        await message.answer(status_text)
        logger.info(f"Status sent to {sanitize_for_logging(str(message.from_user.id))}")

    except Exception as e:
        logger.error(f"Error in status command: {sanitize_for_logging(str(e))}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞")


@basic_router.message(Command("settings"))
async def handle_settings_command(message: Message) -> None:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞."""
    try:
        if not message.from_user:
            return
        logger.info(f"Settings command from {sanitize_for_logging(str(message.from_user.id))}")

        settings_text = (
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ AntiSpam Bot</b>\n\n"
            "üîß <b>–û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>\n"
            "‚Ä¢ <b>–õ–∏–º–∏—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π:</b> –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ /setlimits\n"
            "‚Ä¢ <b>–ü–æ—Ä–æ–≥–∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:</b> –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ /setlimit\n"
            "‚Ä¢ <b>–ö–∞–Ω–∞–ª—ã:</b> —É–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ /channels\n"
            "‚Ä¢ <b>–ë–æ—Ç—ã:</b> —É–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ /bots\n\n"
            "üìä <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:</b>\n"
            "‚Ä¢ <b>–°—Ç–∞—Ç—É—Å:</b> /status\n"
            "‚Ä¢ <b>–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ:</b> /banned\n"
            "‚Ä¢ <b>–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ:</b> /suspicious\n\n"
            "üõ†Ô∏è <b>–£—Ç–∏–ª–∏—Ç—ã:</b>\n"
            "‚Ä¢ <b>–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–Ω–∞–ª–æ–≤:</b> /sync_channels\n"
            "‚Ä¢ <b>–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±–∞–Ω–æ–≤:</b> /sync_bans\n"
            "‚Ä¢ <b>–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –ª–∏–º–∏—Ç–æ–≤:</b> /reload_limits\n\n"
            "üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>\n"
            "‚Ä¢ <b>–ü–æ–∫–∞–∑ –ª–∏–º–∏—Ç–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ:</b> –≤–∫–ª—é—á–µ–Ω (–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –≤ .env)\n"
            "‚Ä¢ <b>–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è:</b> SHOW_LIMITS_ON_STARTUP=true/false\n\n"
            "‚ùì <b>–ü–æ–º–æ—â—å:</b> /help"
        )

        await message.answer(settings_text)
        logger.info(f"Settings sent to {sanitize_for_logging(str(message.from_user.id))}")

    except Exception as e:
        logger.error(f"Error in settings command: {sanitize_for_logging(str(e))}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫")


@basic_router.message(Command("help"))
async def handle_help_command(
    message: Message,
    help_service: HelpService,
    admin_id: int,
) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º."""
    try:
        if not message.from_user:
            return
        logger.info(f"Help command from {sanitize_for_logging(str(message.from_user.id))}")

        help_text = await help_service.get_help_text(message.from_user.id)
        await message.answer(help_text)
        logger.info(f"Help sent to {sanitize_for_logging(str(message.from_user.id))}")

    except Exception as e:
        logger.error(f"Error in help command: {sanitize_for_logging(str(e))}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏")


@basic_router.message(Command("instructions"))
async def handle_instructions_command(
    message: Message,
    help_service: HelpService,
    admin_id: int,
) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é."""
    try:
        if not message.from_user:
            return
        logger.info(f"Instructions command from {sanitize_for_logging(str(message.from_user.id))}")

        instructions_text = await help_service.get_instructions_text(message.from_user.id)
        await message.answer(instructions_text)
        logger.info(f"Instructions sent to {sanitize_for_logging(str(message.from_user.id))}")

    except Exception as e:
        logger.error(f"Error in instructions command: {sanitize_for_logging(str(e))}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π")


@basic_router.message(Command("logs"))
async def handle_logs_command(
    message: Message,
    admin_id: int,
) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏."""
    try:
        if not message.from_user:
            return
        logger.info(f"Logs command from {sanitize_for_logging(str(message.from_user.id))}")

        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É –ª–æ–≥–æ–≤
        log_files = ["bot.log", "logs/bot.log", "/var/log/antispam-bot.log"]
        log_text = ""
        
        for log_file in log_files:
            try:
                with open(log_file, "r", encoding="utf-8") as f:
                    lines = f.readlines()
                    if lines:
                        last_lines = lines[-30:] if len(lines) > 30 else lines
                        log_text = "".join(last_lines)
                        break
            except (FileNotFoundError, PermissionError, OSError):
                continue
        
        if not log_text:
            log_text = "–§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n‚Ä¢ bot.log\n‚Ä¢ logs/bot.log\n‚Ä¢ /var/log/antispam-bot.log"
        else:
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
            if len(log_text) > 3500:
                log_text = "..." + log_text[-3500:]

        await message.answer(f"<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏:</b>\n\n<code>{log_text}</code>")
        logger.info(f"Logs sent to {sanitize_for_logging(str(message.from_user.id))}")

    except Exception as e:
        logger.error(f"Error in logs command: {sanitize_for_logging(str(e))}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤")
