"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–∞–º–∏
"""

from aiogram import F, Router
from aiogram.filters import Command
from aiogram.types import CallbackQuery, Message

from app.filters.is_admin_or_silent import IsAdminOrSilentFilter
from app.services.alerts import AlertLevel, AlertService, AlertType

alerts_router = Router()


@alerts_router.message(Command("alerts"))
async def handle_alerts_command(message: Message, alert_service: AlertService) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–ª–µ—Ä—Ç–æ–≤"""
    try:
        stats = await alert_service.get_alert_stats()

        response = f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤</b>\n\n"
        response += f"üî¥ –í—Å–µ–≥–æ –∞–ª–µ—Ä—Ç–æ–≤: {stats['total_alerts']}\n"
        response += f"üïê –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å: {stats['recent_alerts']}\n"
        response += f"üëë –ê–¥–º–∏–Ω–æ–≤: {stats['admin_count']}\n"
        response += f"‚è±Ô∏è Rate limited: {stats['rate_limited_admins']}\n\n"
        response += f"‚ÑπÔ∏è <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /test_alert –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</i>"

        await message.answer(response, parse_mode="HTML")

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤: {e}")


@alerts_router.message(Command("test_alert"), IsAdminOrSilentFilter())
async def handle_test_alert_command(message: Message, alert_service: AlertService) -> None:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –∞–ª–µ—Ä—Ç–∞"""
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∞–ª–µ—Ä—Ç
        success = await alert_service.send_info_alert(
            title="–¢–µ—Å—Ç–æ–≤—ã–π –∞–ª–µ—Ä—Ç",
            message="–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã –∞–ª–µ—Ä—Ç–æ–≤",
            data={"test": True, "timestamp": "now"},
        )

        if success:
            await message.answer("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∞–ª–µ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –∞–ª–µ—Ä—Ç")

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–ª–µ—Ä—Ç–∞: {e}")


@alerts_router.message(Command("alert_error"), IsAdminOrSilentFilter())
async def handle_test_error_alert_command(message: Message, alert_service: AlertService) -> None:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–ª–µ—Ä—Ç –æ–± –æ—à–∏–±–∫–µ"""
    try:
        success = await alert_service.send_error_alert(
            title="–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞",
            message="–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ",
            data={"error_code": "TEST_ERROR", "severity": "high"},
        )

        if success:
            await message.answer("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∞–ª–µ—Ä—Ç –æ–± –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –∞–ª–µ—Ä—Ç –æ–± –æ—à–∏–±–∫–µ")

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–ª–µ—Ä—Ç–∞ –æ–± –æ—à–∏–±–∫–µ: {e}")


@alerts_router.message(Command("alert_warning"), IsAdminOrSilentFilter())
async def handle_test_warning_alert_command(message: Message, alert_service: AlertService) -> None:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–ª–µ—Ä—Ç-–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ"""
    try:
        success = await alert_service.send_warning_alert(
            title="–¢–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
            message="–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
            data={"user_id": 123456789, "pattern": "suspicious_behavior"},
        )

        if success:
            await message.answer("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∞–ª–µ—Ä—Ç-–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –∞–ª–µ—Ä—Ç-–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ")

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–ª–µ—Ä—Ç–∞-–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {e}")


@alerts_router.message(Command("alert_success"), IsAdminOrSilentFilter())
async def handle_test_success_alert_command(message: Message, alert_service: AlertService) -> None:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–ª–µ—Ä—Ç –æ–± —É—Å–ø–µ—Ö–µ"""
    try:
        success = await alert_service.send_success_alert(
            title="–¢–µ—Å—Ç–æ–≤—ã–π —É—Å–ø–µ—Ö",
            message="–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏",
            data={"operation": "test_ban", "user_id": 123456789, "result": "success"},
        )

        if success:
            await message.answer("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∞–ª–µ—Ä—Ç –æ–± —É—Å–ø–µ—Ö–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –∞–ª–µ—Ä—Ç –æ–± —É—Å–ø–µ—Ö–µ")

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–ª–µ—Ä—Ç–∞ –æ–± —É—Å–ø–µ—Ö–µ: {e}")
