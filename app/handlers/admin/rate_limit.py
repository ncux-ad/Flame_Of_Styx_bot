"""
Rate Limit Admin Commands
–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Redis rate limiting
"""

import logging
from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from app.services.redis_rate_limiter import get_redis_rate_limiter
from app.utils.error_handling import handle_errors
from app.utils.security import sanitize_for_logging
from app.middlewares.silent_logging import send_silent_response

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è rate limit –∫–æ–º–∞–Ω–¥
rate_limit_router = Router()


@rate_limit_router.message(Command("rate_limit"))
@handle_errors(user_message="‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ rate limit")
async def handle_rate_limit_command(
    message: Message,
    admin_id: int,
) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ rate limit."""
    try:
        if not message.from_user:
            return
        
        logger.info(f"Rate limit command from {sanitize_for_logging(str(message.from_user.id))}")
        
        # –ü–æ–ª—É—á–∞–µ–º rate limiter
        rate_limiter = await get_redis_rate_limiter()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ rate limit –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = str(message.from_user.id)
        
        # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –≤—Å–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º
        rate_limit_info = []
        
        for config_name in ["user_messages", "admin_commands", "spam_analysis", "channel_management"]:
            try:
                info = await rate_limiter.get_rate_limit_info(config_name, user_id)
                if "error" not in info:
                    rate_limit_info.append({
                        "config": config_name,
                        "info": info
                    })
            except Exception as e:
                logger.error(f"Error getting rate limit info for {config_name}: {e}")
        
        if not rate_limit_info:
            await send_silent_response(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ rate limit")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        response_text = "‚è∞ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Rate Limit</b>\n\n"
        
        for item in rate_limit_info:
            config = item["config"]
            info = item["info"]
            
            config_names = {
                "user_messages": "–°–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
                "admin_commands": "–ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã", 
                "spam_analysis": "–ê–Ω–∞–ª–∏–∑ —Å–ø–∞–º–∞",
                "channel_management": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏"
            }
            
            config_display = config_names.get(config, config)
            
            response_text += f"üìä <b>{config_display}:</b>\n"
            response_text += f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {info['current_count']}/{info['max_requests']}\n"
            response_text += f"‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å: {info['remaining']}\n"
            response_text += f"‚Ä¢ –û–∫–Ω–æ: {info['window_seconds']}—Å\n"
            response_text += f"‚Ä¢ –°–±—Ä–æ—Å —á–µ—Ä–µ–∑: {info['reset_in_seconds']:.0f}—Å\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard = InlineKeyboardBuilder()
        keyboard.add(InlineKeyboardButton(
            text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
            callback_data="rate_limit_refresh"
        ))
        keyboard.add(InlineKeyboardButton(
            text="üóëÔ∏è –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ",
            callback_data="rate_limit_reset_all"
        ))
        keyboard.add(InlineKeyboardButton(
            text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
            callback_data="rate_limit_stats"
        ))
        keyboard.adjust(2)
        
        await send_silent_response(
            message, 
            response_text,
            reply_markup=keyboard.as_markup()
        )
        
        logger.info(f"Rate limit info sent to {sanitize_for_logging(str(message.from_user.id))}")

    except Exception as e:
        logger.error(f"Error in rate limit command: {sanitize_for_logging(str(e))}")
        await send_silent_response(message, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ rate limit")


@rate_limit_router.message(Command("reset_rate_limit"))
@handle_errors(user_message="‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ rate limit")
async def handle_reset_rate_limit_command(
    message: Message,
    admin_id: int,
) -> None:
    """–°–±—Ä–æ—Å–∏—Ç—å rate limit –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        if not message.from_user:
            return
        
        logger.info(f"Reset rate limit command from {sanitize_for_logging(str(message.from_user.id))}")
        
        # –ü–æ–ª—É—á–∞–µ–º rate limiter
        rate_limiter = await get_redis_rate_limiter()
        
        user_id = str(message.from_user.id)
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º rate limit –¥–ª—è –≤—Å–µ—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
        reset_count = 0
        for config_name in ["user_messages", "admin_commands", "spam_analysis", "channel_management"]:
            try:
                success = await rate_limiter.reset_rate_limit(config_name, user_id)
                if success:
                    reset_count += 1
            except Exception as e:
                logger.error(f"Error resetting rate limit for {config_name}: {e}")
        
        if reset_count > 0:
            await send_silent_response(
                message, 
                f"‚úÖ Rate limit —Å–±—Ä–æ—à–µ–Ω –¥–ª—è {reset_count} –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π"
            )
        else:
            await send_silent_response(
                message, 
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å rate limit"
            )
        
        logger.info(f"Rate limit reset for {sanitize_for_logging(str(message.from_user.id))}")

    except Exception as e:
        logger.error(f"Error in reset rate limit command: {sanitize_for_logging(str(e))}")
        await send_silent_response(message, "‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ rate limit")


@rate_limit_router.message(Command("rate_limit_stats"))
@handle_errors(user_message="‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ rate limit")
async def handle_rate_limit_stats_command(
    message: Message,
    admin_id: int,
) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É rate limit."""
    try:
        if not message.from_user:
            return
        
        logger.info(f"Rate limit stats command from {sanitize_for_logging(str(message.from_user.id))}")
        
        # –ü–æ–ª—É—á–∞–µ–º rate limiter
        rate_limiter = await get_redis_rate_limiter()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
        configs = rate_limiter.list_configs()
        
        response_text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Rate Limit</b>\n\n"
        
        for config_name, config in configs.items():
            config_names = {
                "user_messages": "–°–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
                "admin_commands": "–ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã",
                "spam_analysis": "–ê–Ω–∞–ª–∏–∑ —Å–ø–∞–º–∞", 
                "channel_management": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏"
            }
            
            config_display = config_names.get(config_name, config_name)
            
            response_text += f"‚öôÔ∏è <b>{config_display}:</b>\n"
            response_text += f"‚Ä¢ –õ–∏–º–∏—Ç: {config.max_requests}\n"
            response_text += f"‚Ä¢ –û–∫–Ω–æ: {config.window_seconds}—Å\n"
            response_text += f"‚Ä¢ –ü—Ä–µ—Ñ–∏–∫—Å: {config.key_prefix}\n\n"
        
        response_text += "üí° <b>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</b>\n"
        response_text += "Rate limiting –∑–∞—â–∏—â–∞–µ—Ç –æ—Ç —Å–ø–∞–º–∞ –∏ –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏ –±–æ—Ç–∞\n"
        response_text += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reset_rate_limit –¥–ª—è —Å–±—Ä–æ—Å–∞ –ª–∏–º–∏—Ç–æ–≤"
        
        await send_silent_response(message, response_text)
        
        logger.info(f"Rate limit stats sent to {sanitize_for_logging(str(message.from_user.id))}")

    except Exception as e:
        logger.error(f"Error in rate limit stats command: {sanitize_for_logging(str(e))}")
        await send_silent_response(message, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ rate limit")
