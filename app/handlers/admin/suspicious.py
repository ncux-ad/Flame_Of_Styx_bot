"""
–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø—Ä–æ—Ñ–∏–ª—è–º–∏
"""

import logging
from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message

from app.services.profiles import ProfileService
from app.utils.error_handling import handle_errors
from app.utils.security import sanitize_for_logging

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π
suspicious_router = Router()


@suspicious_router.message(Command("suspicious"))
async def handle_suspicious_command(
    message: Message,
    profile_service: ProfileService,
    admin_id: int,
) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏."""
    try:
        if not message.from_user:
            return
        logger.info(f"Suspicious command from {sanitize_for_logging(str(message.from_user.id))}")

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏
        profiles = await profile_service.get_suspicious_profiles(limit=10)
        
        if not profiles:
            await message.answer("‚úÖ –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return

        text = "üîç <b>–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏:</b>\n\n"
        
        for i, profile in enumerate(profiles, 1):
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user_info = await profile_service.get_user_info(int(str(profile.user_id)))
            username = f"@{user_info.get('username')}" if user_info.get('username') else "–ù–µ—Ç username"
            name = f"{user_info.get('first_name', '')} {user_info.get('last_name', '')}".strip()
            
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML —Å–∏–º–≤–æ–ª—ã
            def escape_html(text):
                if not text:
                    return ""
                return str(text).replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;")
            
            text += f"{i}. <b>{escape_html(name)}</b>\n"
            text += f"   ID: <code>{profile.user_id}</code>\n"
            text += f"   Username: {escape_html(username)}\n"
            text += f"   –°—á–µ—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {profile.suspicion_score:.2f}\n"
            text += f"   –ü–∞—Ç—Ç–µ—Ä–Ω—ã: {escape_html(str(profile.detected_patterns))}\n"
            if profile.linked_chat_title and str(profile.linked_chat_title).strip():
                text += f"   –°–≤—è–∑–∞–Ω–Ω—ã–π —á–∞—Ç: {escape_html(str(profile.linked_chat_title))}\n"
            text += f"   –î–∞—Ç–∞: {profile.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"

        text += "üí° <b>–ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:</b>\n"
        text += "‚Ä¢ /suspicious_reset - —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏\n"
        text += "‚Ä¢ /suspicious_analyze <user_id> - –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        text += "‚Ä¢ /suspicious_remove <user_id> - —É–¥–∞–ª–∏—Ç—å –∏–∑ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö\n"
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        logger.info(f"Generated text length: {len(text)}")
        logger.info(f"Text preview: {text[:500]}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        if '<user_id' in text:
            logger.error("Found '<user_id' in text!")
            text = text.replace('<user_id', '&lt;user_id')
        if 'user_id>' in text:
            logger.error("Found 'user_id>' in text!")
            text = text.replace('user_id>', 'user_id&gt;')
        
        await message.answer(text)
        logger.info(f"Suspicious profiles response sent to {sanitize_for_logging(str(message.from_user.id))}")

    except Exception as e:
        logger.error(f"Error in suspicious command: {sanitize_for_logging(str(e))}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π")


@suspicious_router.message(Command("suspicious_reset"))
async def handle_suspicious_reset_command(
    message: Message,
    profile_service: ProfileService,
    admin_id: int,
) -> None:
    """–°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏."""
    try:
        if not message.from_user:
            return
        logger.info(f"Suspicious reset command from {sanitize_for_logging(str(message.from_user.id))}")

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏
        deleted_count = await profile_service.reset_suspicious_profiles()
        
        await message.answer(
            f"‚úÖ <b>–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ —Å–±—Ä–æ—à–µ–Ω—ã</b>\n\n"
            f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {deleted_count}\n"
            f"üìä –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–±—Ä–æ—à–µ–Ω–∞"
        )
        logger.info(f"Reset {sanitize_for_logging(str(deleted_count))} suspicious profiles for {sanitize_for_logging(str(message.from_user.id))}")

    except Exception as e:
        logger.error(f"Error in suspicious_reset command: {sanitize_for_logging(str(e))}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π")


@suspicious_router.message(Command("recalculate_suspicious"))
async def handle_recalculate_suspicious_command(
    message: Message,
    profile_service: ProfileService,
    admin_id: int,
) -> None:
    """–ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ —Å –Ω–æ–≤—ã–º–∏ –≤–µ—Å–∞–º–∏."""
    try:
        if not message.from_user:
            return
        logger.info(f"Recalculate suspicious command from {sanitize_for_logging(str(message.from_user.id))}")

        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏
        recalculated_count = await profile_service.recalculate_suspicious_profiles()
        
        await message.answer(
            f"‚úÖ <b>–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω—ã</b>\n\n"
            f"üîÑ –ü–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–æ –ø—Ä–æ—Ñ–∏–ª–µ–π: {recalculated_count}\n"
            f"üìä –ü—Ä–∏–º–µ–Ω–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –≤–µ—Å–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"
        )
        logger.info(f"Recalculated {sanitize_for_logging(str(recalculated_count))} suspicious profiles for {sanitize_for_logging(str(message.from_user.id))}")

    except Exception as e:
        logger.error(f"Error in recalculate_suspicious command: {sanitize_for_logging(str(e))}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π")


@suspicious_router.message(Command("cleanup_duplicates"))
async def handle_cleanup_duplicates_command(
    message: Message,
    profile_service: ProfileService,
    admin_id: int,
) -> None:
    """–û—á–∏—Å—Ç–∏—Ç—å –¥—É–±–ª–∏—Ä—É—é—â–∏–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏."""
    try:
        if not message.from_user:
            return
        logger.info(f"Cleanup duplicates command from {sanitize_for_logging(str(message.from_user.id))}")

        # –û—á–∏—â–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏
        cleaned_count = await profile_service.cleanup_duplicate_profiles()
        
        await message.answer(
            f"‚úÖ <b>–î—É–±–ª–∏—Ä—É—é—â–∏–µ –ø—Ä–æ—Ñ–∏–ª–∏ –æ—á–∏—â–µ–Ω—ã</b>\n\n"
            f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {cleaned_count}\n"
            f"üìä –û—Å—Ç–∞–≤–ª–µ–Ω—ã —Ç–æ–ª—å–∫–æ —Å–∞–º—ã–µ —Å–≤–µ–∂–∏–µ –∑–∞–ø–∏—Å–∏"
        )
        logger.info(f"Cleaned up {sanitize_for_logging(str(cleaned_count))} duplicate profiles for {sanitize_for_logging(str(message.from_user.id))}")

    except Exception as e:
        logger.error(f"Error in cleanup_duplicates command: {sanitize_for_logging(str(e))}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")