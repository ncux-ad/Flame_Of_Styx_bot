"""
–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞–Ω–∞–ª–∞–º–∏
"""

import logging
from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message

from app.services.channels import ChannelService
from app.services.channels_admin import ChannelsAdminService
from app.services.moderation import ModerationService
from app.utils.error_handling import handle_errors
from app.utils.security import sanitize_for_logging

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥ –∫–∞–Ω–∞–ª–æ–≤
channels_router = Router()


@channels_router.message(Command("channels"))
async def handle_channels_command(
    message: Message,
    channel_service: ChannelService,
    channels_admin_service: ChannelsAdminService,
    admin_id: int,
) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤."""
    try:
        if not message.from_user:
            return
        logger.info(f"Channels command from {sanitize_for_logging(str(message.from_user.id))}")

        channels_text = await channels_admin_service.get_channels_list()
        await message.answer(channels_text)
        logger.info(f"Channels list sent to {sanitize_for_logging(str(message.from_user.id))}")

    except Exception as e:
        logger.error(f"Error in channels command: {sanitize_for_logging(str(e))}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤")


@channels_router.message(Command("sync_channels"))
async def handle_sync_channels_command(
    message: Message,
    channel_service: ChannelService,
    admin_id: int,
) -> None:
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–Ω–∞–ª–æ–≤."""
    try:
        if not message.from_user:
            return
        logger.info(f"Sync channels command from {sanitize_for_logging(str(message.from_user.id))}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        await message.answer("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–Ω–∞–ª–æ–≤...")

        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –∫–∞–Ω–∞–ª—ã
        updated_count = await channel_service.sync_all_channels_native_status()

        if updated_count > 0:
            await message.answer(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û–±–Ω–æ–≤–ª–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: {updated_count}")
        else:
            await message.answer("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")

        logger.info(f"Sync channels completed: {updated_count} channels updated")

    except Exception as e:
        logger.error(f"Error in sync channels command: {sanitize_for_logging(str(e))}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–æ–≤")


@channels_router.message(Command("find_chat"))
async def handle_find_chat_command(
    message: Message,
    moderation_service: ModerationService,
    admin_id: int,
) -> None:
    """–ù–∞–π—Ç–∏ —á–∞—Ç –ø–æ ID –∏–ª–∏ username."""
    try:
        if not message.from_user:
            return
        logger.info(f"Find chat command from {sanitize_for_logging(str(message.from_user.id))}")

        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        if not message.text:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return
        args = message.text.split()[1:] if message.text and len(message.text.split()) > 1 else []

        if not args:
            await message.answer(
                "‚ùå <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b> /find_chat &lt;chat_id&gt; –∏–ª–∏ /find_chat @username\n\n"
                "üí° <b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
                "‚Ä¢ /find_chat -1001234567890\n"
                "‚Ä¢ /find_chat @channel_username"
            )
            return

        chat_identifier = args[0]
        
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
            if chat_identifier.startswith("@"):
                # –≠—Ç–æ username
                chat_info = await moderation_service.bot.get_chat(chat_identifier)
            else:
                # –≠—Ç–æ ID
                chat_id = int(chat_identifier)
                chat_info = await moderation_service.bot.get_chat(chat_id)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            chat_type = chat_info.type
            title = chat_info.title or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
            username = f"@{chat_info.username}" if chat_info.username else "–ù–µ—Ç username"
            description = chat_info.description or "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"
            
            text = f"üîç <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ</b>\n\n"
            text += f"üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {title}\n"
            text += f"üÜî <b>ID:</b> <code>{chat_info.id}</code>\n"
            text += f"üë§ <b>Username:</b> {username}\n"
            text += f"üìã <b>–¢–∏–ø:</b> {chat_type}\n"
            text += f"üìÑ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description[:200]}{'...' if len(description) > 200 else ''}\n"
            
            await message.answer(text)
            logger.info(f"Chat info sent to {sanitize_for_logging(str(message.from_user.id))}")
            
        except Exception as e:
            await message.answer(f"‚ùå –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {sanitize_for_logging(str(e))}")
            logger.error(f"Error finding chat {chat_identifier}: {sanitize_for_logging(str(e))}")

    except Exception as e:
        logger.error(f"Error in find_chat command: {sanitize_for_logging(str(e))}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —á–∞—Ç–∞")


@channels_router.message(Command("my_chats"))
async def handle_my_chats_command(
    message: Message,
    moderation_service: ModerationService,
    admin_id: int,
) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —á–∞—Ç—ã, –≥–¥–µ –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."""
    try:
        if not message.from_user:
            return
        logger.info(f"My chats command from {sanitize_for_logging(str(message.from_user.id))}")

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤, –≥–¥–µ –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        # –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å get_chat_administrators
        text = "üìã <b>–ß–∞—Ç—ã —Å –±–æ—Ç–æ–º-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º</b>\n\n"
        text += "‚ÑπÔ∏è <b>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</b> –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /channels\n\n"
        text += "üí° <b>–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞–Ω–∞–ª–∞–º–∏:</b>\n"
        text += "‚Ä¢ /channels - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤\n"
        text += "‚Ä¢ /sync_channels - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–Ω–∞–ª–æ–≤\n"
        text += "‚Ä¢ /find_chat - –Ω–∞–π—Ç–∏ —á–∞—Ç –ø–æ ID –∏–ª–∏ username"
        
        await message.answer(text)
        logger.info(f"My chats info sent to {sanitize_for_logging(str(message.from_user.id))}")

    except Exception as e:
        logger.error(f"Error in my_chats command: {sanitize_for_logging(str(e))}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤")
