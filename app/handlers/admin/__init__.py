"""
–ê–¥–º–∏–Ω—Å–∫–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã - –º–æ–¥—É–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
"""

import logging
from aiogram import Router
from aiogram.filters import Command
from aiogram.types import CallbackQuery, Message

from app.filters.is_admin_or_silent import IsAdminOrSilentFilter
from app.utils.security import sanitize_for_logging
from app.services.bots import BotService
from app.services.channels import ChannelService
from app.services.help import HelpService
from app.services.limits import LimitsService
from app.services.moderation import ModerationService
from app.models.moderation_log import ModerationAction
from app.services.profiles import ProfileService
from app.services.admin import AdminService
from app.services.status import StatusService
from app.services.channels_admin import ChannelsAdminService
from app.services.bots_admin import BotsAdminService
from app.services.suspicious_admin import SuspiciousAdminService
from app.services.callbacks import CallbacksService
from app.utils.error_handling import ValidationError, handle_errors
from app.utils.security import sanitize_for_logging, safe_format_message

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã
from .basic import basic_router
from .channels import channels_router
from .limits import limits_router
from .moderation import moderation_router
from .suspicious import suspicious_router
from .interactive import interactive_router
# from .spam_analysis import router as spam_analysis_router  # –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–æ—É—Ç–µ—Ä
from .rate_limit import rate_limit_router
from .bots import bots_router

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–æ—É—Ç–µ—Ä
admin_router = Router()

# –ü–æ–¥–∫–ª—é—á–∞–µ–º –≤—Å–µ –ø–æ–¥—Ä–æ—É—Ç–µ—Ä—ã
admin_router.include_router(basic_router)
admin_router.include_router(channels_router)
admin_router.include_router(limits_router)
admin_router.include_router(moderation_router)
admin_router.include_router(suspicious_router)
admin_router.include_router(interactive_router)
# admin_router.include_router(spam_analysis_router)  # –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–æ—É—Ç–µ—Ä –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º Aiogram 3.x
admin_router.include_router(rate_limit_router)
admin_router.include_router(bots_router)

logger.info(f"Admin router configured with {len(admin_router.sub_routers)} sub-routers")
logger.info(f"Sub-routers: {[router.name for router in admin_router.sub_routers]}")

# –§–∏–ª—å—Ç—Ä –∞–¥–º–∏–Ω–∞ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —Ö–µ–Ω–¥–ª–µ—Ä–∞–º, –∞ –Ω–µ –≥–ª–æ–±–∞–ª—å–Ω–æ
# admin_router.message.filter(IsAdminOrSilentFilter())
# admin_router.callback_query.filter(IsAdminOrSilentFilter())

logger.info("Admin filter will be applied to individual handlers")

# –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π —Ö–µ–Ω–¥–ª–µ—Ä —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –∞–¥–º–∏–Ω–∞
@admin_router.message(Command("test_admin"), IsAdminOrSilentFilter())
async def test_admin_handler(message: Message) -> None:
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã admin router."""
    logger.info("TEST ADMIN HANDLER CALLED!")
    await message.answer("‚úÖ Admin router —Ä–∞–±–æ—Ç–∞–µ—Ç!")

# –¢–µ—Å—Ç–æ–≤—ã–π —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è bots (–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω –∏–∑ bots_router)
@admin_router.message(Command("test_bots"))
async def test_bots_handler(message: Message) -> None:
    """–¢–µ—Å—Ç–æ–≤—ã–π —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã bots —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏."""
    logger.info("TEST BOTS HANDLER CALLED!")
    await message.answer("‚úÖ Bots —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç!")

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–µ—Ä–≤–∏—Å—ã –¥–ª—è bots –∫–æ–º–∞–Ω–¥
from app.services.bots_admin import BotsAdminService
from app.services.channels_admin import ChannelsAdminService
from app.services.channels import ChannelService
from app.utils.error_handling import handle_errors
from app.middlewares.silent_logging import send_silent_response
from app.utils.security import sanitize_for_logging

# –ö–æ–º–∞–Ω–¥–∞ /bots (–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –∏–∑ bots_router)
@admin_router.message(Command("bots"), IsAdminOrSilentFilter())
@handle_errors(user_message="‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã /bots")
async def handle_bots_command(
    message: Message,
    bots_admin_service: BotsAdminService,
    admin_id: int,
) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ whitelist."""
    try:
        logger.info(f"BOTS COMMAND HANDLER CALLED: {message.text}")
        if not message.from_user:
            logger.warning("Bots command: no from_user")
            return
        
        logger.info(f"Bots command from {sanitize_for_logging(str(message.from_user.id))}")
        logger.info(f"Bots admin service: {bots_admin_service}")
        logger.info(f"Admin ID: {admin_id}")

        bots_text = await bots_admin_service.get_bots_list()
        logger.info(f"Bots text length: {len(bots_text)}")
        
        await send_silent_response(message, bots_text)
        logger.info(f"Bots list sent to {sanitize_for_logging(str(message.from_user.id))}")

    except Exception as e:
        logger.error(f"Error in bots command: {sanitize_for_logging(str(e))}")
        await send_silent_response(message, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –±–æ—Ç–æ–≤")

# –ö–æ–º–∞–Ω–¥–∞ /channels (–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –∏–∑ channels_router)
@admin_router.message(Command("channels"), IsAdminOrSilentFilter())
@handle_errors(user_message="‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã /channels")
async def handle_channels_command(
    message: Message,
    channel_service: ChannelService,
    channels_admin_service: ChannelsAdminService,
    admin_id: int,
) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤."""
    try:
        if not message.from_user:
            return
        logger.info(f"Channels command from {sanitize_for_logging(str(message.from_user.id))}")

        channels_text = await channels_admin_service.get_channels_display()
        await message.answer(channels_text)
        logger.info(f"Channels list sent to {sanitize_for_logging(str(message.from_user.id))}")

    except Exception as e:
        logger.error(f"Error in channels command: {sanitize_for_logging(str(e))}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤")

# –ö–æ–º–∞–Ω–¥–∞ /sync_channels (–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –∏–∑ channels_router)
@admin_router.message(Command("sync_channels"), IsAdminOrSilentFilter())
@handle_errors(user_message="‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã /sync_channels")
async def handle_sync_channels_command(
    message: Message,
    channel_service: ChannelService,
    admin_id: int,
) -> None:
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–Ω–∞–ª–æ–≤."""
    try:
        if not message.from_user:
            return
        logger.info(f"Sync channels command from {sanitize_for_logging(str(message.from_user.id))}")

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
        channels = await channel_service.get_all_channels()
        
        if not channels:
            await message.answer("üìã –ö–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        synced_count = 0
        for channel in channels:
            try:
                await channel_service.sync_channel_status(channel.chat_id, admin_id)
                synced_count += 1
            except Exception as e:
                logger.error(f"Error syncing channel {channel.chat_id}: {e}")
                continue

        await message.answer(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {synced_count} –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ {len(channels)}")
        logger.info(f"Sync channels completed: {synced_count}/{len(channels)}")

    except Exception as e:
        logger.error(f"Error in sync_channels command: {sanitize_for_logging(str(e))}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–æ–≤")

# –ö–æ–º–∞–Ω–¥–∞ /find_chat (–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –∏–∑ channels_router)
@admin_router.message(Command("find_chat"), IsAdminOrSilentFilter())
@handle_errors(user_message="‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã /find_chat")
async def handle_find_chat_command(
    message: Message,
    channel_service: ChannelService,
    admin_id: int,
) -> None:
    """–ù–∞–π—Ç–∏ —á–∞—Ç –ø–æ ID –∏–ª–∏ username."""
    try:
        if not message.from_user:
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        args = message.text.split()[1:] if message.text else []
        if not args:
            await message.answer("‚ùå <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b> /find_chat <chat_id> –∏–ª–∏ /find_chat @username")
            return

        chat_identifier = args[0]
        logger.info(f"Find chat command from {sanitize_for_logging(str(message.from_user.id))}: {chat_identifier}")

        # –ò—â–µ–º —á–∞—Ç –ø–æ ID –∏–ª–∏ username
        chat_info = await channel_service.find_chat_by_identifier(chat_identifier)
        
        if chat_info:
            response = f"üìã <b>–ù–∞–π–¥–µ–Ω —á–∞—Ç:</b>\n"
            response += f"‚Ä¢ ID: <code>{chat_info.get('id', 'N/A')}</code>\n"
            response += f"‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {chat_info.get('title', 'N/A')}\n"
            response += f"‚Ä¢ Username: @{chat_info.get('username', 'N/A')}\n"
            response += f"‚Ä¢ –¢–∏–ø: {chat_info.get('type', 'N/A')}\n"
            response += f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {'‚úÖ –ê–Ω—Ç–∏—Å–ø–∞–º –∞–∫—Ç–∏–≤–µ–Ω' if chat_info.get('is_active', False) else '‚ùå –ê–Ω—Ç–∏—Å–ø–∞–º –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω'}"
            
            await message.answer(response)
            logger.info(f"Chat found: {chat_info.get('id')}")
        else:
            await message.answer(f"‚ùå –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {chat_identifier}")
            logger.info(f"Chat not found: {chat_identifier}")

    except Exception as e:
        logger.error(f"Error in find_chat command: {sanitize_for_logging(str(e))}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —á–∞—Ç–∞")


# –ö–æ–º–∞–Ω–¥–∞ spam_analysis –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –∏–∑ –ø–æ–¥—Ä–æ—É—Ç–µ—Ä–∞ (–ø—Ä–æ–±–ª–µ–º–∞ Aiogram 3.x —Å –ø–æ–¥—Ä–æ—É—Ç–µ—Ä–∞–º–∏)
@admin_router.message(Command("spam_analysis"))
async def handle_spam_analysis_command(message: Message) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∞–Ω–∞–ª–∏–∑–∞ —Å–ø–∞–º–∞."""
    logger.info("SPAM_ANALYSIS HANDLER CALLED!")
    try:
        user_id = message.from_user.id if message.from_user else 0
        logger.info(f"Spam analysis menu requested by user {user_id}")
        
        from app.keyboards.inline import get_spam_analysis_keyboard
        keyboard = get_spam_analysis_keyboard()
        
        await message.answer(
            "üîç <b>–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö —Å–ø–∞–º–∞</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        logger.info(f"Spam analysis menu sent to user {user_id}")
    except Exception as e:
        logger.error(f"Error in spam_analysis_menu: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é –∞–Ω–∞–ª–∏–∑–∞ —Å–ø–∞–º–∞")
