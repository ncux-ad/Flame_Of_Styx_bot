"""
–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–∏–º–∏—Ç–∞–º–∏
"""

import logging
from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message

from app.services.limits import LimitsService
from app.utils.error_handling import handle_errors
from app.utils.security import sanitize_for_logging
from app.middlewares.silent_logging import send_silent_response

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥ –ª–∏–º–∏—Ç–æ–≤
limits_router = Router()


@limits_router.message(Command("setlimits"))
async def handle_setlimits_command(
    message: Message,
    limits_service: LimitsService,
    admin_id: int,
) -> None:
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–∏–º–∏—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã."""
    try:
        if not message.from_user:
            return
        logger.info(f"Setlimits command from {sanitize_for_logging(str(message.from_user.id))}")

        limits = limits_service.get_current_limits()
        
        text = "‚öôÔ∏è <b>–¢–µ–∫—É—â–∏–µ –ª–∏–º–∏—Ç—ã —Å–∏—Å—Ç–µ–º—ã</b>\n\n"
        text += f"üìä <b>–°–æ–æ–±—â–µ–Ω–∏—è:</b> {limits.get('max_messages_per_minute', 'N/A')} –≤ –º–∏–Ω—É—Ç—É\n"
        text += f"üîó <b>–°—Å—ã–ª–∫–∏:</b> {limits.get('max_links_per_message', 'N/A')} –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏\n"
        text += f"‚è∞ <b>–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞:</b> {limits.get('ban_duration_hours', 'N/A')} —á–∞—Å–æ–≤\n"
        text += f"üéØ <b>–ü–æ—Ä–æ–≥ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:</b> {limits.get('suspicion_threshold', 'N/A')}\n"
        text += f"üì∑ <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ–¥–∏–∞:</b> {'–í–∫–ª—é—á–µ–Ω–∞' if limits.get('check_media_without_caption', False) else '–û—Ç–∫–ª—é—á–µ–Ω–∞'}\n"
        text += f"üñºÔ∏è <b>–§–æ—Ç–æ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏:</b> {'–†–∞–∑—Ä–µ—à–µ–Ω—ã' if limits.get('allow_photos_without_caption', False) else '–ó–∞–ø—Ä–µ—â–µ–Ω—ã'}\n"
        text += f"üé¨ <b>–í–∏–¥–µ–æ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏:</b> {'–†–∞–∑—Ä–µ—à–µ–Ω—ã' if limits.get('allow_videos_without_caption', False) else '–ó–∞–ø—Ä–µ—â–µ–Ω—ã'}\n"
        text += f"üìÑ <b>–†–∞–∑–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞:</b> {limits.get('max_document_size_suspicious', 'N/A')} –±–∞–π—Ç\n\n"
        text += "üí° <b>–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:</b> /setlimit"

        await send_silent_response(message, text)
        logger.info(f"Limits sent to {sanitize_for_logging(str(message.from_user.id))}")

    except Exception as e:
        logger.error(f"Error in setlimits command: {sanitize_for_logging(str(e))}")
        await send_silent_response(message, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤")


@limits_router.message(Command("reload_limits"))
async def handle_reload_limits_command(
    message: Message,
    limits_service: LimitsService,
    admin_id: int,
) -> None:
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞."""
    try:
        if not message.from_user:
            return
        logger.info(f"Reload limits command from {sanitize_for_logging(str(message.from_user.id))}")

        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ª–∏–º–∏—Ç—ã
        success = limits_service.reload_limits()
        
        if success:
            await send_silent_response(message,
                "‚úÖ <b>–õ–∏–º–∏—Ç—ã –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã!</b>\n\n"
                "üîÑ –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏\n"
                "üìä –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ"
            )
        else:
            await send_silent_response(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ –ª–∏–º–∏—Ç–æ–≤!")

        logger.info(f"Reload limits completed for {sanitize_for_logging(str(message.from_user.id))}")

    except Exception as e:
        logger.error(f"Error in reload_limits command: {sanitize_for_logging(str(e))}")
        await send_silent_response(message, "‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –ª–∏–º–∏—Ç–æ–≤")
