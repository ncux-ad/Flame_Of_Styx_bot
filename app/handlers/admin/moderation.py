"""
–ö–æ–º–∞–Ω–¥—ã –º–æ–¥–µ—Ä–∞—Ü–∏–∏ (unban, banned, ban_history, sync_bans)
"""

import logging
from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message

from app.services.moderation import ModerationService
from app.services.channels import ChannelService
from app.services.profiles import ProfileService
from app.utils.error_handling import handle_errors
from app.utils.security import sanitize_for_logging

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
moderation_router = Router()


@moderation_router.message(Command("unban"))
async def handle_unban_command(
    message: Message,
    moderation_service: ModerationService,
    channel_service: ChannelService,
    profile_service: ProfileService,
    admin_id: int,
) -> None:
    """–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏."""
    try:
        if not message.from_user:
            return
        logger.info(f"Unban command from {sanitize_for_logging(str(message.from_user.id))}")

        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        if not message.text:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return
        args = message.text.split()[1:] if message.text and len(message.text.split()) > 1 else []

        if not args:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±–æ—Ä–∞
            banned_users = await moderation_service.get_banned_users(limit=5)

            if not banned_users:
                await message.answer("‚ùå –ù–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                return

            text = "üö´ <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:</b>\n\n"

            for i, log_entry in enumerate(banned_users, 1):
                user_id = log_entry.user_id
                reason = log_entry.reason or "–°–ø–∞–º"
                chat_id = log_entry.chat_id

                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                user_info = await profile_service.get_user_info(int(str(user_id)))
                user_display = (
                    f"@{user_info.get('username')}"
                    if user_info.get("username")
                    else f"{user_info.get('first_name', '')} {user_info.get('last_name', '')}".strip()
                )
                if not user_display or user_display == "Unknown User":
                    user_display = f"User {user_id}"

                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
                chat_info = (
                    await channel_service.get_channel_info(chat_id) if chat_id else {"title": "Unknown Chat", "username": None}
                )
                chat_display = f"@{chat_info.get('username')}" if chat_info.get("username") else chat_info.get("title", "Unknown Chat")

                text += f"{i}. <b>{user_display}</b> <code>({user_id})</code>\n"
                text += f"   –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
                text += f"   –ß–∞—Ç: <b>{chat_display}</b> <code>({chat_id})</code>\n\n"

            text += "üí° <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>\n"
            text += "‚Ä¢ <code>/unban 1</code> - —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ –Ω–æ–º–µ—Ä—É\n"
            text += "‚Ä¢ <code>/unban &lt;user_id&gt; [chat_id]</code> - —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ ID"

            await message.answer(text)
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ –Ω–æ–º–µ—Ä—É
        if args[0].isdigit() and 1 <= int(args[0]) <= 5:
            banned_users = await moderation_service.get_banned_users(limit=5)
            user_index = int(args[0]) - 1

            if 0 <= user_index < len(banned_users):
                log_entry = banned_users[user_index]
                user_id = log_entry.user_id
                chat_id = log_entry.chat_id

                # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                success = await moderation_service.unban_user(user_id=user_id, chat_id=chat_id, admin_id=admin_id)

                if success:
                    await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{sanitize_for_logging(str(user_id))}</code> —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ —á–∞—Ç–µ <code>{sanitize_for_logging(str(chat_id))}</code>")
                    logger.info(f"User {sanitize_for_logging(str(user_id))} unbanned by admin {sanitize_for_logging(str(admin_id))}")
                else:
                    await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>{sanitize_for_logging(str(user_id))}</code>")
            else:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ user_id
        try:
            user_id = int(args[0])
            chat_id = int(args[1]) if len(args) > 1 else None

            # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            success = await moderation_service.unban_user(user_id=user_id, chat_id=chat_id, admin_id=admin_id)

            if success:
                chat_info = f" –≤ —á–∞—Ç–µ <code>{sanitize_for_logging(str(chat_id))}</code>" if chat_id else ""
                await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{sanitize_for_logging(str(user_id))}</code> —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω{chat_info}")
                logger.info(f"User {sanitize_for_logging(str(user_id))} unbanned by admin {sanitize_for_logging(str(admin_id))}")
            else:
                await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>{sanitize_for_logging(str(user_id))}</code>")

        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —á–∞—Ç–∞")

    except Exception as e:
        logger.error(f"Error in unban command: {sanitize_for_logging(str(e))}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")


@moderation_router.message(Command("force_unban"))
async def handle_force_unban_command(
    message: Message,
    moderation_service: ModerationService,
    channel_service: ChannelService,
    profile_service: ProfileService,
    admin_id: int,
) -> None:
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞–∑–±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID –∏–ª–∏ username."""
    try:
        if not message.from_user:
            return
        logger.info(f"Force unban command from {sanitize_for_logging(str(message.from_user.id))}")

        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        if not message.text:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return
        args = message.text.split()[1:] if message.text and len(message.text.split()) > 1 else []

        if not args:
            await message.answer(
                "‚ùå <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b> /force_unban &lt;user_id&gt; [chat_id] –∏–ª–∏ /force_unban @username [chat_id]\n\n"
                "üí° <b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
                "‚Ä¢ /force_unban 123456789\n"
                "‚Ä¢ /force_unban @username\n"
                "‚Ä¢ /force_unban 123456789 -1001234567890"
            )
            return

        user_identifier = args[0]
        chat_id = int(args[1]) if len(args) > 1 else None

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º user_id
        user_id = None
        if user_identifier.startswith("@"):
            # –≠—Ç–æ username, –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ user_id
            username = user_identifier[1:]  # –£–±–∏—Ä–∞–µ–º @
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —á–µ—Ä–µ–∑ Telegram API
                user_info = await moderation_service.bot.get_chat_member(chat_id=chat_id, user_id=int(username))
                user_id = user_info.user.id
                logger.info(f"Found user_id {sanitize_for_logging(str(user_id))} for username @{sanitize_for_logging(username)}")
            except Exception as e:
                await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{sanitize_for_logging(username)}: {sanitize_for_logging(str(e))}")
                return
        else:
            # –≠—Ç–æ user_id
            try:
                user_id = int(user_identifier)
            except ValueError:
                await message.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {sanitize_for_logging(str(user_identifier))}")
                return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —á–∞—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –±–æ—Ç –º–æ–∂–µ—Ç –≤ –Ω–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å
        if chat_id:
            try:
                chat_info = await moderation_service.bot.get_chat(chat_id)
                logger.info(f"Chat info: {chat_info.title} ({chat_id})")
            except Exception as e:
                await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ {chat_id}: {sanitize_for_logging(str(e))}")
                return

        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        success = await moderation_service.unban_user(user_id=user_id, chat_id=chat_id, admin_id=admin_id)

        if success:
            chat_info = f" –≤ —á–∞—Ç–µ <code>{sanitize_for_logging(str(chat_id))}</code>" if chat_id else " –≤–æ –≤—Å–µ—Ö —á–∞—Ç–∞—Ö"
            await message.answer(
                f"‚úÖ <b>–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞–∑–±–∞–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω</b>\n\n"
                f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> <code>{sanitize_for_logging(str(user_id))}</code>\n"
                f"üìç <b>–û–±–ª–∞—Å—Ç—å:</b> {chat_info}\n"
                f"üîì <b>–°—Ç–∞—Ç—É—Å:</b> –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
            )
            logger.info(f"Force unban completed for user {sanitize_for_logging(str(user_id))} by admin {sanitize_for_logging(str(admin_id))}")
        else:
            await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞–∑–±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>{sanitize_for_logging(str(user_id))}</code>")

    except Exception as e:
        logger.error(f"Error in force_unban command: {sanitize_for_logging(str(e))}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–∞–∑–±–∞–Ω–∞")


@moderation_router.message(Command("banned"))
async def handle_banned_command(
    message: Message,
    moderation_service: ModerationService,
    channel_service: ChannelService,
    profile_service: ProfileService,
    admin_id: int,
) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    try:
        if not message.from_user:
            return
        logger.info(f"Banned command from {sanitize_for_logging(str(message.from_user.id))}")

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        banned_users = await moderation_service.get_banned_users(limit=20)

        if not banned_users:
            await message.answer("‚úÖ –ù–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            return

        text = "üö´ <b>–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</b>\n\n"

        for i, log_entry in enumerate(banned_users, 1):
            user_id = log_entry.user_id
            reason = log_entry.reason or "–°–ø–∞–º"
            chat_id = log_entry.chat_id
            date_text = log_entry.created_at.strftime("%d.%m.%Y %H:%M") if log_entry.created_at else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user_info = await profile_service.get_user_info(int(str(user_id)))
            user_display = (
                f"@{user_info.get('username')}"
                if user_info.get("username")
                else f"{user_info.get('first_name', '')} {user_info.get('last_name', '')}".strip()
            )
            if not user_display or user_display == "Unknown User":
                user_display = f"User {user_id}"

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
            chat_info = (
                await channel_service.get_channel_info(chat_id) if chat_id else {"title": "Unknown Chat", "username": None}
            )
            chat_display = f"@{chat_info.get('username')}" if chat_info.get("username") else chat_info.get("title", "Unknown Chat")

            text += f"{i}. <b>{user_display}</b> <code>({user_id})</code>\n"
            text += f"   –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
            text += f"   –ß–∞—Ç: <b>{chat_display}</b> <code>({chat_id})</code>\n"
            text += f"   –î–∞—Ç–∞: {date_text}\n\n"

        text += "üí° <b>–î–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:</b> /unban"

        await message.answer(text)
        logger.info(f"Banned users list sent to {sanitize_for_logging(str(message.from_user.id))}")

    except Exception as e:
        logger.error(f"Error in banned command: {sanitize_for_logging(str(e))}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö")


@moderation_router.message(Command("ban_history"))
async def handle_ban_history_command(
    message: Message,
    moderation_service: ModerationService,
    channel_service: ChannelService,
    profile_service: ProfileService,
    admin_id: int,
) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –±–∞–Ω–æ–≤."""
    try:
        if not message.from_user:
            return
        logger.info(f"Ban history command from {sanitize_for_logging(str(message.from_user.id))}")

        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –±–∞–Ω–æ–≤
        ban_logs = await moderation_service.get_ban_history(limit=50)

        if not ban_logs:
            await message.answer("üìã –ò—Å—Ç–æ—Ä–∏—è –±–∞–Ω–æ–≤ –ø—É—Å—Ç–∞")
            return

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —á–∞—Ç–∞–º
        bans_by_chat = {}
        for log_entry in ban_logs:
            chat_id = log_entry.chat_id
            if chat_id not in bans_by_chat:
                bans_by_chat[chat_id] = []
            bans_by_chat[chat_id].append(log_entry)

        text = "üìã <b>–ò—Å—Ç–æ—Ä–∏—è –±–∞–Ω–æ–≤</b>\n\n"

        entry_number = 1
        for chat_id, chat_bans in bans_by_chat.items():
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
            chat_info = (
                await channel_service.get_channel_info(chat_id) if chat_id else {"title": "Unknown Chat", "username": None}
            )
            chat_display = f"@{chat_info.get('username')}" if chat_info.get("username") else chat_info.get("title", "Unknown Chat")
            
            text += f"<b>üí¨ {chat_display}</b> <code>({chat_id})</code>\n"
            
            for log_entry in chat_bans:
                user_id = log_entry.user_id
                reason = log_entry.reason or "–°–ø–∞–º"
                date_text = log_entry.created_at.strftime("%d.%m.%Y %H:%M") if log_entry.created_at else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                is_active = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if log_entry.is_active else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"

                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                user_info = await profile_service.get_user_info(int(str(user_id)))
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if user_info.get("username"):
                    user_display = f"@{user_info.get('username')}"
                else:
                    first_name = user_info.get("first_name", "")
                    last_name = user_info.get("last_name", "")
                    full_name = f"{first_name} {last_name}".strip()
                    user_display = full_name if full_name else f"User {user_id}"

                text += f"  {entry_number}. <b>{user_display}</b> <code>({user_id})</code>\n"
                text += f"     –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
                text += f"     –°—Ç–∞—Ç—É—Å: {is_active}\n"
                text += f"     –î–∞—Ç–∞: {date_text}\n\n"
                
                entry_number += 1
            
            text += "\n"

        text += "üí° <b>–î–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:</b>\n"
        text += "‚Ä¢ <code>/sync_bans &lt;chat_id&gt;</code>\n"
        text += "‚Ä¢ <code>/sync_bans 1</code> - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ –Ω–æ–º–µ—Ä—É"

        await message.answer(text)
        logger.info(f"Ban history sent to {sanitize_for_logging(str(message.from_user.id))}")

    except Exception as e:
        logger.error(f"Error in ban_history command: {sanitize_for_logging(str(e))}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –±–∞–Ω–æ–≤")


@moderation_router.message(Command("sync_bans"))
async def handle_sync_bans_command(
    message: Message,
    moderation_service: ModerationService,
    channel_service: ChannelService,
    admin_id: int,
) -> None:
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±–∞–Ω–æ–≤ —Å Telegram."""
    try:
        if not message.from_user:
            return
        logger.info(f"Sync bans command from {sanitize_for_logging(str(message.from_user.id))}")

        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        if not message.text:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return
        args = message.text.split()[1:] if message.text and len(message.text.split()) > 1 else []

        if not args:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —á–∞—Ç—ã –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            recent_chats = await moderation_service.get_recent_chats(limit=5)

            if not recent_chats:
                await message.answer("‚ùå –ù–µ—Ç —á–∞—Ç–æ–≤ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
                return

            text = "üîÑ <b>–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –±–∞–Ω–æ–≤:</b>\n\n"

            for i, chat_id in enumerate(recent_chats, 1):
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
                chat_info = (
                    await channel_service.get_channel_info(chat_id) if chat_id else {"title": "Unknown Chat", "username": None}
                )
                chat_display = f"@{chat_info.get('username')}" if chat_info.get("username") else chat_info.get("title", "Unknown Chat")
                
                text += f"{i}. <b>{chat_display}</b> <code>({chat_id})</code>\n"

            text += "\nüí° <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>\n"
            text += "‚Ä¢ <code>/sync_bans 1</code> - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ –Ω–æ–º–µ—Ä—É\n"
            text += "‚Ä¢ <code>/sync_bans &lt;chat_id&gt;</code> - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ ID\n"
            text += "‚Ä¢ <code>/sync_bans &lt;user_id&gt; &lt;chat_id&gt;</code> - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"

            await message.answer(text)
            return

        if len(args) == 1:
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ –Ω–æ–º–µ—Ä—É –∏–ª–∏ chat_id
            if args[0].isdigit() and 1 <= int(args[0]) <= 5:
                # –ü–æ –Ω–æ–º–µ—Ä—É
                recent_chats = await moderation_service.get_recent_chats(limit=5)
                chat_index = int(args[0]) - 1
                
                if 0 <= chat_index < len(recent_chats):
                    chat_id = recent_chats[chat_index]
                    result = await moderation_service.sync_bans_with_telegram(chat_id)
                    
                    if result['success']:
                        await message.answer(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è —á–∞—Ç–∞ {chat_id}\n\n{result['message']}")
                    else:
                        await message.answer(f"‚ö†Ô∏è {result['message']}")
                else:
                    await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —á–∞—Ç–∞")
            else:
                # –ü–æ chat_id
                try:
                    chat_id = int(args[0])
                    result = await moderation_service.sync_bans_with_telegram(chat_id)
                    
                    if result['success']:
                        await message.answer(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è —á–∞—Ç–∞ {chat_id}\n\n{result['message']}")
                    else:
                        await message.answer(f"‚ö†Ô∏è {result['message']}")
                except ValueError:
                    await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —á–∞—Ç–∞")
        else:
            # user_id –∏ chat_id - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                user_id = int(args[0])
                chat_id = int(args[1])
                # –ï—Å–ª–∏ ID –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –∏ –¥–ª–∏–Ω–Ω—ã–π, –¥–æ–±–∞–≤–ª—è–µ–º –º–∏–Ω—É—Å –¥–ª—è –≥—Ä—É–ø–ø/–∫–∞–Ω–∞–ª–æ–≤
                if chat_id > 0 and len(str(chat_id)) >= 10:
                    chat_id = -chat_id
            except ValueError:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —á–∞—Ç–∞")
                return
            
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
                member = await moderation_service.bot.get_chat_member(chat_id=chat_id, user_id=user_id)
                telegram_status = member.status
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                is_banned_db = await moderation_service.is_user_banned(user_id)
                
                # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å
                if telegram_status in ["kicked", "left"] and not is_banned_db:
                    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ Telegram, –Ω–æ –Ω–µ –≤ –ë–î - –¥–æ–±–∞–≤–ª—è–µ–º –≤ –ë–î
                    await moderation_service.ban_user(user_id, chat_id, "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Telegram", admin_id)
                    await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –±–∞–Ω–æ–≤")
                elif telegram_status not in ["kicked", "left"] and is_banned_db:
                    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ Telegram, –Ω–æ –≤ –ë–î - —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º
                    await moderation_service.unban_user(user_id, chat_id, admin_id)
                    await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
                else:
                    await message.answer(f"‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É–∂–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω")
                    
            except Exception as e:
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {sanitize_for_logging(str(e))}")

    except Exception as e:
        logger.error(f"Error in sync_bans command: {sanitize_for_logging(str(e))}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –±–∞–Ω–æ–≤")
