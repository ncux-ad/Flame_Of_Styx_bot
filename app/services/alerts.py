"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
"""

import asyncio
from dataclasses import dataclass
from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from aiogram import Bot
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import Message

from app.config import Settings
from app.utils.security import sanitize_for_logging


class AlertLevel(Enum):
    """–£—Ä–æ–≤–Ω–∏ –∞–ª–µ—Ä—Ç–æ–≤"""

    ERROR = "error"
    WARNING = "warning"
    INFO = "info"
    SUCCESS = "success"


class AlertType(Enum):
    """–¢–∏–ø—ã –∞–ª–µ—Ä—Ç–æ–≤"""

    SYSTEM_ERROR = "system_error"
    RATE_LIMIT_EXCEEDED = "rate_limit_exceeded"
    SUSPICIOUS_ACTIVITY = "suspicious_activity"
    BAN_ACTION = "ban_action"
    CHANNEL_JOINED = "channel_joined"
    BOT_STATUS = "bot_status"
    DATABASE_ERROR = "database_error"
    REDIS_ERROR = "redis_error"


@dataclass
class Alert:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∞–ª–µ—Ä—Ç–∞"""

    level: AlertLevel
    alert_type: AlertType
    title: str
    message: str
    data: Optional[Dict[str, Any]] = None
    timestamp: Optional[datetime] = None

    def __post_init__(self):
        if self.timestamp is None:
            self.timestamp = datetime.now()


class AlertService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"""

    def __init__(self, bot: Bot, config: Settings):
        self.bot = bot
        self.config = config
        self.admin_ids = config.admin_ids_list
        self.alert_queue: List[Alert] = []
        self.rate_limits: Dict[int, datetime] = {}  # user_id -> last_alert_time
        self.min_alert_interval = 60  # —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –∞–ª–µ—Ä—Ç–∞–º–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞

    async def send_alert(
        self,
        level: AlertLevel,
        alert_type: AlertType,
        title: str,
        message: str,
        data: Optional[Dict[str, Any]] = None,
        admin_ids: Optional[List[int]] = None,
    ) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–ª–µ—Ä—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"""
        try:
            alert = Alert(level=level, alert_type=alert_type, title=title, message=message, data=data)

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
            self.alert_queue.append(alert)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª–µ—Ä—Ç
            return await self._send_alert_to_admins(alert, admin_ids)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞: {e}")
            return False

    async def _send_alert_to_admins(self, alert: Alert, admin_ids: Optional[List[int]] = None) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–ª–µ—Ä—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∞–¥–º–∏–Ω–∞–º"""
        if admin_ids is None:
            admin_ids = self.admin_ids

        if not admin_ids:
            return False

        success_count = 0

        for admin_id in admin_ids:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limit
                if not self._check_rate_limit(admin_id):
                    continue

                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                formatted_message = self._format_alert_message(alert)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                await self.bot.send_message(chat_id=admin_id, text=formatted_message, parse_mode="HTML")

                # –û–±–Ω–æ–≤–ª—è–µ–º rate limit
                self.rate_limits[admin_id] = datetime.now()
                success_count += 1

            except TelegramBadRequest as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
                continue
            except Exception as e:
                print(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–ª–µ—Ä—Ç–∞ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
                continue

        return success_count > 0

    def _check_rate_limit(self, admin_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å rate limit –¥–ª—è –∞–¥–º–∏–Ω–∞"""
        if admin_id not in self.rate_limits:
            return True

        last_alert = self.rate_limits[admin_id]
        time_diff = (datetime.now() - last_alert).total_seconds()

        return time_diff >= self.min_alert_interval

    def _format_alert_message(self, alert: Alert) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞"""
        # –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π
        level_emojis = {AlertLevel.ERROR: "üî¥", AlertLevel.WARNING: "‚ö†Ô∏è", AlertLevel.INFO: "‚ÑπÔ∏è", AlertLevel.SUCCESS: "‚úÖ"}

        # –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
        type_emojis = {
            AlertType.SYSTEM_ERROR: "üí•",
            AlertType.RATE_LIMIT_EXCEEDED: "üö´",
            AlertType.SUSPICIOUS_ACTIVITY: "üëÅÔ∏è",
            AlertType.BAN_ACTION: "üî®",
            AlertType.CHANNEL_JOINED: "‚ûï",
            AlertType.BOT_STATUS: "ü§ñ",
            AlertType.DATABASE_ERROR: "üóÑÔ∏è",
            AlertType.REDIS_ERROR: "üî¥",
        }

        level_emoji = level_emojis.get(alert.level, "‚ÑπÔ∏è")
        type_emoji = type_emojis.get(alert.alert_type, "‚ÑπÔ∏è")

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
        time_str = alert.timestamp.strftime("%H:%M:%S")

        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"{level_emoji} <b>{alert.title}</b>\n"
        message += f"{type_emoji} <i>{alert.alert_type.value}</i>\n"
        message += f"üïê {time_str}\n\n"
        message += f"{alert.message}"

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –µ—Å—Ç—å
        if alert.data:
            message += "\n\nüìä <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:</b>"
            for key, value in alert.data.items():
                safe_value = sanitize_for_logging(str(value))
                message += f"\n‚Ä¢ {key}: {safe_value}"

        return message

    async def send_error_alert(self, title: str, message: str, data: Optional[Dict[str, Any]] = None) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–ª–µ—Ä—Ç –æ–± –æ—à–∏–±–∫–µ"""
        return await self.send_alert(
            level=AlertLevel.ERROR, alert_type=AlertType.SYSTEM_ERROR, title=title, message=message, data=data
        )

    async def send_warning_alert(self, title: str, message: str, data: Optional[Dict[str, Any]] = None) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ"""
        return await self.send_alert(
            level=AlertLevel.WARNING, alert_type=AlertType.SUSPICIOUS_ACTIVITY, title=title, message=message, data=data
        )

    async def send_info_alert(self, title: str, message: str, data: Optional[Dict[str, Any]] = None) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        return await self.send_alert(
            level=AlertLevel.INFO, alert_type=AlertType.BOT_STATUS, title=title, message=message, data=data
        )

    async def send_success_alert(self, title: str, message: str, data: Optional[Dict[str, Any]] = None) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ"""
        return await self.send_alert(
            level=AlertLevel.SUCCESS, alert_type=AlertType.BAN_ACTION, title=title, message=message, data=data
        )

    async def get_alert_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–ª–µ—Ä—Ç–æ–≤"""
        return {
            "total_alerts": len(self.alert_queue),
            "recent_alerts": len([a for a in self.alert_queue if (datetime.now() - a.timestamp).total_seconds() < 3600]),
            "admin_count": len(self.admin_ids),
            "rate_limited_admins": len(self.rate_limits),
        }
