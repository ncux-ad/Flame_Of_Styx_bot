"""
Channels Admin Service - –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /channels
"""

import logging
from typing import Dict, List, Any
from aiogram.types import Message

from app.services.channels import ChannelService
from app.utils.security import sanitize_for_logging

logger = logging.getLogger(__name__)


class ChannelsAdminService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏ –≤ –∞–¥–º–∏–Ω–∫–µ."""
    
    def __init__(self, channel_service: ChannelService):
        self.channel_service = channel_service

    async def get_channels_display(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏."""
        try:
            channels = await self.channel_service.get_all_channels()
            
            if not channels:
                return "üì¢ –ö–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            
            # –†–∞–∑–¥–µ–ª—è–µ–º –∫–∞–Ω–∞–ª—ã
            native_channels = []
            foreign_channels = []
            comment_groups = []
            
            for channel in channels:
                if hasattr(channel, "is_comment_group") and bool(channel.is_comment_group):
                    comment_groups.append({
                        "title": channel.title or f"–ì—Ä—É–ø–ø–∞ {channel.telegram_id}",
                        "chat_id": str(channel.telegram_id),
                        "username": channel.username,
                        "member_count": getattr(channel, 'member_count', None),
                    })
                elif hasattr(channel, "is_native") and bool(channel.is_native):
                    native_channels.append({
                        "title": channel.title or f"–ö–∞–Ω–∞–ª {channel.telegram_id}",
                        "chat_id": str(channel.telegram_id),
                        "username": channel.username,
                        "member_count": getattr(channel, 'member_count', None),
                    })
                else:
                    foreign_channels.append({
                        "title": channel.title or f"–ö–∞–Ω–∞–ª {channel.telegram_id}",
                        "chat_id": str(channel.telegram_id),
                        "username": channel.username,
                        "member_count": getattr(channel, 'member_count', None),
                    })

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
            channels_text = "üì¢ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏</b>\n\n"
            
            # –ù–∞—Ç–∏–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
            if native_channels:
                channels_text += f"‚úÖ <b>–ù–∞—Ç–∏–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã ({len(native_channels)})</b>\n"
                channels_text += "<i>–ö–∞–Ω–∞–ª—ã –≥–¥–µ –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º</i>\n\n"
                
                for channel in native_channels[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                    username = f"@{channel['username']}" if channel.get('username') else "–ë–µ–∑ username"
                    channels_text += f"<b>{channel.get('title') or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</b>\n"
                    channels_text += f"   ID: <code>{channel.get('chat_id')}</code> | {username}\n"
                    if channel.get('member_count'):
                        channels_text += f"   üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {channel.get('member_count')}\n"
                    channels_text += "\n"
            
            # Foreign –∫–∞–Ω–∞–ª—ã
            if foreign_channels:
                channels_text += f"üîç <b>Foreign –∫–∞–Ω–∞–ª—ã ({len(foreign_channels)})</b>\n"
                channels_text += "<i>–ö–∞–Ω–∞–ª—ã –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—Ö–æ–¥—è—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (–±–æ—Ç –Ω–µ –∞–¥–º–∏–Ω)</i>\n\n"
                
                for channel in foreign_channels[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                    username = f"@{channel['username']}" if channel.get('username') else "–ë–µ–∑ username"
                    channels_text += f"<b>{channel.get('title') or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</b>\n"
                    channels_text += f"   ID: <code>{channel.get('chat_id')}</code> | {username}\n"
                    if channel.get('member_count'):
                        channels_text += f"   üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {channel.get('member_count')}\n"
                    channels_text += "\n"
            
            # –ì—Ä—É–ø–ø—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
            if comment_groups:
                channels_text += f"üí¨ <b>–ì—Ä—É–ø–ø—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ ({len(comment_groups)})</b>\n"
                channels_text += "<i>–ì—Ä—É–ø–ø—ã –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ –ø–æ—Å—Ç–∞–º</i>\n\n"
                
                for group in comment_groups:
                    channels_text += f"<b>{group['title']}</b>\n"
                    channels_text += f"   ID: <code>{group['chat_id']}</code>\n"
                    channels_text += f"   –¢–∏–ø: –ì—Ä—É–ø–ø–∞ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤\n"
                    channels_text += f"   –°—Ç–∞—Ç—É—Å: ‚úÖ –ê–Ω—Ç–∏—Å–ø–∞–º –∞–∫—Ç–∏–≤–µ–Ω\n\n"
            
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            channels_text += "üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            channels_text += f"‚Ä¢ –ù–∞—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {len(native_channels)}\n"
            channels_text += f"‚Ä¢ –ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {len(foreign_channels)}\n"
            channels_text += f"‚Ä¢ –ì—Ä—É–ø–ø –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {len(comment_groups)}\n"
            channels_text += f"‚Ä¢ –í—Å–µ–≥–æ —á–∞—Ç–æ–≤: {len(channels) + len(comment_groups)}"
            
            return channels_text
            
        except Exception as e:
            logger.error(f"Error getting channels display: {sanitize_for_logging(str(e))}")
            raise
