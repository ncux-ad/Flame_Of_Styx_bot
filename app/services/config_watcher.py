"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö.
–†–µ–∞–ª–∏–∑—É–µ—Ç hot-reload –¥–ª—è limits.json –∏ –¥—Ä—É–≥–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫.
"""

import asyncio
import json
import logging
import subprocess
# import os  # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
# import time  # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
from pathlib import Path
from typing import Any, Callable, Dict, Optional

logger = logging.getLogger(__name__)


class ConfigWatcher:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö."""

    def __init__(self, config_file: str, on_change_callback: Optional[Callable] = None):
        self.config_file = Path(config_file)
        self.on_change_callback = on_change_callback
        self.last_modified = 0
        self.last_content = ""
        self.is_running = False
        self.watch_task: Optional[asyncio.Task] = None

    async def start_watching(self, interval: float = 1.0) -> None:
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ñ–∞–π–ª–∞."""
        if self.is_running:
            logger.warning("ConfigWatcher —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return

        self.is_running = True
        self.watch_task = asyncio.create_task(self._watch_loop(interval))
        logger.info(f"ConfigWatcher –∑–∞–ø—É—â–µ–Ω –¥–ª—è —Ñ–∞–π–ª–∞: {self.config_file}")

    async def stop_watching(self) -> None:
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ñ–∞–π–ª–∞."""
        if not self.is_running:
            return

        self.is_running = False
        if self.watch_task:
            self.watch_task.cancel()
            try:
                await self.watch_task
            except asyncio.CancelledError:
                pass
        logger.info("ConfigWatcher –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    async def _watch_loop(self, interval: float) -> None:
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."""
        while self.is_running:
            try:
                await self._check_file_changes()
                await asyncio.sleep(interval)
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ ConfigWatcher: {e}")
                await asyncio.sleep(interval)

    async def _check_file_changes(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª–µ."""
        if not self.config_file.exists():
            return

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
            current_modified = self.config_file.stat().st_mtime
            if current_modified <= self.last_modified:
                return

            # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
            with open(self.config_file, "r", encoding="utf-8") as f:
                current_content = f.read()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            if current_content == self.last_content:
                self.last_modified = current_modified
                return

            # –§–∞–π–ª –∏–∑–º–µ–Ω–∏–ª—Å—è
            logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª–µ: {self.config_file}")

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
            self.last_modified = current_modified
            self.last_content = current_content

            # –í—ã–∑—ã–≤–∞–µ–º callback
            if self.on_change_callback:
                try:
                    await self.on_change_callback(self.config_file, current_content)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤ callback ConfigWatcher: {e}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–∞–π–ª–∞ {self.config_file}: {e}")

    async def force_reload(self) -> bool:
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é."""
        if not self.config_file.exists():
            return False

        try:
            with open(self.config_file, "r", encoding="utf-8") as f:
                content = f.read()

            if self.on_change_callback:
                await self.on_change_callback(self.config_file, content)
                return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ: {e}")

        return False


class LimitsHotReload:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è hot-reload –ª–∏–º–∏—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã."""

    def __init__(self, limits_service, bot, admin_ids: list):
        self.limits_service = limits_service
        self.bot = bot
        self.admin_ids = admin_ids
        self.watcher = ConfigWatcher("limits.json", self._on_limits_changed)
        self.show_limits_on_startup = True  # –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏–º–∏—Ç—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ

    async def start(self) -> None:
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å hot-reload –¥–ª—è –ª–∏–º–∏—Ç–æ–≤."""
        await self.watcher.start_watching(interval=2.0)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
        logger.info("Hot-reload –¥–ª—è –ª–∏–º–∏—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω")

    async def stop(self) -> None:
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å hot-reload –¥–ª—è –ª–∏–º–∏—Ç–æ–≤."""
        await self.watcher.stop_watching()
        logger.info("Hot-reload –¥–ª—è –ª–∏–º–∏—Ç–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    async def _on_limits_changed(self, file_path: Path, content: str) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ª–∏–º–∏—Ç–æ–≤."""
        try:
            # –ü–∞—Ä—Å–∏–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
            new_limits = json.loads(content)

            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –ª–∏–º–∏—Ç—ã
            if not self._validate_limits(new_limits):
                logger.error("–ù–æ–≤—ã–µ –ª–∏–º–∏—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é")
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏–º–∏—Ç—ã –≤ —Å–µ—Ä–≤–∏—Å–µ
            old_limits = self.limits_service.get_current_limits()

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –ª–∏–º–∏—Ç
            for key, value in new_limits.items():
                self.limits_service.update_limit(key, value)

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            await self._notify_admins_about_reload(old_limits, new_limits)

            logger.info(f"–õ–∏–º–∏—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {new_limits}")

        except json.JSONDecodeError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –≤ limits.json: {e}")
            await self._notify_admins_about_error(f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ limits.json: {e}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–æ–≤: {e}")
            await self._notify_admins_about_error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤: {e}")

    def _validate_limits(self, limits: Dict[str, Any]) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –ª–∏–º–∏—Ç–æ–≤."""
        required_keys = [
            "max_messages_per_minute",
            "max_links_per_message",
            "ban_duration_hours",
            "suspicion_threshold",
        ]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –∫–ª—é—á–µ–π
        if not all(key in limits for key in required_keys):
            logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–ª—é—á–∏ –≤ limits.json")
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –∏ –∑–Ω–∞—á–µ–Ω–∏—è
        try:
            if not isinstance(limits["max_messages_per_minute"], int) or limits["max_messages_per_minute"] <= 0:
                return False
            if not isinstance(limits["max_links_per_message"], int) or limits["max_links_per_message"] <= 0:
                return False
            if not isinstance(limits["ban_duration_hours"], int) or limits["ban_duration_hours"] <= 0:
                return False
            if not isinstance(limits["suspicion_threshold"], (int, float)) or not (0 <= limits["suspicion_threshold"] <= 1):
                return False
        except (TypeError, ValueError):
            return False

        return True

    async def _notify_admins_about_reload(self, old_limits: Dict, new_limits: Dict) -> None:
        """–£–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–æ–≤."""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            is_first_start = not hasattr(self, '_first_notification_sent')
            
            if is_first_start:
                # –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ - –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                message = "ü§ñ <b>AntiSpam Bot –∑–∞–ø—É—â–µ–Ω</b>\n\n"
                message += "‚úÖ <b>–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ</b>\n"
                message += "üõ°Ô∏è <b>–ê–Ω—Ç–∏—Å–ø–∞–º –∞–∫—Ç–∏–≤–µ–Ω</b>\n"
                message += "üìä <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤–∫–ª—é—á–µ–Ω</b>\n\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–º–∏—Ç–µ
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
                    import os
                    project_root = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    logger.info(f"Trying to get git commit from directory: {project_root}")
                    
                    result = subprocess.run(
                        ["git", "rev-parse", "--short", "HEAD"],
                        capture_output=True,
                        text=True,
                        cwd=project_root
                    )
                    
                    logger.info(f"Git command result: returncode={result.returncode}, stdout='{result.stdout.strip()}', stderr='{result.stderr.strip()}'")
                    
                    if result.returncode == 0:
                        commit_hash = result.stdout.strip()
                        message += f"üìù <b>ID —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–º–º–∏—Ç–∞:</b> <code>{commit_hash}</code>\n\n"
                    else:
                        message += f"üìù <b>ID —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–º–º–∏—Ç–∞:</b> <code>–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ (git error: {result.stderr.strip()})</code>\n\n"
                except Exception as e:
                    logger.error(f"Error getting git commit: {e}")
                    message += f"üìù <b>ID —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–º–º–∏—Ç–∞:</b> <code>–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ (error: {str(e)})</code>\n\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–º–∏—Ç–∞—Ö (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
                if getattr(self, 'show_limits_on_startup', True):
                    message += "‚öôÔ∏è <b>–¢–µ–∫—É—â–∏–µ –ª–∏–º–∏—Ç—ã:</b>\n"
                    for key, value in new_limits.items():
                        message += f"‚Ä¢ <b>{key}:</b> {value}\n"
                
                self._first_notification_sent = True
            else:
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤
                message = "üîÑ <b>–õ–∏–º–∏—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!</b>\n\n"

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                for key, new_value in new_limits.items():
                    old_value = old_limits.get(key, "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                    if old_value != new_value:
                        message += f"‚Ä¢ <b>{key}:</b> {old_value} ‚Üí {new_value}\n"
                    else:
                        message += f"‚Ä¢ <b>{key}:</b> {new_value}\n"

                message += "\n‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø–∏–ª–∏ –≤ —Å–∏–ª—É –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ"

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
            for admin_id in self.admin_ids:
                try:
                    await self.bot.send_message(chat_id=admin_id, text=message)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {e}")

    async def _notify_admins_about_error(self, error_message: str) -> None:
        """–£–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ–± –æ—à–∏–±–∫–µ."""
        try:
            message = f"‚ùå <b>–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤</b>\n\n{error_message}"

            for admin_id in self.admin_ids:
                try:
                    await self.bot.send_message(chat_id=admin_id, text=message)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –æ–± –æ—à–∏–±–∫–µ: {e}")

    async def force_reload(self) -> bool:
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ª–∏–º–∏—Ç—ã."""
        return await self.watcher.force_reload()
