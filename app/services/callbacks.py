"""
Callbacks Service - –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ –¥–ª—è callback-–æ–≤
"""

import logging
from typing import Any, Dict, Optional

from aiogram.types import CallbackQuery

from app.services.moderation import ModerationService
from app.services.profiles import ProfileService
from app.utils.security import sanitize_for_logging

logger = logging.getLogger(__name__)


class CallbacksService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback-–æ–≤."""

    def __init__(
        self,
        moderation_service: ModerationService,
        profile_service: ProfileService,
    ):
        self.moderation_service = moderation_service
        self.profile_service = profile_service

    async def handle_ban_suspicious_user(self, callback_query: CallbackQuery, user_id: int, admin_id: int) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –±–∞–Ω –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        try:
            if not callback_query.from_user:
                return {"success": False, "error": "No user"}

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user_info = await self.profile_service.get_user_info(user_id)

            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—á–µ—Ç–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            profile = await self.profile_service._get_suspicious_profile(user_id)
            suspicion_score = profile.suspicion_score if profile else 0.0

            # –ë–∞–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            success = await self.moderation_service.ban_user(
                user_id=user_id,
                chat_id=callback_query.message.chat.id if callback_query.message else 0,
                reason=f"–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å (—Å—á–µ—Ç: {suspicion_score:.2f})",
                admin_id=admin_id,
            )

            if success:
                # –û—Ç–º–µ—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∫–∞–∫ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π
                await self.profile_service.mark_profile_as_reviewed(
                    user_id=user_id,
                    admin_id=admin_id,
                    is_confirmed=True,
                    notes="–ó–∞–±–∞–Ω–µ–Ω –∑–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å",
                )

                return {
                    "success": True,
                    "user_info": user_info,
                    "user_id": user_id,
                    "suspicion_score": suspicion_score,
                }
            else:
                return {
                    "success": False,
                    "error": "Failed to ban user",
                    "user_id": user_id,
                }

        except Exception as e:
            logger.error(f"Error in ban_suspicious callback: {sanitize_for_logging(str(e))}")
            return {
                "success": False,
                "error": str(e),
                "user_id": user_id,
            }

    async def handle_watch_suspicious_user(self, callback_query: CallbackQuery, user_id: int, admin_id: int) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ."""
        try:
            if not callback_query.from_user:
                return {"success": False, "error": "No user"}

            # –û—Ç–º–µ—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∫–∞–∫ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π, –Ω–æ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π
            await self.profile_service.mark_profile_as_reviewed(
                user_id=user_id,
                admin_id=admin_id,
                is_confirmed=False,
                notes="–ü–æ–º–µ—á–µ–Ω –¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è",
            )

            return {
                "success": True,
                "user_id": user_id,
            }

        except Exception as e:
            logger.error(f"Error in watch_suspicious callback: {sanitize_for_logging(str(e))}")
            return {
                "success": False,
                "error": str(e),
                "user_id": user_id,
            }

    async def handle_allow_suspicious_user(self, callback_query: CallbackQuery, user_id: int, admin_id: int) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ª–æ–∂–Ω–æ–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ)."""
        try:
            if not callback_query.from_user:
                return {"success": False, "error": "No user"}

            # –û—Ç–º–µ—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∫–∞–∫ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π –∏ –ª–æ–∂–Ω–æ–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ
            await self.profile_service.mark_profile_as_reviewed(
                user_id=user_id,
                admin_id=admin_id,
                is_confirmed=False,
                notes="–õ–æ–∂–Ω–æ–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ - —Ä–∞–∑—Ä–µ—à–µ–Ω",
            )

            return {
                "success": True,
                "user_id": user_id,
            }

        except Exception as e:
            logger.error(f"Error in allow_suspicious callback: {sanitize_for_logging(str(e))}")
            return {
                "success": False,
                "error": str(e),
                "user_id": user_id,
            }

    def get_ban_success_message(self, user_info: Dict[str, Any], user_id: int) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –±–∞–Ω–µ."""
        return (
            f"üö´ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω</b>\n\n"
            f"ID: {user_id}\n"
            f"–ò–º—è: {user_info.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            f"–ü—Ä–∏—á–∏–Ω–∞: –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å"
        )

    def get_watch_success_message(self, user_id: int) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ."""
        return f"üëÄ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ</b>\n\n" f"ID: {user_id}\n" f"–°—Ç–∞—Ç—É—Å: –ù–∞–±–ª—é–¥–µ–Ω–∏–µ"

    def get_allow_success_message(self, user_id: int) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏."""
        return f"‚úÖ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑—Ä–µ—à–µ–Ω</b>\n\n" f"ID: {user_id}\n" f"–°—Ç–∞—Ç—É—Å: –õ–æ–∂–Ω–æ–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ"

    def get_error_message(self, error_type: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ."""
        error_messages = {
            "ban": "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            "watch": "‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ",
            "allow": "‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            "general": "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏",
        }
        return error_messages.get(error_type, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
