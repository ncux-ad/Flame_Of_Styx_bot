"""
Bots Admin Service - –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /bots
"""

import logging
from typing import Dict, List, Any
from aiogram.types import Message

from app.services.bots import BotService
from app.utils.security import sanitize_for_logging

logger = logging.getLogger(__name__)


class BotsAdminService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞–º–∏ –≤ –∞–¥–º–∏–Ω–∫–µ."""
    
    def __init__(self, bot_service: BotService):
        self.bot_service = bot_service

    async def get_bots_display(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–æ—Ç–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏."""
        try:
            bots = await self.bot_service.get_all_bots()
            
            if not bots:
                return "ü§ñ –ë–æ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
            bots_text = "ü§ñ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞–º–∏</b>\n\n"
            
            for i, bot in enumerate(bots[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                bots_text += f"{i}. <b>{bot.username or '–ë–µ–∑ username'}</b>\n"
                bots_text += f"   ID: <code>{bot.id}</code>\n"
                if bot.first_name:
                    bots_text += f"   –ò–º—è: {bot.first_name}\n"
                bots_text += "\n"
            
            if len(bots) > 10:
                bots_text += f"\n... –∏ –µ—â–µ {len(bots) - 10} –±–æ—Ç–æ–≤"
            
            return bots_text
            
        except Exception as e:
            logger.error(f"Error getting bots display: {sanitize_for_logging(str(e))}")
            raise
