"""
Admin Service - –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥
"""

import logging
from typing import Dict, List, Optional, Any
from aiogram.types import Message, CallbackQuery, User

from app.services.bots import BotService
from app.services.channels import ChannelService
from app.services.help import HelpService
from app.services.limits import LimitsService
from app.services.moderation import ModerationService
from app.services.profiles import ProfileService
from app.utils.security import sanitize_for_logging

logger = logging.getLogger(__name__)


class AdminService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥ –∏ –æ–ø–µ—Ä–∞—Ü–∏–π."""
    
    def __init__(
        self,
        moderation_service: ModerationService,
        bot_service: BotService,
        channel_service: ChannelService,
        profile_service: ProfileService,
        help_service: HelpService,
        limits_service: LimitsService,
    ):
        self.moderation_service = moderation_service
        self.bot_service = bot_service
        self.channel_service = channel_service
        self.profile_service = profile_service
        self.help_service = help_service
        self.limits_service = limits_service

    async def get_welcome_message(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞."""
        return (
            "ü§ñ <b>AntiSpam Bot - –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è</b>\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/status - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n"
            "/channels - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏\n"
            "/sync_channels - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∫–∞–Ω–∞–ª–æ–≤\n"
            "/bots - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞–º–∏\n"
            "/suspicious - –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏\n"
            "/unban - —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
            "/banned - —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö\n"
            "/sync_bans - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–Ω—ã —Å Telegram\n"
            "/force_unban - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞–∑–±–∞–Ω –ø–æ ID/username\n"
            "/help - –ø–æ–º–æ—â—å"
        )

    async def get_status_info(self, admin_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ –±–æ—Ç–∞."""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–¥–µ—Ä–∞—Ü–∏–∏
            banned_users = await self.moderation_service.get_banned_users(limit=100)
            spam_stats = await self.moderation_service.get_spam_statistics()
            deleted_messages = spam_stats.get("deleted_messages", 0)
            total_actions = spam_stats.get("total_actions", 0)

            # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª—ã
            all_channels = await self.channel_service.get_all_channels()
            
            # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –Ω–∞—Ç–∏–≤–Ω—ã–µ –∏ Foreign
            native_channels = []
            foreign_channels = []
            comment_groups = []
            
            for channel in all_channels:
                if hasattr(channel, "is_comment_group") and bool(channel.is_comment_group):
                    comment_groups.append({
                        "title": channel.title or f"–ì—Ä—É–ø–ø–∞ {channel.telegram_id}",
                        "chat_id": str(channel.telegram_id),
                        "type": "–ì—Ä—É–ø–ø–∞ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤",
                    })
                elif hasattr(channel, "is_native") and bool(channel.is_native):
                    native_channels.append({
                        "title": channel.title or f"–ö–∞–Ω–∞–ª {channel.telegram_id}",
                        "chat_id": str(channel.telegram_id),
                        "type": "–ö–∞–Ω–∞–ª",
                    })
                else:
                    foreign_channels.append({
                        "title": channel.title or f"–ö–∞–Ω–∞–ª {channel.telegram_id}",
                        "chat_id": str(channel.telegram_id),
                        "type": "–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª",
                    })

            return {
                "bot_id": "7977609078",
                "bot_username": "@FlameOfStyx_bot",
                "banned_users_count": len(banned_users),
                "deleted_messages": deleted_messages,
                "total_actions": total_actions,
                "native_channels": native_channels,
                "foreign_channels": foreign_channels,
                "comment_groups": comment_groups,
                "admin_id": admin_id,
            }
        except Exception as e:
            logger.error(f"Error getting status info: {sanitize_for_logging(str(e))}")
            raise

    async def get_channels_info(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–∞—Ö."""
        try:
            channels = await self.channel_service.get_all_channels()
            
            # –†–∞–∑–¥–µ–ª—è–µ–º –∫–∞–Ω–∞–ª—ã
            native_channels = []
            foreign_channels = []
            comment_groups = []
            
            for channel in channels:
                if hasattr(channel, "is_comment_group") and bool(channel.is_comment_group):
                    comment_groups.append({
                        "title": channel.title or f"–ì—Ä—É–ø–ø–∞ {channel.telegram_id}",
                        "chat_id": str(channel.telegram_id),
                        "username": channel.username,
                        "member_count": getattr(channel, 'member_count', None),
                    })
                elif hasattr(channel, "is_native") and bool(channel.is_native):
                    native_channels.append({
                        "title": channel.title or f"–ö–∞–Ω–∞–ª {channel.telegram_id}",
                        "chat_id": str(channel.telegram_id),
                        "username": channel.username,
                        "member_count": getattr(channel, 'member_count', None),
                    })
                else:
                    foreign_channels.append({
                        "title": channel.title or f"–ö–∞–Ω–∞–ª {channel.telegram_id}",
                        "chat_id": str(channel.telegram_id),
                        "username": channel.username,
                        "member_count": getattr(channel, 'member_count', None),
                    })

            return {
                "native_channels": native_channels,
                "foreign_channels": foreign_channels,
                "comment_groups": comment_groups,
                "total_channels": len(channels),
            }
        except Exception as e:
            logger.error(f"Error getting channels info: {sanitize_for_logging(str(e))}")
            raise

    async def get_bots_info(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–∞—Ö."""
        try:
            bots = await self.bot_service.get_all_bots()
            return {
                "bots": bots,
                "total_bots": len(bots),
            }
        except Exception as e:
            logger.error(f"Error getting bots info: {sanitize_for_logging(str(e))}")
            raise

    async def analyze_user_profile(self, user_id: int, admin_id: int) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user_info = await self.profile_service.get_user_info(user_id)
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç User –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            from aiogram.types import User
            user = User(
                id=user_info['id'],
                is_bot=user_info['is_bot'],
                first_name=user_info['first_name'],
                last_name=user_info['last_name'],
                username=user_info['username']
            )
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å
            profile = await self.profile_service.analyze_user_profile(user, admin_id)
            
            return {
                "user_info": user_info,
                "profile": profile,
                "user_id": user_id,
            }
        except Exception as e:
            logger.error(f"Error analyzing user profile: {sanitize_for_logging(str(e))}")
            raise

    async def handle_ban_suspicious_user(
        self, 
        user_id: int, 
        chat_id: int, 
        admin_id: int,
        suspicion_score: float
    ) -> Dict[str, Any]:
        """–ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user_info = await self.profile_service.get_user_info(user_id)
            
            # –ë–∞–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            success = await self.moderation_service.ban_user(
                user_id=user_id,
                chat_id=chat_id,
                reason=f"–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å (—Å—á–µ—Ç: {suspicion_score:.2f})",
                admin_id=admin_id,
            )
            
            if success:
                # –û—Ç–º–µ—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∫–∞–∫ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π
                await self.profile_service.mark_profile_as_reviewed(
                    user_id=user_id,
                    admin_id=admin_id,
                    is_confirmed=True,
                    notes="–ó–∞–±–∞–Ω–µ–Ω –∑–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å",
                )
            
            return {
                "success": success,
                "user_info": user_info,
                "user_id": user_id,
            }
        except Exception as e:
            logger.error(f"Error banning suspicious user: {sanitize_for_logging(str(e))}")
            raise

    async def handle_watch_suspicious_user(
        self, 
        user_id: int, 
        admin_id: int
    ) -> Dict[str, Any]:
        """–î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ."""
        try:
            # –û—Ç–º–µ—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∫–∞–∫ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π, –Ω–æ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π
            await self.profile_service.mark_profile_as_reviewed(
                user_id=user_id,
                admin_id=admin_id,
                is_confirmed=False,
                notes="–î–æ–±–∞–≤–ª–µ–Ω –≤ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ",
            )
            
            return {
                "success": True,
                "user_id": user_id,
            }
        except Exception as e:
            logger.error(f"Error watching suspicious user: {sanitize_for_logging(str(e))}")
            raise

    async def handle_allow_suspicious_user(
        self, 
        user_id: int, 
        admin_id: int
    ) -> Dict[str, Any]:
        """–†–∞–∑—Ä–µ—à–∏—Ç—å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ª–æ–∂–Ω–æ–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ)."""
        try:
            # –û—Ç–º–µ—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∫–∞–∫ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π –∏ –ª–æ–∂–Ω–æ–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ
            await self.profile_service.mark_profile_as_reviewed(
                user_id=user_id,
                admin_id=admin_id,
                is_confirmed=False,
                notes="–õ–æ–∂–Ω–æ–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ - —Ä–∞–∑—Ä–µ—à–µ–Ω",
            )
            
            return {
                "success": True,
                "user_id": user_id,
            }
        except Exception as e:
            logger.error(f"Error allowing suspicious user: {sanitize_for_logging(str(e))}")
            raise
